{"version":3,"sources":["components/Page.js","App.js","serviceWorker.js","index.js"],"names":["Page","useState","state","setState","password","name","lsCheck","localStorage","getItem","prompt","setItem","console","log","className","onClick","fetch","method","headers","Headers","then","response","status","clear","catch","e","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+QA6GeA,MArGf,WAAiB,IAAD,EACUC,qBADV,mBACTC,EADS,KACFC,EADE,KAEVC,EAAW,GACXC,EAAO,GACLC,EAAU,WACVC,aAAaC,QAAQ,YACvBJ,EAAWG,aAAaC,QAAQ,YAGhB,OADhBJ,EAAWK,OAAO,sFAEhBF,aAAaG,QAAQ,WAAYN,GAIjCG,aAAaC,QAAQ,QACvBH,EAAOE,aAAaC,QAAQ,QAGhB,OADZH,EAAOI,OAAO,oEAEZF,aAAaG,QAAQ,OAAQL,IAoEnC,OAHAM,QAAQC,IAAIV,GAIV,yBAAKW,UAAU,QACZX,GAAS,yBAAKW,UAAS,4BAA+BX,GACvD,yBAAKW,UAAW,WACd,4BAAQA,UAAU,oBAAoBC,QAAS,kBA9CpDR,SACCS,MAAM,+CAAgD,CACpDC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnB,cAAgB,SAAhB,OAA0Bd,EAA1B,YAAsCC,OAGvCc,MAAK,SAAAC,GACoB,MAApBA,EAASC,OACXlB,EAAS,OAETA,EAAS,wBACTI,aAAae,YAGhBC,OAAM,SAAAC,GAAC,OAAIrB,EAAS,6NA+BnB,gBACA,4BAAQU,UAAU,oBAAoBC,QAAS,kBA3BnDR,SACAS,MAAM,8CAA+C,CACnDC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnB,cAAgB,SAAhB,OAA0Bd,EAA1B,YAAsCC,OAGvCc,MAAK,SAAAC,GACoB,MAApBA,EAASC,OACXlB,EAAS,OAETA,EAAS,wBACTI,aAAae,YAGhBC,OAAM,SAAAC,GAAC,OAAIrB,EAAS,6NAYnB,6BAEF,4BAAQU,UAAU,oBAAoBC,QAAS,kBArEjDR,SACAS,MAAM,8CAA+C,CACnDC,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnB,cAAgB,SAAhB,OAA0Bd,EAA1B,YAAsCC,OAGvCc,MAAK,SAAAC,GACoB,MAApBA,EAASC,OACXlB,EAAS,OAETA,EAAS,wBACTI,aAAae,YAGhBC,OAAM,SAAAC,GAAC,OAAIrB,EAAS,6NAsDrB,kBCvFSsB,MAPf,WAEE,OACE,kBAAC,EAAD,OCCEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,MAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfiC,UAAUC,cAAcO,YAI1BhC,QAAQC,IACN,iHAKEsB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB3B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5Bf,OAAM,SAAAuB,GACLnC,QAAQmC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBzB,OAAOC,SAASyB,MACpDC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,GAAN,sBAEP3B,IAgEV,SAAiCO,EAAOC,GAEtCnB,MAAMkB,EAAO,CACXhB,QAAS,CAAE,iBAAkB,YAE5BE,MAAK,SAAAC,GAEJ,IAAMqC,EAAcrC,EAASH,QAAQyC,IAAI,gBAEnB,MAApBtC,EAASC,QACO,MAAfoC,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CxB,UAAUC,cAAcwB,MAAMzC,MAAK,SAAAmB,GACjCA,EAAauB,aAAa1C,MAAK,WAC7BS,OAAOC,SAASiC,eAKpB9B,EAAgBC,EAAOC,MAG1BX,OAAM,WACLZ,QAAQC,IACN,oEAvFAmD,CAAwB9B,EAAOC,GAI/BC,UAAUC,cAAcwB,MAAMzC,MAAK,WACjCR,QAAQC,IACN,iHAMJoB,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.2ba07d2a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport './Page.css';\n\n\n\nfunction Page() {\n  let [state, setState] = useState();\n  let password = '';\n  let name = '';\n  const lsCheck = () =>{\n    if (localStorage.getItem('password')) {\n      password = localStorage.getItem('password')\n    } else {\n      password = prompt('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');\n      if (password != null) {\n        localStorage.setItem('password', password);\n      }\n    }\n    ;\n    if (localStorage.getItem('name')) {\n      name = localStorage.getItem('name')\n    } else {\n      name = prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è:');\n      if (name != null) {\n        localStorage.setItem('name', name);\n      }\n    }\n    ;\n  }\n    const handleCarClick = () => {\n    lsCheck();\n    fetch('https://mine-doors.herokuapp.com/mobile/car', {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Basic ${password}.${name}`\n      })\n    })\n      .then(response => {\n        if (response.status === 200) {\n          setState('OK')\n        } else {\n          setState('Something went wrong')\n          localStorage.clear();\n        }\n      })\n      .catch(e => setState(\"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\")\n      )\n\n  }\n  const handleBicycleClick = () => {\n   lsCheck();\n    fetch('https://mine-doors.herokuapp.com/mobile/bike', {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Basic ${password}.${name}`\n      })\n    })\n      .then(response => {\n        if (response.status === 200) {\n          setState('OK')\n        } else {\n          setState('Something went wrong')\n          localStorage.clear();\n        }\n      })\n      .catch(e => setState(\"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\")\n      )\n  }\n\n  const handlePersonClick = () => {\n    lsCheck();\n    fetch('https://mine-doors.herokuapp.com/mobile/man', {\n      method: 'GET',\n      headers: new Headers({\n        'Authorization': `Basic ${password}.${name}`\n      })\n    })\n      .then(response => {\n        if (response.status === 200) {\n          setState('OK')\n        } else {\n          setState('Something went wrong')\n          localStorage.clear();\n        }\n      })\n      .catch(e => setState(\"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\")\n      )\n  }\n\n  console.log(state);\n\n\n  return (\n    <div className=\"page\">\n      {state && <div className={`alert blue alert-warning`}>{state}</div>}\n      <div className={'buttons'}>\n        <button className=\"btn btn2 btn-dark\" onClick={() => handleBicycleClick()}>üö≤</button>\n        <button className=\"btn btn3 btn-dark\" onClick={() => handlePersonClick()}>üö∂üèª</button>\n      </div>\n      <button className=\"btn btn1 btn-dark\" onClick={() => handleCarClick()}>üöó</button>\n    </div>\n  );\n\n\n\n}\nexport default Page;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nimport './App.css';\nimport Page from \"./components/Page\";\n\n\nfunction App() {\n\n  return (\n    <Page/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}