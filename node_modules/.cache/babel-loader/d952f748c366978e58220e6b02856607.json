{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _includes = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _repeat = _interopRequireDefault(require(\"lodash/repeat\"));\n\nvar _renamer = _interopRequireDefault(require(\"./lib/renamer\"));\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _defaults = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _binding = _interopRequireDefault(require(\"./binding\"));\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _cache = require(\"../cache\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if (node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if (node.specifiers && node.specifiers.length) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nconst collectorVisitor = {\n  For(path) {\n    for (const key of t.FOR_INIT_KEYS) {\n      const declar = path.get(key);\n\n      if (declar.isVar()) {\n        const parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        parentScope.registerBinding(\"var\", declar);\n      }\n    }\n  },\n\n  Declaration(path) {\n    if (path.isBlockScoped()) return;\n\n    if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n      return;\n    }\n\n    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const {\n        node,\n        scope\n      } = path;\n      const declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n        const binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(t.getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            if (binding) binding.reference(path);\n          }\n        }\n      }\n    }\n\n  },\n\n  LabeledStatement(path) {\n    path.scope.getProgramParent().addGlobal(path.node);\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  Block(path) {\n    const paths = path.get(\"body\");\n\n    for (const bodyPath of paths) {\n      if (bodyPath.isFunctionDeclaration()) {\n        path.scope.getBlockParent().registerDeclaration(bodyPath);\n      }\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    const params = path.get(\"params\");\n\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n  },\n\n  ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n\n};\nlet uid = 0;\n\nclass Scope {\n  constructor(path) {\n    const {\n      node\n    } = path;\n\n    const cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  get parent() {\n    const parent = this.path.findParent(p => p.isScope());\n    return parent == null ? void 0 : parent.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse(node, opts, state) {\n    (0, _index.default)(node, opts, this, state, this.path);\n  }\n\n  generateDeclaredUidIdentifier(name) {\n    const id = this.generateUidIdentifier(name);\n    this.push({\n      id\n    });\n    return t.cloneNode(id);\n  }\n\n  generateUidIdentifier(name) {\n    return t.identifier(this.generateUid(name));\n  }\n\n  generateUid(name = \"temp\") {\n    name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n    let uid;\n    let i = 0;\n\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n    return uid;\n  }\n\n  _generateUid(name, i) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node, defaultName) {\n    const parts = [];\n    gatherNodeParts(node, parts);\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  generateUidIdentifierBasedOnNode(node, defaultName) {\n    return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  isStatic(node) {\n    if (t.isThisExpression(node) || t.isSuper(node)) {\n      return true;\n    }\n\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  maybeGenerateMemoised(node, dontPush) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n\n      if (!dontPush) {\n        this.push({\n          id\n        });\n        return t.cloneNode(id);\n      }\n\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(local, kind, name, id) {\n    if (kind === \"param\") return;\n    if (local.kind === \"local\") return;\n    const duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\n    }\n  }\n\n  rename(oldName, newName, block) {\n    const binding = this.getBinding(oldName);\n\n    if (binding) {\n      newName = newName || this.generateUidIdentifier(oldName).name;\n      return new _renamer.default(binding, oldName, newName).rename(block);\n    }\n  }\n\n  _renameFromMap(map, oldName, newName, value) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = (0, _repeat.default)(\"-\", 60);\n    console.log(sep);\n    let scope = this;\n\n    do {\n      console.log(\"#\", scope.block.type);\n\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind\n        });\n      }\n    } while (scope = scope.parent);\n\n    console.log(sep);\n  }\n\n  toArray(node, i, allowArrayLike) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if ((binding == null ? void 0 : binding.constant) && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (t.isArrayExpression(node)) {\n      return node;\n    }\n\n    if (t.isIdentifier(node, {\n      name: \"arguments\"\n    })) {\n      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n    }\n\n    let helperName;\n    const args = [node];\n\n    if (i === true) {\n      helperName = \"toConsumableArray\";\n    } else if (i) {\n      args.push(t.numericLiteral(i));\n      helperName = \"slicedToArray\";\n    } else {\n      helperName = \"toArray\";\n    }\n\n    if (allowArrayLike) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    return t.callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n\n      for (const declar of declarations) {\n        this.registerBinding(path.node.kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const specifiers = path.get(\"specifiers\");\n\n      for (const specifier of specifiers) {\n        this.registerBinding(\"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      const declar = path.get(\"declaration\");\n\n      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path) {\n    const ids = path.getBindingIdentifiers();\n\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(kind, path, bindingPath = path) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators = path.get(\"declarations\");\n\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          if (local.identifier === id) continue;\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new _binding.default({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name) {\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasGlobal(name) {\n    let scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasReference(name) {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node, constantsOnly) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (t.isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n\n      return this.isPure(node.body, constantsOnly);\n    } else if (t.isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isBinary(node)) {\n      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n    } else if (t.isArrayExpression(node)) {\n      for (const elem of node.elements) {\n        if (!this.isPure(elem, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isObjectExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.kind === \"get\" || node.kind === \"set\") return false;\n      return true;\n    } else if (t.isProperty(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      return this.isPure(node.value, constantsOnly);\n    } else if (t.isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (t.isTaggedTemplateExpression(node)) {\n      return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n    } else if (t.isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n\n      return true;\n    } else {\n      return t.isPureish(node);\n    }\n  }\n\n  setData(key, val) {\n    return this.data[key] = val;\n  }\n\n  getData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while (scope = scope.parent);\n  }\n\n  removeData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while (scope = scope.parent);\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    if (path.isFunction()) {\n      if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n        this.registerBinding(\"local\", path.get(\"id\"), path);\n      }\n\n      const params = path.get(\"params\");\n\n      for (const param of params) {\n        this.registerBinding(\"param\", param);\n      }\n    }\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n    const state = {\n      references: [],\n      constantViolations: [],\n      assignments: []\n    };\n    this.crawling = true;\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    for (const path of state.assignments) {\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      path.scope.registerConstantViolation(path);\n    }\n\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts) {\n    let path = this.path;\n\n    if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = t.variableDeclaration(kind, []);\n      declar._blockHoist = blockHoist;\n      [declarPath] = path.unshiftContainer(\"body\", [declar]);\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = t.variableDeclarator(opts.id, opts.init);\n    declarPath.node.declarations.push(declarator);\n    this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n  }\n\n  getProgramParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  getFunctionParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    return null;\n  }\n\n  getBlockParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n  }\n\n  getAllBindings() {\n    const ids = Object.create(null);\n    let scope = this;\n\n    do {\n      (0, _defaults.default)(ids, scope.bindings);\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  getAllBindingsOfKind() {\n    const ids = Object.create(null);\n\n    for (const kind of arguments) {\n      let scope = this;\n\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name, node) {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name) {\n    let scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n\n      if (binding) {\n        if (previousPath && previousPath.isPattern() && previousPath.parentPath.isFunction() && binding.kind !== \"param\") {} else {\n          return binding;\n        }\n      }\n\n      previousPath = scope.path;\n    } while (scope = scope.parent);\n  }\n\n  getOwnBinding(name) {\n    return this.bindings[name];\n  }\n\n  getBindingIdentifier(name) {\n    var _this$getBinding;\n\n    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n  }\n\n  getOwnBindingIdentifier(name) {\n    const binding = this.bindings[name];\n    return binding == null ? void 0 : binding.identifier;\n  }\n\n  hasOwnBinding(name) {\n    return !!this.getOwnBinding(name);\n  }\n\n  hasBinding(name, noGlobals) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    if (this.parentHasBinding(name, noGlobals)) return true;\n    if (this.hasUid(name)) return true;\n    if (!noGlobals && (0, _includes.default)(Scope.globals, name)) return true;\n    if (!noGlobals && (0, _includes.default)(Scope.contextVariables, name)) return true;\n    return false;\n  }\n\n  parentHasBinding(name, noGlobals) {\n    var _this$parent;\n\n    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n  }\n\n  moveBindingTo(name, scope) {\n    const info = this.getBinding(name);\n\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name) {\n    var _this$getBinding2;\n\n    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while (scope = scope.parent);\n  }\n\n}\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.default.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/traverse/lib/scope/index.js"],"names":["Object","defineProperty","exports","value","default","_includes","_interopRequireDefault","require","_repeat","_renamer","_index","_defaults","_binding","_globals","t","_interopRequireWildcard","_cache","_getRequireWildcardCache","WeakMap","cache","obj","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","gatherNodeParts","node","parts","type","isModuleDeclaration","source","specifiers","length","e","declaration","isModuleSpecifier","local","isLiteral","push","object","property","name","callee","properties","argument","left","id","expression","meta","openingElement","openingFragment","namespace","collectorVisitor","For","path","FOR_INIT_KEYS","declar","isVar","parentScope","scope","getFunctionParent","getProgramParent","registerBinding","Declaration","isBlockScoped","isExportDeclaration","isDeclaration","parent","registerDeclaration","ReferencedIdentifier","state","references","ForXStatement","isPattern","isIdentifier","constantViolations","ExportDeclaration","exit","isClassDeclaration","isFunctionDeclaration","binding","getBinding","reference","isVariableDeclaration","decl","declarations","keys","getBindingIdentifiers","LabeledStatement","addGlobal","getBlockParent","AssignmentExpression","assignments","UpdateExpression","UnaryExpression","operator","BlockScoped","bindings","Block","paths","bodyPath","CatchClause","Function","isFunctionExpression","NOT_LOCAL_BINDING","params","param","ClassExpression","uid","Scope","constructor","cached","block","labels","Map","inited","findParent","p","isScope","parentBlock","hub","traverse","opts","generateDeclaredUidIdentifier","generateUidIdentifier","cloneNode","identifier","generateUid","toIdentifier","replace","i","_generateUid","hasLabel","hasBinding","hasGlobal","hasReference","program","uids","generateUidBasedOnNode","defaultName","join","slice","generateUidIdentifierBasedOnNode","isStatic","isThisExpression","isSuper","constant","maybeGenerateMemoised","dontPush","checkBlockScopedCollisions","kind","duplicate","buildError","TypeError","rename","oldName","newName","_renameFromMap","map","dump","sep","console","log","violations","toArray","allowArrayLike","isGenericType","isArrayExpression","callExpression","memberExpression","helperName","args","numericLiteral","unshift","addHelper","getLabel","registerLabel","label","isLabeledStatement","isImportDeclaration","specifier","buildUndefinedNode","unaryExpression","registerConstantViolation","ids","reassign","bindingPath","ReferenceError","declarators","getOuterBindingIdentifiers","getOwnBinding","globals","hasUid","isPure","constantsOnly","isClass","superClass","body","isClassBody","method","isBinary","right","elem","elements","isObjectExpression","prop","isMethod","computed","isProperty","isUnaryExpression","isTaggedTemplateExpression","matchesPattern","tag","quasi","isTemplateLiteral","expressions","isPureish","setData","val","data","getData","removeData","init","crawl","create","isFunction","programParent","crawling","ref","isBlockStatement","isProgram","isSwitchStatement","isLoop","isCatchClause","ensureBlock","unique","blockHoist","_blockHoist","dataKey","declarPath","variableDeclaration","unshiftContainer","declarator","variableDeclarator","pop","Error","isFunctionParent","isBlockParent","getAllBindings","getAllBindingsOfKind","arguments","bindingIdentifierEquals","getBindingIdentifier","previousPath","parentPath","_this$getBinding","getOwnBindingIdentifier","hasOwnBinding","noGlobals","parentHasBinding","contextVariables","_this$parent","moveBindingTo","info","removeOwnBinding","removeBinding","_this$getBinding2","builtin"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _includes = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _repeat = _interopRequireDefault(require(\"lodash/repeat\"));\n\nvar _renamer = _interopRequireDefault(require(\"./lib/renamer\"));\n\nvar _index = _interopRequireDefault(require(\"../index\"));\n\nvar _defaults = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _binding = _interopRequireDefault(require(\"./binding\"));\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar t = _interopRequireWildcard(require(\"@babel/types\"));\n\nvar _cache = require(\"../cache\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if (node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if (node.specifiers && node.specifiers.length) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nconst collectorVisitor = {\n  For(path) {\n    for (const key of t.FOR_INIT_KEYS) {\n      const declar = path.get(key);\n\n      if (declar.isVar()) {\n        const parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        parentScope.registerBinding(\"var\", declar);\n      }\n    }\n  },\n\n  Declaration(path) {\n    if (path.isBlockScoped()) return;\n\n    if (path.isExportDeclaration() && path.get(\"declaration\").isDeclaration()) {\n      return;\n    }\n\n    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const {\n        node,\n        scope\n      } = path;\n      const declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n        const binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(t.getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            if (binding) binding.reference(path);\n          }\n        }\n      }\n    }\n\n  },\n\n  LabeledStatement(path) {\n    path.scope.getProgramParent().addGlobal(path.node);\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  Block(path) {\n    const paths = path.get(\"body\");\n\n    for (const bodyPath of paths) {\n      if (bodyPath.isFunctionDeclaration()) {\n        path.scope.getBlockParent().registerDeclaration(bodyPath);\n      }\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    const params = path.get(\"params\");\n\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n  },\n\n  ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n\n};\nlet uid = 0;\n\nclass Scope {\n  constructor(path) {\n    const {\n      node\n    } = path;\n\n    const cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  get parent() {\n    const parent = this.path.findParent(p => p.isScope());\n    return parent == null ? void 0 : parent.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse(node, opts, state) {\n    (0, _index.default)(node, opts, this, state, this.path);\n  }\n\n  generateDeclaredUidIdentifier(name) {\n    const id = this.generateUidIdentifier(name);\n    this.push({\n      id\n    });\n    return t.cloneNode(id);\n  }\n\n  generateUidIdentifier(name) {\n    return t.identifier(this.generateUid(name));\n  }\n\n  generateUid(name = \"temp\") {\n    name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n    let uid;\n    let i = 0;\n\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n    return uid;\n  }\n\n  _generateUid(name, i) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node, defaultName) {\n    const parts = [];\n    gatherNodeParts(node, parts);\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  generateUidIdentifierBasedOnNode(node, defaultName) {\n    return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  isStatic(node) {\n    if (t.isThisExpression(node) || t.isSuper(node)) {\n      return true;\n    }\n\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  maybeGenerateMemoised(node, dontPush) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n\n      if (!dontPush) {\n        this.push({\n          id\n        });\n        return t.cloneNode(id);\n      }\n\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(local, kind, name, id) {\n    if (kind === \"param\") return;\n    if (local.kind === \"local\") return;\n    const duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\n    }\n  }\n\n  rename(oldName, newName, block) {\n    const binding = this.getBinding(oldName);\n\n    if (binding) {\n      newName = newName || this.generateUidIdentifier(oldName).name;\n      return new _renamer.default(binding, oldName, newName).rename(block);\n    }\n  }\n\n  _renameFromMap(map, oldName, newName, value) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = (0, _repeat.default)(\"-\", 60);\n    console.log(sep);\n    let scope = this;\n\n    do {\n      console.log(\"#\", scope.block.type);\n\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind\n        });\n      }\n    } while (scope = scope.parent);\n\n    console.log(sep);\n  }\n\n  toArray(node, i, allowArrayLike) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if ((binding == null ? void 0 : binding.constant) && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (t.isArrayExpression(node)) {\n      return node;\n    }\n\n    if (t.isIdentifier(node, {\n      name: \"arguments\"\n    })) {\n      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n    }\n\n    let helperName;\n    const args = [node];\n\n    if (i === true) {\n      helperName = \"toConsumableArray\";\n    } else if (i) {\n      args.push(t.numericLiteral(i));\n      helperName = \"slicedToArray\";\n    } else {\n      helperName = \"toArray\";\n    }\n\n    if (allowArrayLike) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    return t.callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n\n      for (const declar of declarations) {\n        this.registerBinding(path.node.kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const specifiers = path.get(\"specifiers\");\n\n      for (const specifier of specifiers) {\n        this.registerBinding(\"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      const declar = path.get(\"declaration\");\n\n      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path) {\n    const ids = path.getBindingIdentifiers();\n\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(kind, path, bindingPath = path) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators = path.get(\"declarations\");\n\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          if (local.identifier === id) continue;\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new _binding.default({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name) {\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasGlobal(name) {\n    let scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasReference(name) {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node, constantsOnly) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (t.isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n\n      return this.isPure(node.body, constantsOnly);\n    } else if (t.isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isBinary(node)) {\n      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n    } else if (t.isArrayExpression(node)) {\n      for (const elem of node.elements) {\n        if (!this.isPure(elem, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isObjectExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.kind === \"get\" || node.kind === \"set\") return false;\n      return true;\n    } else if (t.isProperty(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      return this.isPure(node.value, constantsOnly);\n    } else if (t.isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (t.isTaggedTemplateExpression(node)) {\n      return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n    } else if (t.isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n\n      return true;\n    } else {\n      return t.isPureish(node);\n    }\n  }\n\n  setData(key, val) {\n    return this.data[key] = val;\n  }\n\n  getData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while (scope = scope.parent);\n  }\n\n  removeData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while (scope = scope.parent);\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    if (path.isFunction()) {\n      if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n        this.registerBinding(\"local\", path.get(\"id\"), path);\n      }\n\n      const params = path.get(\"params\");\n\n      for (const param of params) {\n        this.registerBinding(\"param\", param);\n      }\n    }\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n    const state = {\n      references: [],\n      constantViolations: [],\n      assignments: []\n    };\n    this.crawling = true;\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    for (const path of state.assignments) {\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      path.scope.registerConstantViolation(path);\n    }\n\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts) {\n    let path = this.path;\n\n    if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = t.variableDeclaration(kind, []);\n      declar._blockHoist = blockHoist;\n      [declarPath] = path.unshiftContainer(\"body\", [declar]);\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = t.variableDeclarator(opts.id, opts.init);\n    declarPath.node.declarations.push(declarator);\n    this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n  }\n\n  getProgramParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  getFunctionParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    return null;\n  }\n\n  getBlockParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n  }\n\n  getAllBindings() {\n    const ids = Object.create(null);\n    let scope = this;\n\n    do {\n      (0, _defaults.default)(ids, scope.bindings);\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  getAllBindingsOfKind() {\n    const ids = Object.create(null);\n\n    for (const kind of arguments) {\n      let scope = this;\n\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name, node) {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name) {\n    let scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n\n      if (binding) {\n        if (previousPath && previousPath.isPattern() && previousPath.parentPath.isFunction() && binding.kind !== \"param\") {} else {\n          return binding;\n        }\n      }\n\n      previousPath = scope.path;\n    } while (scope = scope.parent);\n  }\n\n  getOwnBinding(name) {\n    return this.bindings[name];\n  }\n\n  getBindingIdentifier(name) {\n    var _this$getBinding;\n\n    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n  }\n\n  getOwnBindingIdentifier(name) {\n    const binding = this.bindings[name];\n    return binding == null ? void 0 : binding.identifier;\n  }\n\n  hasOwnBinding(name) {\n    return !!this.getOwnBinding(name);\n  }\n\n  hasBinding(name, noGlobals) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    if (this.parentHasBinding(name, noGlobals)) return true;\n    if (this.hasUid(name)) return true;\n    if (!noGlobals && (0, _includes.default)(Scope.globals, name)) return true;\n    if (!noGlobals && (0, _includes.default)(Scope.contextVariables, name)) return true;\n    return false;\n  }\n\n  parentHasBinding(name, noGlobals) {\n    var _this$parent;\n\n    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n  }\n\n  moveBindingTo(name, scope) {\n    const info = this.getBinding(name);\n\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name) {\n    var _this$getBinding2;\n\n    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while (scope = scope.parent);\n  }\n\n}\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.default.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];"]},"metadata":{},"sourceType":"script"}