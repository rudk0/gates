{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst {\n  rollup\n} = require('rollup');\n\nconst {\n  terser\n} = require('rollup-plugin-terser');\n\nconst {\n  writeFile\n} = require('fs-extra');\n\nconst babel = require('rollup-plugin-babel');\n\nconst omt = require('@surma/rollup-plugin-off-main-thread');\n\nconst upath = require('upath');\n\nconst presetEnv = require('@babel/preset-env');\n\nconst replace = require('@rollup/plugin-replace');\n\nconst resolve = require('@rollup/plugin-node-resolve');\n\nconst tempy = require('tempy');\n\nmodule.exports = async ({\n  babelPresetEnvTargets,\n  inlineWorkboxRuntime,\n  mode,\n  sourcemap,\n  swDest,\n  unbundledCode\n}) => {\n  // We need to write this to the \"real\" file system, as Rollup won't read from\n  // a custom file system.\n  const {\n    dir,\n    base\n  } = upath.parse(swDest);\n  const temporaryFile = tempy.file({\n    name: base\n  });\n  await writeFile(temporaryFile, unbundledCode);\n  const plugins = [resolve(), replace({\n    'process.env.NODE_ENV': JSON.stringify(mode)\n  }), babel({\n    // Disable the logic that checks for local Babel config files:\n    // https://github.com/GoogleChrome/workbox/issues/2111\n    babelrc: false,\n    configFile: false,\n    presets: [[presetEnv, {\n      targets: {\n        browsers: babelPresetEnvTargets\n      },\n      loose: true\n    }]]\n  })];\n\n  if (mode === 'production') {\n    plugins.push(terser({\n      mangle: {\n        toplevel: true,\n        properties: {\n          regex: /(^_|_$)/\n        }\n      }\n    }));\n  }\n\n  const rollupConfig = {\n    plugins,\n    input: temporaryFile\n  }; // Rollup will inline the runtime by default. If we don't want that, we need\n  // to add in some additional config.\n\n  if (!inlineWorkboxRuntime) {\n    rollupConfig.plugins.unshift(omt());\n\n    rollupConfig.manualChunks = id => {\n      return id.includes('workbox') ? 'workbox' : undefined;\n    };\n  }\n\n  const bundle = await rollup(rollupConfig);\n  const {\n    output\n  } = await bundle.generate({\n    sourcemap,\n    // Using an external Workbox runtime requires 'amd'.\n    format: inlineWorkboxRuntime ? 'es' : 'amd'\n  });\n  const files = [];\n\n  for (const chunkOrAsset of output) {\n    if (chunkOrAsset.isAsset) {\n      files.push({\n        name: chunkOrAsset.fileName,\n        contents: chunkOrAsset.source\n      });\n    } else {\n      let code = chunkOrAsset.code;\n\n      if (chunkOrAsset.map) {\n        const sourceMapFile = chunkOrAsset.fileName + '.map';\n        code += `//# sourceMappingURL=${sourceMapFile}\\n`;\n        files.push({\n          name: sourceMapFile,\n          contents: chunkOrAsset.map.toString()\n        });\n      }\n\n      files.push({\n        name: chunkOrAsset.fileName,\n        contents: code\n      });\n    }\n  } // Make sure that if there was a directory portion included in swDest, it's\n  // preprended to all of the generated files.\n\n\n  return files.map(file => {\n    file.name = upath.format({\n      dir,\n      base: file.name\n    });\n    return file;\n  });\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/bundle.js"],"names":["rollup","require","terser","writeFile","babel","omt","upath","presetEnv","replace","resolve","tempy","module","exports","babelPresetEnvTargets","inlineWorkboxRuntime","mode","sourcemap","swDest","unbundledCode","dir","base","parse","temporaryFile","file","name","plugins","JSON","stringify","babelrc","configFile","presets","targets","browsers","loose","push","mangle","toplevel","properties","regex","rollupConfig","input","unshift","manualChunks","id","includes","undefined","bundle","output","generate","format","files","chunkOrAsset","isAsset","fileName","contents","source","code","map","sourceMapFile","toString"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAM;AACJA,EAAAA;AADI,IAEFC,OAAO,CAAC,QAAD,CAFX;;AAIA,MAAM;AACJC,EAAAA;AADI,IAEFD,OAAO,CAAC,sBAAD,CAFX;;AAIA,MAAM;AACJE,EAAAA;AADI,IAEFF,OAAO,CAAC,UAAD,CAFX;;AAIA,MAAMG,KAAK,GAAGH,OAAO,CAAC,qBAAD,CAArB;;AAEA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,sCAAD,CAAnB;;AAEA,MAAMK,KAAK,GAAGL,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMM,SAAS,GAAGN,OAAO,CAAC,mBAAD,CAAzB;;AAEA,MAAMO,OAAO,GAAGP,OAAO,CAAC,wBAAD,CAAvB;;AAEA,MAAMQ,OAAO,GAAGR,OAAO,CAAC,6BAAD,CAAvB;;AAEA,MAAMS,KAAK,GAAGT,OAAO,CAAC,OAAD,CAArB;;AAEAU,MAAM,CAACC,OAAP,GAAiB,OAAO;AACtBC,EAAAA,qBADsB;AAEtBC,EAAAA,oBAFsB;AAGtBC,EAAAA,IAHsB;AAItBC,EAAAA,SAJsB;AAKtBC,EAAAA,MALsB;AAMtBC,EAAAA;AANsB,CAAP,KAOX;AACJ;AACA;AACA,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA;AAFI,MAGFd,KAAK,CAACe,KAAN,CAAYJ,MAAZ,CAHJ;AAIA,QAAMK,aAAa,GAAGZ,KAAK,CAACa,IAAN,CAAW;AAC/BC,IAAAA,IAAI,EAAEJ;AADyB,GAAX,CAAtB;AAGA,QAAMjB,SAAS,CAACmB,aAAD,EAAgBJ,aAAhB,CAAf;AACA,QAAMO,OAAO,GAAG,CAAChB,OAAO,EAAR,EAAYD,OAAO,CAAC;AAClC,4BAAwBkB,IAAI,CAACC,SAAL,CAAeZ,IAAf;AADU,GAAD,CAAnB,EAEZX,KAAK,CAAC;AACR;AACA;AACAwB,IAAAA,OAAO,EAAE,KAHD;AAIRC,IAAAA,UAAU,EAAE,KAJJ;AAKRC,IAAAA,OAAO,EAAE,CAAC,CAACvB,SAAD,EAAY;AACpBwB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAEnB;AADH,OADW;AAIpBoB,MAAAA,KAAK,EAAE;AAJa,KAAZ,CAAD;AALD,GAAD,CAFO,CAAhB;;AAeA,MAAIlB,IAAI,KAAK,YAAb,EAA2B;AACzBU,IAAAA,OAAO,CAACS,IAAR,CAAahC,MAAM,CAAC;AAClBiC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE,IADJ;AAENC,QAAAA,UAAU,EAAE;AACVC,UAAAA,KAAK,EAAE;AADG;AAFN;AADU,KAAD,CAAnB;AAQD;;AAED,QAAMC,YAAY,GAAG;AACnBd,IAAAA,OADmB;AAEnBe,IAAAA,KAAK,EAAElB;AAFY,GAArB,CArCI,CAwCD;AACH;;AAEA,MAAI,CAACR,oBAAL,EAA2B;AACzByB,IAAAA,YAAY,CAACd,OAAb,CAAqBgB,OAArB,CAA6BpC,GAAG,EAAhC;;AAEAkC,IAAAA,YAAY,CAACG,YAAb,GAA4BC,EAAE,IAAI;AAChC,aAAOA,EAAE,CAACC,QAAH,CAAY,SAAZ,IAAyB,SAAzB,GAAqCC,SAA5C;AACD,KAFD;AAGD;;AAED,QAAMC,MAAM,GAAG,MAAM9C,MAAM,CAACuC,YAAD,CAA3B;AACA,QAAM;AACJQ,IAAAA;AADI,MAEF,MAAMD,MAAM,CAACE,QAAP,CAAgB;AACxBhC,IAAAA,SADwB;AAExB;AACAiC,IAAAA,MAAM,EAAEnC,oBAAoB,GAAG,IAAH,GAAU;AAHd,GAAhB,CAFV;AAOA,QAAMoC,KAAK,GAAG,EAAd;;AAEA,OAAK,MAAMC,YAAX,IAA2BJ,MAA3B,EAAmC;AACjC,QAAII,YAAY,CAACC,OAAjB,EAA0B;AACxBF,MAAAA,KAAK,CAAChB,IAAN,CAAW;AACTV,QAAAA,IAAI,EAAE2B,YAAY,CAACE,QADV;AAETC,QAAAA,QAAQ,EAAEH,YAAY,CAACI;AAFd,OAAX;AAID,KALD,MAKO;AACL,UAAIC,IAAI,GAAGL,YAAY,CAACK,IAAxB;;AAEA,UAAIL,YAAY,CAACM,GAAjB,EAAsB;AACpB,cAAMC,aAAa,GAAGP,YAAY,CAACE,QAAb,GAAwB,MAA9C;AACAG,QAAAA,IAAI,IAAK,wBAAuBE,aAAc,IAA9C;AACAR,QAAAA,KAAK,CAAChB,IAAN,CAAW;AACTV,UAAAA,IAAI,EAAEkC,aADG;AAETJ,UAAAA,QAAQ,EAAEH,YAAY,CAACM,GAAb,CAAiBE,QAAjB;AAFD,SAAX;AAID;;AAEDT,MAAAA,KAAK,CAAChB,IAAN,CAAW;AACTV,QAAAA,IAAI,EAAE2B,YAAY,CAACE,QADV;AAETC,QAAAA,QAAQ,EAAEE;AAFD,OAAX;AAID;AACF,GApFG,CAoFF;AACF;;;AAGA,SAAON,KAAK,CAACO,GAAN,CAAUlC,IAAI,IAAI;AACvBA,IAAAA,IAAI,CAACC,IAAL,GAAYlB,KAAK,CAAC2C,MAAN,CAAa;AACvB9B,MAAAA,GADuB;AAEvBC,MAAAA,IAAI,EAAEG,IAAI,CAACC;AAFY,KAAb,CAAZ;AAIA,WAAOD,IAAP;AACD,GANM,CAAP;AAOD,CAtGD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst {\n  rollup\n} = require('rollup');\n\nconst {\n  terser\n} = require('rollup-plugin-terser');\n\nconst {\n  writeFile\n} = require('fs-extra');\n\nconst babel = require('rollup-plugin-babel');\n\nconst omt = require('@surma/rollup-plugin-off-main-thread');\n\nconst upath = require('upath');\n\nconst presetEnv = require('@babel/preset-env');\n\nconst replace = require('@rollup/plugin-replace');\n\nconst resolve = require('@rollup/plugin-node-resolve');\n\nconst tempy = require('tempy');\n\nmodule.exports = async ({\n  babelPresetEnvTargets,\n  inlineWorkboxRuntime,\n  mode,\n  sourcemap,\n  swDest,\n  unbundledCode\n}) => {\n  // We need to write this to the \"real\" file system, as Rollup won't read from\n  // a custom file system.\n  const {\n    dir,\n    base\n  } = upath.parse(swDest);\n  const temporaryFile = tempy.file({\n    name: base\n  });\n  await writeFile(temporaryFile, unbundledCode);\n  const plugins = [resolve(), replace({\n    'process.env.NODE_ENV': JSON.stringify(mode)\n  }), babel({\n    // Disable the logic that checks for local Babel config files:\n    // https://github.com/GoogleChrome/workbox/issues/2111\n    babelrc: false,\n    configFile: false,\n    presets: [[presetEnv, {\n      targets: {\n        browsers: babelPresetEnvTargets\n      },\n      loose: true\n    }]]\n  })];\n\n  if (mode === 'production') {\n    plugins.push(terser({\n      mangle: {\n        toplevel: true,\n        properties: {\n          regex: /(^_|_$)/\n        }\n      }\n    }));\n  }\n\n  const rollupConfig = {\n    plugins,\n    input: temporaryFile\n  }; // Rollup will inline the runtime by default. If we don't want that, we need\n  // to add in some additional config.\n\n  if (!inlineWorkboxRuntime) {\n    rollupConfig.plugins.unshift(omt());\n\n    rollupConfig.manualChunks = id => {\n      return id.includes('workbox') ? 'workbox' : undefined;\n    };\n  }\n\n  const bundle = await rollup(rollupConfig);\n  const {\n    output\n  } = await bundle.generate({\n    sourcemap,\n    // Using an external Workbox runtime requires 'amd'.\n    format: inlineWorkboxRuntime ? 'es' : 'amd'\n  });\n  const files = [];\n\n  for (const chunkOrAsset of output) {\n    if (chunkOrAsset.isAsset) {\n      files.push({\n        name: chunkOrAsset.fileName,\n        contents: chunkOrAsset.source\n      });\n    } else {\n      let code = chunkOrAsset.code;\n\n      if (chunkOrAsset.map) {\n        const sourceMapFile = chunkOrAsset.fileName + '.map';\n        code += `//# sourceMappingURL=${sourceMapFile}\\n`;\n        files.push({\n          name: sourceMapFile,\n          contents: chunkOrAsset.map.toString()\n        });\n      }\n\n      files.push({\n        name: chunkOrAsset.fileName,\n        contents: code\n      });\n    }\n  } // Make sure that if there was a directory portion included in swDest, it's\n  // preprended to all of the generated files.\n\n\n  return files.map(file => {\n    file.name = upath.format({\n      dir,\n      base: file.name\n    });\n    return file;\n  });\n};"]},"metadata":{},"sourceType":"script"}