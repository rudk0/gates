{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  function statementList(key, path) {\n    const paths = path.get(key);\n\n    for (const path of paths) {\n      const func = path.node;\n      if (!path.isFunctionDeclaration()) continue;\n\n      const declar = _core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(func.id, _core.types.toExpression(func))]);\n\n      declar._blockHoist = 2;\n      func.id = null;\n      path.replaceWith(declar);\n    }\n  }\n\n  return {\n    name: \"transform-block-scoped-functions\",\n    visitor: {\n      BlockStatement(path) {\n        const {\n          node,\n          parent\n        } = path;\n\n        if (_core.types.isFunction(parent, {\n          body: node\n        }) || _core.types.isExportDeclaration(parent)) {\n          return;\n        }\n\n        statementList(\"body\", path);\n      },\n\n      SwitchCase(path) {\n        statementList(\"consequent\", path);\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-block-scoped-functions/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_core","_default","declare","api","assertVersion","statementList","key","path","paths","get","func","node","isFunctionDeclaration","declar","types","variableDeclaration","variableDeclarator","id","toExpression","_blockHoist","replaceWith","name","visitor","BlockStatement","parent","isFunction","body","isExportDeclaration","SwitchCase"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGH,kBAAkB,CAACI,OAAvB,EAAgCC,GAAG,IAAI;AACpDA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,CAAlB;;AAEA,WAASC,aAAT,CAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChC,UAAMC,KAAK,GAAGD,IAAI,CAACE,GAAL,CAASH,GAAT,CAAd;;AAEA,SAAK,MAAMC,IAAX,IAAmBC,KAAnB,EAA0B;AACxB,YAAME,IAAI,GAAGH,IAAI,CAACI,IAAlB;AACA,UAAI,CAACJ,IAAI,CAACK,qBAAL,EAAL,EAAmC;;AAEnC,YAAMC,MAAM,GAAGb,KAAK,CAACc,KAAN,CAAYC,mBAAZ,CAAgC,KAAhC,EAAuC,CAACf,KAAK,CAACc,KAAN,CAAYE,kBAAZ,CAA+BN,IAAI,CAACO,EAApC,EAAwCjB,KAAK,CAACc,KAAN,CAAYI,YAAZ,CAAyBR,IAAzB,CAAxC,CAAD,CAAvC,CAAf;;AAEAG,MAAAA,MAAM,CAACM,WAAP,GAAqB,CAArB;AACAT,MAAAA,IAAI,CAACO,EAAL,GAAU,IAAV;AACAV,MAAAA,IAAI,CAACa,WAAL,CAAiBP,MAAjB;AACD;AACF;;AAED,SAAO;AACLQ,IAAAA,IAAI,EAAE,kCADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,cAAc,CAAChB,IAAD,EAAO;AACnB,cAAM;AACJI,UAAAA,IADI;AAEJa,UAAAA;AAFI,YAGFjB,IAHJ;;AAKA,YAAIP,KAAK,CAACc,KAAN,CAAYW,UAAZ,CAAuBD,MAAvB,EAA+B;AACjCE,UAAAA,IAAI,EAAEf;AAD2B,SAA/B,KAEEX,KAAK,CAACc,KAAN,CAAYa,mBAAZ,CAAgCH,MAAhC,CAFN,EAE+C;AAC7C;AACD;;AAEDnB,QAAAA,aAAa,CAAC,MAAD,EAASE,IAAT,CAAb;AACD,OAdM;;AAgBPqB,MAAAA,UAAU,CAACrB,IAAD,EAAO;AACfF,QAAAA,aAAa,CAAC,YAAD,EAAeE,IAAf,CAAb;AACD;;AAlBM;AAFJ,GAAP;AAwBD,CA1Cc,CAAf;;AA4CAZ,OAAO,CAACE,OAAR,GAAkBI,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n\n  function statementList(key, path) {\n    const paths = path.get(key);\n\n    for (const path of paths) {\n      const func = path.node;\n      if (!path.isFunctionDeclaration()) continue;\n\n      const declar = _core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(func.id, _core.types.toExpression(func))]);\n\n      declar._blockHoist = 2;\n      func.id = null;\n      path.replaceWith(declar);\n    }\n  }\n\n  return {\n    name: \"transform-block-scoped-functions\",\n    visitor: {\n      BlockStatement(path) {\n        const {\n          node,\n          parent\n        } = path;\n\n        if (_core.types.isFunction(parent, {\n          body: node\n        }) || _core.types.isExportDeclaration(parent)) {\n          return;\n        }\n\n        statementList(\"body\", path);\n      },\n\n      SwitchCase(path) {\n        statementList(\"consequent\", path);\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}