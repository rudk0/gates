{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visitor = void 0;\n\nvar _core = require(\"@babel/core\");\n\nfunction getTDZStatus(refPath, bindingPath) {\n  const executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);\n\n  if (executionStatus === \"before\") {\n    return \"outside\";\n  } else if (executionStatus === \"after\") {\n    return \"inside\";\n  } else {\n    return \"maybe\";\n  }\n}\n\nfunction buildTDZAssert(node, state) {\n  return _core.types.callExpression(state.addHelper(\"temporalRef\"), [node, _core.types.stringLiteral(node.name)]);\n}\n\nfunction isReference(node, scope, state) {\n  const declared = state.letReferences[node.name];\n  if (!declared) return false;\n  return scope.getBindingIdentifier(node.name) === declared;\n}\n\nconst visitor = {\n  ReferencedIdentifier(path, state) {\n    if (!state.tdzEnabled) return;\n    const {\n      node,\n      parent,\n      scope\n    } = path;\n    if (path.parentPath.isFor({\n      left: node\n    })) return;\n    if (!isReference(node, scope, state)) return;\n    const bindingPath = scope.getBinding(node.name).path;\n    if (bindingPath.isFunctionDeclaration()) return;\n    const status = getTDZStatus(path, bindingPath);\n    if (status === \"outside\") return;\n\n    if (status === \"maybe\") {\n      const assert = buildTDZAssert(node, state);\n      bindingPath.parent._tdzThis = true;\n      path.skip();\n\n      if (path.parentPath.isUpdateExpression()) {\n        if (parent._ignoreBlockScopingTDZ) return;\n        path.parentPath.replaceWith(_core.types.sequenceExpression([assert, parent]));\n      } else {\n        path.replaceWith(assert);\n      }\n    } else if (status === \"inside\") {\n      path.replaceWith(_core.template.ast`${state.addHelper(\"tdz\")}(\"${node.name}\")`);\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path, state) {\n      if (!state.tdzEnabled) return;\n      const {\n        node\n      } = path;\n      if (node._ignoreBlockScopingTDZ) return;\n      const nodes = [];\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        const id = ids[name];\n\n        if (isReference(id, path.scope, state)) {\n          nodes.push(id);\n        }\n      }\n\n      if (nodes.length) {\n        node._ignoreBlockScopingTDZ = true;\n        nodes.push(node);\n        path.replaceWithMultiple(nodes.map(n => _core.types.expressionStatement(n)));\n      }\n    }\n\n  }\n};\nexports.visitor = visitor;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-block-scoping/lib/tdz.js"],"names":["Object","defineProperty","exports","value","visitor","_core","require","getTDZStatus","refPath","bindingPath","executionStatus","_guessExecutionStatusRelativeTo","buildTDZAssert","node","state","types","callExpression","addHelper","stringLiteral","name","isReference","scope","declared","letReferences","getBindingIdentifier","ReferencedIdentifier","path","tdzEnabled","parent","parentPath","isFor","left","getBinding","isFunctionDeclaration","status","assert","_tdzThis","skip","isUpdateExpression","_ignoreBlockScopingTDZ","replaceWith","sequenceExpression","template","ast","AssignmentExpression","exit","nodes","ids","getBindingIdentifiers","keys","id","push","length","replaceWithMultiple","map","n","expressionStatement"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visitor = void 0;\n\nvar _core = require(\"@babel/core\");\n\nfunction getTDZStatus(refPath, bindingPath) {\n  const executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);\n\n  if (executionStatus === \"before\") {\n    return \"outside\";\n  } else if (executionStatus === \"after\") {\n    return \"inside\";\n  } else {\n    return \"maybe\";\n  }\n}\n\nfunction buildTDZAssert(node, state) {\n  return _core.types.callExpression(state.addHelper(\"temporalRef\"), [node, _core.types.stringLiteral(node.name)]);\n}\n\nfunction isReference(node, scope, state) {\n  const declared = state.letReferences[node.name];\n  if (!declared) return false;\n  return scope.getBindingIdentifier(node.name) === declared;\n}\n\nconst visitor = {\n  ReferencedIdentifier(path, state) {\n    if (!state.tdzEnabled) return;\n    const {\n      node,\n      parent,\n      scope\n    } = path;\n    if (path.parentPath.isFor({\n      left: node\n    })) return;\n    if (!isReference(node, scope, state)) return;\n    const bindingPath = scope.getBinding(node.name).path;\n    if (bindingPath.isFunctionDeclaration()) return;\n    const status = getTDZStatus(path, bindingPath);\n    if (status === \"outside\") return;\n\n    if (status === \"maybe\") {\n      const assert = buildTDZAssert(node, state);\n      bindingPath.parent._tdzThis = true;\n      path.skip();\n\n      if (path.parentPath.isUpdateExpression()) {\n        if (parent._ignoreBlockScopingTDZ) return;\n        path.parentPath.replaceWith(_core.types.sequenceExpression([assert, parent]));\n      } else {\n        path.replaceWith(assert);\n      }\n    } else if (status === \"inside\") {\n      path.replaceWith(_core.template.ast`${state.addHelper(\"tdz\")}(\"${node.name}\")`);\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path, state) {\n      if (!state.tdzEnabled) return;\n      const {\n        node\n      } = path;\n      if (node._ignoreBlockScopingTDZ) return;\n      const nodes = [];\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        const id = ids[name];\n\n        if (isReference(id, path.scope, state)) {\n          nodes.push(id);\n        }\n      }\n\n      if (nodes.length) {\n        node._ignoreBlockScopingTDZ = true;\n        nodes.push(node);\n        path.replaceWithMultiple(nodes.map(n => _core.types.expressionStatement(n)));\n      }\n    }\n\n  }\n};\nexports.visitor = visitor;"]},"metadata":{},"sourceType":"script"}