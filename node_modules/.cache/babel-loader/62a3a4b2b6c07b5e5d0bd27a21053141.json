{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst path = require('path');\n\nconst cdnUtils = require('../lib/cdn-utils');\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\n\nconst generateSWSchema = require('./options/generate-sw-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst validate = require('./options/validate');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('../lib/write-sw-using-default-template');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSW(_x) {\n  return _generateSW.apply(this, arguments);\n}\n\nfunction _generateSW() {\n  _generateSW = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, generateSWSchema);\n    const destDirectory = path.dirname(options.swDest); // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n\n    if (options.importWorkboxFrom === 'cdn') {\n      const cdnURL = cdnUtils.getModuleURL('workbox-sw');\n      options.workboxSWImport = cdnURL;\n    } else if (options.importWorkboxFrom === 'local') {\n      // Copy over the dev + prod version of all of the core libraries.\n      const workboxDirectoryName = yield copyWorkboxLibraries(destDirectory); // The Workbox library files should not be precached, since they're cached\n      // automatically by virtue of being used with importScripts().\n\n      options.globIgnores = [`**/${workboxDirectoryName}/*.+(js|mjs)*`].concat(options.globIgnores || []);\n\n      const workboxSWPkg = require(`workbox-sw/package.json`);\n\n      const workboxSWFilename = path.basename(workboxSWPkg.main);\n      options.workboxSWImport = `${workboxDirectoryName}/${workboxSWFilename}`;\n      options.modulePathPrefix = workboxDirectoryName;\n    }\n\n    const _ref = yield getFileManifestEntries(options),\n          count = _ref.count,\n          size = _ref.size,\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    yield writeServiceWorkerUsingDefaultTemplate(Object.assign({\n      manifestEntries\n    }, options)); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      count,\n      size,\n      warnings\n    };\n  });\n  return _generateSW.apply(this, arguments);\n}\n\nmodule.exports = generateSW;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/entry-points/generate-sw.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","path","cdnUtils","checkForDeprecatedOptions","copyWorkboxLibraries","generateSWSchema","getFileManifestEntries","validate","writeServiceWorkerUsingDefaultTemplate","generateSW","_x","_generateSW","apply","arguments","default","config","deprecationWarnings","options","destDirectory","dirname","swDest","importWorkboxFrom","cdnURL","getModuleURL","workboxSWImport","workboxDirectoryName","globIgnores","concat","workboxSWPkg","workboxSWFilename","basename","main","modulePathPrefix","_ref","count","size","manifestEntries","warnings","Object","assign","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,kBAAkB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;AAEA;;;;;;;;;AAOA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,kBAAD,CAAxB;;AAEA,MAAMI,yBAAyB,GAAGJ,OAAO,CAAC,qCAAD,CAAzC;;AAEA,MAAMK,oBAAoB,GAAGL,OAAO,CAAC,+BAAD,CAApC;;AAEA,MAAMM,gBAAgB,GAAGN,OAAO,CAAC,8BAAD,CAAhC;;AAEA,MAAMO,sBAAsB,GAAGP,OAAO,CAAC,kCAAD,CAAtC;;AAEA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,oBAAD,CAAxB;;AAEA,MAAMS,sCAAsC,GAAGT,OAAO,CAAC,wCAAD,CAAtD;AACA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASU,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAOC,WAAW,CAACC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;AACD;;AAED,SAASF,WAAT,GAAuB;AACrBA,EAAAA,WAAW,GAAG,CAAC,GAAGX,kBAAkB,CAACc,OAAvB,EAAgC,WAAWC,MAAX,EAAmB;AAC/D;AACA;AACA,UAAMC,mBAAmB,GAAGb,yBAAyB,CAACY,MAAD,CAArD;AACA,UAAME,OAAO,GAAGV,QAAQ,CAACQ,MAAD,EAASV,gBAAT,CAAxB;AACA,UAAMa,aAAa,GAAGjB,IAAI,CAACkB,OAAL,CAAaF,OAAO,CAACG,MAArB,CAAtB,CAL+D,CAKX;;AAEpD,QAAIH,OAAO,CAACI,iBAAR,KAA8B,KAAlC,EAAyC;AACvC,YAAMC,MAAM,GAAGpB,QAAQ,CAACqB,YAAT,CAAsB,YAAtB,CAAf;AACAN,MAAAA,OAAO,CAACO,eAAR,GAA0BF,MAA1B;AACD,KAHD,MAGO,IAAIL,OAAO,CAACI,iBAAR,KAA8B,OAAlC,EAA2C;AAChD;AACA,YAAMI,oBAAoB,GAAG,MAAMrB,oBAAoB,CAACc,aAAD,CAAvD,CAFgD,CAEwB;AACxE;;AAEAD,MAAAA,OAAO,CAACS,WAAR,GAAsB,CAAE,MAAKD,oBAAqB,eAA5B,EAA4CE,MAA5C,CAAmDV,OAAO,CAACS,WAAR,IAAuB,EAA1E,CAAtB;;AAEA,YAAME,YAAY,GAAG7B,OAAO,CAAE,yBAAF,CAA5B;;AAEA,YAAM8B,iBAAiB,GAAG5B,IAAI,CAAC6B,QAAL,CAAcF,YAAY,CAACG,IAA3B,CAA1B;AACAd,MAAAA,OAAO,CAACO,eAAR,GAA2B,GAAEC,oBAAqB,IAAGI,iBAAkB,EAAvE;AACAZ,MAAAA,OAAO,CAACe,gBAAR,GAA2BP,oBAA3B;AACD;;AAED,UAAMQ,IAAI,GAAG,MAAM3B,sBAAsB,CAACW,OAAD,CAAzC;AAAA,UACMiB,KAAK,GAAGD,IAAI,CAACC,KADnB;AAAA,UAEMC,IAAI,GAAGF,IAAI,CAACE,IAFlB;AAAA,UAGMC,eAAe,GAAGH,IAAI,CAACG,eAH7B;AAAA,UAIMC,QAAQ,GAAGJ,IAAI,CAACI,QAJtB;;AAMA,UAAM7B,sCAAsC,CAAC8B,MAAM,CAACC,MAAP,CAAc;AACzDH,MAAAA;AADyD,KAAd,EAE1CnB,OAF0C,CAAD,CAA5C,CA9B+D,CAgCjD;;AAEdoB,IAAAA,QAAQ,CAACG,IAAT,CAAc,GAAGxB,mBAAjB;AACA,WAAO;AACLkB,MAAAA,KADK;AAELC,MAAAA,IAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD,GAxCa,CAAd;AAyCA,SAAO1B,WAAW,CAACC,KAAZ,CAAkB,IAAlB,EAAwBC,SAAxB,CAAP;AACD;;AAED4B,MAAM,CAACC,OAAP,GAAiBjC,UAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst path = require('path');\n\nconst cdnUtils = require('../lib/cdn-utils');\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\n\nconst generateSWSchema = require('./options/generate-sw-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst validate = require('./options/validate');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('../lib/write-sw-using-default-template');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSW(_x) {\n  return _generateSW.apply(this, arguments);\n}\n\nfunction _generateSW() {\n  _generateSW = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, generateSWSchema);\n    const destDirectory = path.dirname(options.swDest); // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n\n    if (options.importWorkboxFrom === 'cdn') {\n      const cdnURL = cdnUtils.getModuleURL('workbox-sw');\n      options.workboxSWImport = cdnURL;\n    } else if (options.importWorkboxFrom === 'local') {\n      // Copy over the dev + prod version of all of the core libraries.\n      const workboxDirectoryName = yield copyWorkboxLibraries(destDirectory); // The Workbox library files should not be precached, since they're cached\n      // automatically by virtue of being used with importScripts().\n\n      options.globIgnores = [`**/${workboxDirectoryName}/*.+(js|mjs)*`].concat(options.globIgnores || []);\n\n      const workboxSWPkg = require(`workbox-sw/package.json`);\n\n      const workboxSWFilename = path.basename(workboxSWPkg.main);\n      options.workboxSWImport = `${workboxDirectoryName}/${workboxSWFilename}`;\n      options.modulePathPrefix = workboxDirectoryName;\n    }\n\n    const _ref = yield getFileManifestEntries(options),\n          count = _ref.count,\n          size = _ref.size,\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    yield writeServiceWorkerUsingDefaultTemplate(Object.assign({\n      manifestEntries\n    }, options)); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      count,\n      size,\n      warnings\n    };\n  });\n  return _generateSW.apply(this, arguments);\n}\n\nmodule.exports = generateSW;"]},"metadata":{},"sourceType":"script"}