{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"transform-new-target\",\n    visitor: {\n      MetaProperty(path) {\n        const meta = path.get(\"meta\");\n        const property = path.get(\"property\");\n        const {\n          scope\n        } = path;\n\n        if (meta.isIdentifier({\n          name: \"new\"\n        }) && property.isIdentifier({\n          name: \"target\"\n        })) {\n          const func = path.findParent(path => {\n            if (path.isClass()) return true;\n\n            if (path.isFunction() && !path.isArrowFunctionExpression()) {\n              if (path.isClassMethod({\n                kind: \"constructor\"\n              })) {\n                return false;\n              }\n\n              return true;\n            }\n\n            return false;\n          });\n\n          if (!func) {\n            throw path.buildCodeFrameError(\"new.target must be under a (non-arrow) function or a class.\");\n          }\n\n          const {\n            node\n          } = func;\n\n          if (!node.id) {\n            if (func.isMethod()) {\n              path.replaceWith(scope.buildUndefinedNode());\n              return;\n            }\n\n            node.id = scope.generateUidIdentifier(\"target\");\n          }\n\n          const constructor = _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier(\"constructor\"));\n\n          if (func.isClass()) {\n            path.replaceWith(constructor);\n            return;\n          }\n\n          path.replaceWith(_core.types.conditionalExpression(_core.types.binaryExpression(\"instanceof\", _core.types.thisExpression(), _core.types.cloneNode(node.id)), constructor, scope.buildUndefinedNode()));\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-new-target/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_core","_default","declare","api","assertVersion","name","visitor","MetaProperty","path","meta","get","property","scope","isIdentifier","func","findParent","isClass","isFunction","isArrowFunctionExpression","isClassMethod","kind","buildCodeFrameError","node","id","isMethod","replaceWith","buildUndefinedNode","generateUidIdentifier","constructor","types","memberExpression","thisExpression","identifier","conditionalExpression","binaryExpression","cloneNode"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAAnB;;AAEA,IAAIE,QAAQ,GAAG,CAAC,GAAGH,kBAAkB,CAACI,OAAvB,EAAgCC,GAAG,IAAI;AACpDA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,CAAlB;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,sBADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,cAAMC,IAAI,GAAGD,IAAI,CAACE,GAAL,CAAS,MAAT,CAAb;AACA,cAAMC,QAAQ,GAAGH,IAAI,CAACE,GAAL,CAAS,UAAT,CAAjB;AACA,cAAM;AACJE,UAAAA;AADI,YAEFJ,IAFJ;;AAIA,YAAIC,IAAI,CAACI,YAAL,CAAkB;AACpBR,UAAAA,IAAI,EAAE;AADc,SAAlB,KAEEM,QAAQ,CAACE,YAAT,CAAsB;AAC1BR,UAAAA,IAAI,EAAE;AADoB,SAAtB,CAFN,EAII;AACF,gBAAMS,IAAI,GAAGN,IAAI,CAACO,UAAL,CAAgBP,IAAI,IAAI;AACnC,gBAAIA,IAAI,CAACQ,OAAL,EAAJ,EAAoB,OAAO,IAAP;;AAEpB,gBAAIR,IAAI,CAACS,UAAL,MAAqB,CAACT,IAAI,CAACU,yBAAL,EAA1B,EAA4D;AAC1D,kBAAIV,IAAI,CAACW,aAAL,CAAmB;AACrBC,gBAAAA,IAAI,EAAE;AADe,eAAnB,CAAJ,EAEI;AACF,uBAAO,KAAP;AACD;;AAED,qBAAO,IAAP;AACD;;AAED,mBAAO,KAAP;AACD,WAdY,CAAb;;AAgBA,cAAI,CAACN,IAAL,EAAW;AACT,kBAAMN,IAAI,CAACa,mBAAL,CAAyB,6DAAzB,CAAN;AACD;;AAED,gBAAM;AACJC,YAAAA;AADI,cAEFR,IAFJ;;AAIA,cAAI,CAACQ,IAAI,CAACC,EAAV,EAAc;AACZ,gBAAIT,IAAI,CAACU,QAAL,EAAJ,EAAqB;AACnBhB,cAAAA,IAAI,CAACiB,WAAL,CAAiBb,KAAK,CAACc,kBAAN,EAAjB;AACA;AACD;;AAEDJ,YAAAA,IAAI,CAACC,EAAL,GAAUX,KAAK,CAACe,qBAAN,CAA4B,QAA5B,CAAV;AACD;;AAED,gBAAMC,WAAW,GAAG5B,KAAK,CAAC6B,KAAN,CAAYC,gBAAZ,CAA6B9B,KAAK,CAAC6B,KAAN,CAAYE,cAAZ,EAA7B,EAA2D/B,KAAK,CAAC6B,KAAN,CAAYG,UAAZ,CAAuB,aAAvB,CAA3D,CAApB;;AAEA,cAAIlB,IAAI,CAACE,OAAL,EAAJ,EAAoB;AAClBR,YAAAA,IAAI,CAACiB,WAAL,CAAiBG,WAAjB;AACA;AACD;;AAEDpB,UAAAA,IAAI,CAACiB,WAAL,CAAiBzB,KAAK,CAAC6B,KAAN,CAAYI,qBAAZ,CAAkCjC,KAAK,CAAC6B,KAAN,CAAYK,gBAAZ,CAA6B,YAA7B,EAA2ClC,KAAK,CAAC6B,KAAN,CAAYE,cAAZ,EAA3C,EAAyE/B,KAAK,CAAC6B,KAAN,CAAYM,SAAZ,CAAsBb,IAAI,CAACC,EAA3B,CAAzE,CAAlC,EAA4IK,WAA5I,EAAyJhB,KAAK,CAACc,kBAAN,EAAzJ,CAAjB;AACD;AACF;;AAvDM;AAFJ,GAAP;AA6DD,CA/Dc,CAAf;;AAiEA/B,OAAO,CAACE,OAAR,GAAkBI,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"transform-new-target\",\n    visitor: {\n      MetaProperty(path) {\n        const meta = path.get(\"meta\");\n        const property = path.get(\"property\");\n        const {\n          scope\n        } = path;\n\n        if (meta.isIdentifier({\n          name: \"new\"\n        }) && property.isIdentifier({\n          name: \"target\"\n        })) {\n          const func = path.findParent(path => {\n            if (path.isClass()) return true;\n\n            if (path.isFunction() && !path.isArrowFunctionExpression()) {\n              if (path.isClassMethod({\n                kind: \"constructor\"\n              })) {\n                return false;\n              }\n\n              return true;\n            }\n\n            return false;\n          });\n\n          if (!func) {\n            throw path.buildCodeFrameError(\"new.target must be under a (non-arrow) function or a class.\");\n          }\n\n          const {\n            node\n          } = func;\n\n          if (!node.id) {\n            if (func.isMethod()) {\n              path.replaceWith(scope.buildUndefinedNode());\n              return;\n            }\n\n            node.id = scope.generateUidIdentifier(\"target\");\n          }\n\n          const constructor = _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier(\"constructor\"));\n\n          if (func.isClass()) {\n            path.replaceWith(constructor);\n            return;\n          }\n\n          path.replaceWith(_core.types.conditionalExpression(_core.types.binaryExpression(\"instanceof\", _core.types.thisExpression(), _core.types.cloneNode(node.id)), constructor, scope.buildUndefinedNode()));\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}