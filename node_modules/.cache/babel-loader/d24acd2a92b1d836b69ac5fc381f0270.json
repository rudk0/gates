{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nvar fse = require('fs-extra');\n\nvar path = require('path');\n\nvar errors = require('./errors'); // Used to filter the libraries to copy based on our package.json dependencies.\n\n\nvar WORKBOX_PREFIX = 'workbox-';\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(destDirectory) {\n    var thisPkg, workboxDirectoryName, workboxDirectoryPath, copyPromises, librariesToCopy, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, library, mainFilePath, srcPath;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            thisPkg = require('../../package.json'); // Use the version string from workbox-build in the name of the parent\n            // directory. This should be safe, because lerna will bump workbox-build's\n            // pkg.version whenever one of the dependent libraries gets bumped, and we\n            // care about versioning the dependent libraries.\n\n            workboxDirectoryName = \"workbox-v\".concat(thisPkg.version);\n            workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n            _context.next = 5;\n            return fse.ensureDir(workboxDirectoryPath);\n\n          case 5:\n            copyPromises = [];\n            librariesToCopy = Object.keys(thisPkg.dependencies).filter(function (dependency) {\n              return dependency.startsWith(WORKBOX_PREFIX);\n            });\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 10;\n\n            for (_iterator = librariesToCopy[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              library = _step.value;\n              mainFilePath = require.resolve(library);\n              srcPath = path.dirname(mainFilePath); // fse.copy() copies all the files in a directory, not the directory itself.\n              // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n\n              copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n            }\n\n            _context.next = 18;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](10);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 18:\n            _context.prev = 18;\n            _context.prev = 19;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 21:\n            _context.prev = 21;\n\n            if (!_didIteratorError) {\n              _context.next = 24;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 24:\n            return _context.finish(21);\n\n          case 25:\n            return _context.finish(18);\n\n          case 26:\n            _context.prev = 26;\n            _context.next = 29;\n            return Promise.all(copyPromises);\n\n          case 29:\n            return _context.abrupt(\"return\", workboxDirectoryName);\n\n          case 32:\n            _context.prev = 32;\n            _context.t1 = _context[\"catch\"](26);\n            throw Error(\"\".concat(errors['unable-to-copy-workbox-libraries'], \" \").concat(_context.t1));\n\n          case 35:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[10, 14, 18, 26], [19,, 21, 25], [26, 32]]);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/copy-workbox-libraries.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","fse","path","errors","WORKBOX_PREFIX","module","exports","_ref","default","destDirectory","thisPkg","workboxDirectoryName","version","workboxDirectoryPath","join","ensureDir","copyPromises","librariesToCopy","Object","keys","dependencies","filter","dependency","startsWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","library","value","mainFilePath","resolve","srcPath","dirname","push","copy","return","Promise","all","Error","_x","apply","arguments"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst fse = require('fs-extra');\n\nconst path = require('path');\n\nconst errors = require('./errors'); // Used to filter the libraries to copy based on our package.json dependencies.\n\n\nconst WORKBOX_PREFIX = 'workbox-';\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (destDirectory) {\n    const thisPkg = require('../../package.json'); // Use the version string from workbox-build in the name of the parent\n    // directory. This should be safe, because lerna will bump workbox-build's\n    // pkg.version whenever one of the dependent libraries gets bumped, and we\n    // care about versioning the dependent libraries.\n\n\n    const workboxDirectoryName = `workbox-v${thisPkg.version}`;\n    const workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n    yield fse.ensureDir(workboxDirectoryPath);\n    const copyPromises = [];\n    const librariesToCopy = Object.keys(thisPkg.dependencies).filter(dependency => dependency.startsWith(WORKBOX_PREFIX));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = librariesToCopy[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const library = _step.value;\n\n        const mainFilePath = require.resolve(library);\n\n        const srcPath = path.dirname(mainFilePath); // fse.copy() copies all the files in a directory, not the directory itself.\n        // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n\n        copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    try {\n      yield Promise.all(copyPromises);\n      return workboxDirectoryName;\n    } catch (error) {\n      throw Error(`${errors['unable-to-copy-workbox-libraries']} ${error}`);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();"]},"metadata":{},"sourceType":"script"}