{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _helperAnnotateAsPure = _interopRequireDefault(require(\"@babel/helper-annotate-as-pure\"));\n\nvar _helperFunctionName = _interopRequireDefault(require(\"@babel/helper-function-name\"));\n\nvar _helperSplitExportDeclaration = _interopRequireDefault(require(\"@babel/helper-split-export-declaration\"));\n\nvar _core = require(\"@babel/core\");\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar _transformClass = _interopRequireDefault(require(\"./transformClass\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst getBuiltinClasses = category => Object.keys(_globals.default[category]).filter(name => /^[A-Z]/.test(name));\n\nconst builtinClasses = new Set([...getBuiltinClasses(\"builtin\"), ...getBuiltinClasses(\"browser\")]);\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    loose\n  } = options;\n  const VISITED = Symbol();\n  return {\n    name: \"transform-classes\",\n    visitor: {\n      ExportDefaultDeclaration(path) {\n        if (!path.get(\"declaration\").isClassDeclaration()) return;\n        (0, _helperSplitExportDeclaration.default)(path);\n      },\n\n      ClassDeclaration(path) {\n        const {\n          node\n        } = path;\n        const ref = node.id || path.scope.generateUidIdentifier(\"class\");\n        path.replaceWith(_core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]));\n      },\n\n      ClassExpression(path, state) {\n        const {\n          node\n        } = path;\n        if (node[VISITED]) return;\n        const inferred = (0, _helperFunctionName.default)(path);\n\n        if (inferred && inferred !== node) {\n          path.replaceWith(inferred);\n          return;\n        }\n\n        node[VISITED] = true;\n        path.replaceWith((0, _transformClass.default)(path, state.file, builtinClasses, loose));\n\n        if (path.isCallExpression()) {\n          (0, _helperAnnotateAsPure.default)(path);\n\n          if (path.get(\"callee\").isArrowFunctionExpression()) {\n            path.get(\"callee\").arrowFunctionToExpression();\n          }\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-classes/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_helperAnnotateAsPure","_interopRequireDefault","_helperFunctionName","_helperSplitExportDeclaration","_core","_globals","_transformClass","obj","__esModule","getBuiltinClasses","category","keys","filter","name","test","builtinClasses","Set","_default","declare","api","options","assertVersion","loose","VISITED","Symbol","visitor","ExportDefaultDeclaration","path","get","isClassDeclaration","ClassDeclaration","node","ref","id","scope","generateUidIdentifier","replaceWith","types","variableDeclaration","variableDeclarator","toExpression","ClassExpression","state","inferred","file","isCallExpression","isArrowFunctionExpression","arrowFunctionToExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _helperAnnotateAsPure = _interopRequireDefault(require(\"@babel/helper-annotate-as-pure\"));\n\nvar _helperFunctionName = _interopRequireDefault(require(\"@babel/helper-function-name\"));\n\nvar _helperSplitExportDeclaration = _interopRequireDefault(require(\"@babel/helper-split-export-declaration\"));\n\nvar _core = require(\"@babel/core\");\n\nvar _globals = _interopRequireDefault(require(\"globals\"));\n\nvar _transformClass = _interopRequireDefault(require(\"./transformClass\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst getBuiltinClasses = category => Object.keys(_globals.default[category]).filter(name => /^[A-Z]/.test(name));\n\nconst builtinClasses = new Set([...getBuiltinClasses(\"builtin\"), ...getBuiltinClasses(\"browser\")]);\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    loose\n  } = options;\n  const VISITED = Symbol();\n  return {\n    name: \"transform-classes\",\n    visitor: {\n      ExportDefaultDeclaration(path) {\n        if (!path.get(\"declaration\").isClassDeclaration()) return;\n        (0, _helperSplitExportDeclaration.default)(path);\n      },\n\n      ClassDeclaration(path) {\n        const {\n          node\n        } = path;\n        const ref = node.id || path.scope.generateUidIdentifier(\"class\");\n        path.replaceWith(_core.types.variableDeclaration(\"let\", [_core.types.variableDeclarator(ref, _core.types.toExpression(node))]));\n      },\n\n      ClassExpression(path, state) {\n        const {\n          node\n        } = path;\n        if (node[VISITED]) return;\n        const inferred = (0, _helperFunctionName.default)(path);\n\n        if (inferred && inferred !== node) {\n          path.replaceWith(inferred);\n          return;\n        }\n\n        node[VISITED] = true;\n        path.replaceWith((0, _transformClass.default)(path, state.file, builtinClasses, loose));\n\n        if (path.isCallExpression()) {\n          (0, _helperAnnotateAsPure.default)(path);\n\n          if (path.get(\"callee\").isArrowFunctionExpression()) {\n            path.get(\"callee\").arrowFunctionToExpression();\n          }\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}