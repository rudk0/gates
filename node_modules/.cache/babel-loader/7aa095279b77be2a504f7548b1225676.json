{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst assert = require('assert');\n\nconst errors = require('./errors');\n\nconst transformManifest = require('./transform-manifest');\n\nconst getCompositeDetails = require('./get-composite-details');\n\nconst getFileDetails = require('./get-file-details');\n\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports = async ({\n  additionalManifestEntries,\n  dontCacheBustURLsMatching,\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPatterns,\n  globStrict,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  swDest,\n  templatedURLs\n}) => {\n  const warnings = []; // Initialize to an empty array so that we can still pass something to\n  // transformManifest() and get a normalized output.\n\n  let fileDetails = [];\n  const fileSet = new Set();\n\n  if (globDirectory) {\n    try {\n      fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n        const {\n          globbedFileDetails,\n          warning\n        } = getFileDetails({\n          globDirectory,\n          globFollow,\n          globIgnores,\n          globPattern,\n          globStrict\n        });\n\n        if (warning) {\n          warnings.push(warning);\n        }\n\n        globbedFileDetails.forEach(fileDetails => {\n          if (fileSet.has(fileDetails.file)) {\n            return;\n          }\n\n          fileSet.add(fileDetails.file);\n          accumulated.push(fileDetails);\n        });\n        return accumulated;\n      }, []);\n    } catch (error) {\n      // If there's an exception thrown while globbing, then report\n      // it back as a warning, and don't consider it fatal.\n      warnings.push(error.message);\n    }\n  }\n\n  if (templatedURLs) {\n    for (const url of Object.keys(templatedURLs)) {\n      assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n      const dependencies = templatedURLs[url];\n\n      if (Array.isArray(dependencies)) {\n        const details = dependencies.reduce((previous, globPattern) => {\n          try {\n            const {\n              globbedFileDetails,\n              warning\n            } = getFileDetails({\n              globDirectory,\n              globFollow,\n              globIgnores,\n              globPattern,\n              globStrict\n            });\n\n            if (warning) {\n              warnings.push(warning);\n            }\n\n            return previous.concat(globbedFileDetails);\n          } catch (error) {\n            const debugObj = {};\n            debugObj[url] = dependencies;\n            throw new Error(`${errors['bad-template-urls-asset']} ` + `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` + error);\n          }\n        }, []);\n        fileDetails.push(getCompositeDetails(url, details));\n      } else if (typeof dependencies === 'string') {\n        fileDetails.push(getStringDetails(url, dependencies));\n      }\n    }\n  }\n\n  const transformedManifest = await transformManifest({\n    additionalManifestEntries,\n    dontCacheBustURLsMatching,\n    fileDetails,\n    manifestTransforms,\n    maximumFileSizeToCacheInBytes,\n    modifyURLPrefix\n  });\n\n  if (warnings.length > 0) {\n    transformedManifest.warnings.push(...warnings);\n  }\n\n  return transformedManifest;\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-file-manifest-entries.js"],"names":["assert","require","errors","transformManifest","getCompositeDetails","getFileDetails","getStringDetails","module","exports","additionalManifestEntries","dontCacheBustURLsMatching","globDirectory","globFollow","globIgnores","globPatterns","globStrict","manifestTransforms","maximumFileSizeToCacheInBytes","modifyURLPrefix","swDest","templatedURLs","warnings","fileDetails","fileSet","Set","reduce","accumulated","globPattern","globbedFileDetails","warning","push","forEach","has","file","add","error","message","url","Object","keys","dependencies","Array","isArray","details","previous","concat","debugObj","Error","JSON","stringify","transformedManifest","length"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst assert = require('assert');\n\nconst errors = require('./errors');\n\nconst transformManifest = require('./transform-manifest');\n\nconst getCompositeDetails = require('./get-composite-details');\n\nconst getFileDetails = require('./get-file-details');\n\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports = async ({\n  additionalManifestEntries,\n  dontCacheBustURLsMatching,\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPatterns,\n  globStrict,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  swDest,\n  templatedURLs\n}) => {\n  const warnings = []; // Initialize to an empty array so that we can still pass something to\n  // transformManifest() and get a normalized output.\n\n  let fileDetails = [];\n  const fileSet = new Set();\n\n  if (globDirectory) {\n    try {\n      fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n        const {\n          globbedFileDetails,\n          warning\n        } = getFileDetails({\n          globDirectory,\n          globFollow,\n          globIgnores,\n          globPattern,\n          globStrict\n        });\n\n        if (warning) {\n          warnings.push(warning);\n        }\n\n        globbedFileDetails.forEach(fileDetails => {\n          if (fileSet.has(fileDetails.file)) {\n            return;\n          }\n\n          fileSet.add(fileDetails.file);\n          accumulated.push(fileDetails);\n        });\n        return accumulated;\n      }, []);\n    } catch (error) {\n      // If there's an exception thrown while globbing, then report\n      // it back as a warning, and don't consider it fatal.\n      warnings.push(error.message);\n    }\n  }\n\n  if (templatedURLs) {\n    for (const url of Object.keys(templatedURLs)) {\n      assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n      const dependencies = templatedURLs[url];\n\n      if (Array.isArray(dependencies)) {\n        const details = dependencies.reduce((previous, globPattern) => {\n          try {\n            const {\n              globbedFileDetails,\n              warning\n            } = getFileDetails({\n              globDirectory,\n              globFollow,\n              globIgnores,\n              globPattern,\n              globStrict\n            });\n\n            if (warning) {\n              warnings.push(warning);\n            }\n\n            return previous.concat(globbedFileDetails);\n          } catch (error) {\n            const debugObj = {};\n            debugObj[url] = dependencies;\n            throw new Error(`${errors['bad-template-urls-asset']} ` + `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` + error);\n          }\n        }, []);\n        fileDetails.push(getCompositeDetails(url, details));\n      } else if (typeof dependencies === 'string') {\n        fileDetails.push(getStringDetails(url, dependencies));\n      }\n    }\n  }\n\n  const transformedManifest = await transformManifest({\n    additionalManifestEntries,\n    dontCacheBustURLsMatching,\n    fileDetails,\n    manifestTransforms,\n    maximumFileSizeToCacheInBytes,\n    modifyURLPrefix\n  });\n\n  if (warnings.length > 0) {\n    transformedManifest.warnings.push(...warnings);\n  }\n\n  return transformedManifest;\n};"]},"metadata":{},"sourceType":"script"}