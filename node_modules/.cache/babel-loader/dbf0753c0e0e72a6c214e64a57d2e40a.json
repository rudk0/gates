{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\n\nvar _default = ({\n  types: t\n}) => {\n  const isArrowParent = p => p.parentKey === \"params\" && p.parentPath && t.isArrowFunctionExpression(p.parentPath);\n\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false; // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n\n          path.scope.rename(path.parent.key.name);\n        }\n      }\n\n    }\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-modules/lib/plugins/transform-edge-default-parameters/index.js"],"names":["exports","__esModule","default","_default","types","t","isArrowParent","p","parentKey","parentPath","isArrowFunctionExpression","name","visitor","AssignmentPattern","path","arrowArgParent","find","parent","shorthand","extra","scope","rename","key","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;;;;;AAKA,IAAIC,QAAQ,GAAG,CAAC;AACdC,EAAAA,KAAK,EAAEC;AADO,CAAD,KAET;AACJ,QAAMC,aAAa,GAAGC,CAAC,IAAIA,CAAC,CAACC,SAAF,KAAgB,QAAhB,IAA4BD,CAAC,CAACE,UAA9B,IAA4CJ,CAAC,CAACK,yBAAF,CAA4BH,CAAC,CAACE,UAA9B,CAAvE;;AAEA,SAAO;AACLE,IAAAA,IAAI,EAAE,mCADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,cAAMC,cAAc,GAAGD,IAAI,CAACE,IAAL,CAAUV,aAAV,CAAvB;;AAEA,YAAIS,cAAc,IAAID,IAAI,CAACG,MAAL,CAAYC,SAAlC,EAA6C;AAC3C;AACAJ,UAAAA,IAAI,CAACG,MAAL,CAAYC,SAAZ,GAAwB,KAAxB;AACA,WAACJ,IAAI,CAACG,MAAL,CAAYE,KAAZ,IAAqB,EAAtB,EAA0BD,SAA1B,GAAsC,KAAtC,CAH2C,CAGE;;AAE7CJ,UAAAA,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkBP,IAAI,CAACG,MAAL,CAAYK,GAAZ,CAAgBX,IAAlC;AACD;AACF;;AAXM;AAFJ,GAAP;AAiBD,CAtBD;;AAwBAX,OAAO,CAACE,OAAR,GAAkBC,QAAlB;AACAoB,MAAM,CAACvB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only arguments-related bug in ES Modules-supporting browsers (Edge 16 & 17).\n * Use this plugin instead of @babel/plugin-transform-parameters when targeting ES Modules.\n */\nvar _default = ({\n  types: t\n}) => {\n  const isArrowParent = p => p.parentKey === \"params\" && p.parentPath && t.isArrowFunctionExpression(p.parentPath);\n\n  return {\n    name: \"transform-edge-default-parameters\",\n    visitor: {\n      AssignmentPattern(path) {\n        const arrowArgParent = path.find(isArrowParent);\n\n        if (arrowArgParent && path.parent.shorthand) {\n          // In Babel 7+, there is no way to force non-shorthand properties.\n          path.parent.shorthand = false;\n          (path.parent.extra || {}).shorthand = false; // So, to ensure non-shorthand, rename the local identifier so it no longer matches:\n\n          path.scope.rename(path.parent.key.name);\n        }\n      }\n\n    }\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}