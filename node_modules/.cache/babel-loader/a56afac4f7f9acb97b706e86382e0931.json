{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Safari 10.3 had an issue where async arrow function expressions within any class method would throw.\n * After an initial fix, any references to the instance via `this` within those methods would also throw.\n * This is fixed by converting arrow functions in class methods into equivalent function expressions.\n * @see https://bugs.webkit.org/show_bug.cgi?id=166879\n *\n * @example\n *   class X{ a(){ async () => {}; } }   // throws\n *   class X{ a(){ async function() {}; } }   // works\n *\n * @example\n *   class X{ a(){\n *     async () => this.a;   // throws\n *   } }\n *   class X{ a(){\n *     var _this=this;\n *     async function() { return _this.a };   // works\n *   } }\n */\n\nconst OPTS = {\n  allowInsertArrow: false,\n  specCompliant: false\n};\n\nvar _default = ({\n  types: t\n}) => ({\n  name: \"transform-async-arrows-in-class\",\n  visitor: {\n    ArrowFunctionExpression(path) {\n      if (path.node.async && path.findParent(t.isClassMethod)) {\n        path.arrowFunctionToExpression(OPTS);\n      }\n    }\n\n  }\n});\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-modules/lib/plugins/transform-async-arrows-in-class/index.js"],"names":["exports","__esModule","default","OPTS","allowInsertArrow","specCompliant","_default","types","t","name","visitor","ArrowFunctionExpression","path","node","async","findParent","isClassMethod","arrowFunctionToExpression","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,MAAMC,IAAI,GAAG;AACXC,EAAAA,gBAAgB,EAAE,KADP;AAEXC,EAAAA,aAAa,EAAE;AAFJ,CAAb;;AAKA,IAAIC,QAAQ,GAAG,CAAC;AACdC,EAAAA,KAAK,EAAEC;AADO,CAAD,MAER;AACLC,EAAAA,IAAI,EAAE,iCADD;AAELC,EAAAA,OAAO,EAAE;AACPC,IAAAA,uBAAuB,CAACC,IAAD,EAAO;AAC5B,UAAIA,IAAI,CAACC,IAAL,CAAUC,KAAV,IAAmBF,IAAI,CAACG,UAAL,CAAgBP,CAAC,CAACQ,aAAlB,CAAvB,EAAyD;AACvDJ,QAAAA,IAAI,CAACK,yBAAL,CAA+Bd,IAA/B;AACD;AACF;;AALM;AAFJ,CAFQ,CAAf;;AAcAH,OAAO,CAACE,OAAR,GAAkBI,QAAlB;AACAY,MAAM,CAAClB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Safari 10.3 had an issue where async arrow function expressions within any class method would throw.\n * After an initial fix, any references to the instance via `this` within those methods would also throw.\n * This is fixed by converting arrow functions in class methods into equivalent function expressions.\n * @see https://bugs.webkit.org/show_bug.cgi?id=166879\n *\n * @example\n *   class X{ a(){ async () => {}; } }   // throws\n *   class X{ a(){ async function() {}; } }   // works\n *\n * @example\n *   class X{ a(){\n *     async () => this.a;   // throws\n *   } }\n *   class X{ a(){\n *     var _this=this;\n *     async function() { return _this.a };   // works\n *   } }\n */\nconst OPTS = {\n  allowInsertArrow: false,\n  specCompliant: false\n};\n\nvar _default = ({\n  types: t\n}) => ({\n  name: \"transform-async-arrows-in-class\",\n  visitor: {\n    ArrowFunctionExpression(path) {\n      if (path.node.async && path.findParent(t.isClassMethod)) {\n        path.arrowFunctionToExpression(OPTS);\n      }\n    }\n\n  }\n});\n\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}