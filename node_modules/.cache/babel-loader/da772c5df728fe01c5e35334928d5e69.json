{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst crypto = require('crypto');\n\nmodule.exports = (compositeURL, dependencyDetails) => {\n  let totalSize = 0;\n  let compositeHash = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = dependencyDetails[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      let fileDetails = _step.value;\n      totalSize += fileDetails.size;\n      compositeHash += fileDetails.hash;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(compositeHash);\n  const hashOfHashes = md5.digest('hex');\n  return {\n    file: compositeURL,\n    hash: hashOfHashes,\n    size: totalSize\n  };\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-composite-details.js"],"names":["crypto","require","module","exports","compositeURL","dependencyDetails","totalSize","compositeHash","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","fileDetails","value","size","hash","err","return","md5","createHash","update","hashOfHashes","digest","file"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,YAAD,EAAeC,iBAAf,KAAqC;AACpD,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGP,iBAAiB,CAACQ,MAAM,CAACC,QAAR,CAAjB,EAAhB,EAAsDC,KAA3D,EAAkE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAAlE,EAAkIT,yBAAyB,GAAG,IAA9J,EAAoK;AAClK,UAAIU,WAAW,GAAGH,KAAK,CAACI,KAAxB;AACAb,MAAAA,SAAS,IAAIY,WAAW,CAACE,IAAzB;AACAb,MAAAA,aAAa,IAAIW,WAAW,CAACG,IAA7B;AACD;AACF,GAND,CAME,OAAOC,GAAP,EAAY;AACZb,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGY,GAAjB;AACD,GATD,SASU;AACR,QAAI;AACF,UAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;AAC1DX,QAAAA,SAAS,CAACW,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAId,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,QAAMc,GAAG,GAAGxB,MAAM,CAACyB,UAAP,CAAkB,KAAlB,CAAZ;AACAD,EAAAA,GAAG,CAACE,MAAJ,CAAWnB,aAAX;AACA,QAAMoB,YAAY,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAArB;AACA,SAAO;AACLC,IAAAA,IAAI,EAAEzB,YADD;AAELiB,IAAAA,IAAI,EAAEM,YAFD;AAGLP,IAAAA,IAAI,EAAEd;AAHD,GAAP;AAKD,CApCD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst crypto = require('crypto');\n\nmodule.exports = (compositeURL, dependencyDetails) => {\n  let totalSize = 0;\n  let compositeHash = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = dependencyDetails[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      let fileDetails = _step.value;\n      totalSize += fileDetails.size;\n      compositeHash += fileDetails.hash;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(compositeHash);\n  const hashOfHashes = md5.digest('hex');\n  return {\n    file: compositeURL,\n    hash: hashOfHashes,\n    size: totalSize\n  };\n};"]},"metadata":{},"sourceType":"script"}