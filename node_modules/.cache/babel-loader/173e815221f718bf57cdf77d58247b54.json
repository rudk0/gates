{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nvar template = require('lodash.template');\n\nvar swTemplate = require('../templates/sw-template');\n\nvar errors = require('./errors');\n\nvar runtimeCachingConverter = require('./runtime-caching-converter');\n\nvar stringifyWithoutComments = require('./stringify-without-comments');\n\nmodule.exports = function (_ref) {\n  var cacheId = _ref.cacheId,\n      cleanupOutdatedCaches = _ref.cleanupOutdatedCaches,\n      clientsClaim = _ref.clientsClaim,\n      directoryIndex = _ref.directoryIndex,\n      ignoreURLParametersMatching = _ref.ignoreURLParametersMatching,\n      importScripts = _ref.importScripts,\n      manifestEntries = _ref.manifestEntries,\n      modulePathPrefix = _ref.modulePathPrefix,\n      navigateFallback = _ref.navigateFallback,\n      navigateFallbackBlacklist = _ref.navigateFallbackBlacklist,\n      navigateFallbackWhitelist = _ref.navigateFallbackWhitelist,\n      navigationPreload = _ref.navigationPreload,\n      offlineGoogleAnalytics = _ref.offlineGoogleAnalytics,\n      runtimeCaching = _ref.runtimeCaching,\n      skipWaiting = _ref.skipWaiting,\n      workboxSWImport = _ref.workboxSWImport;\n  // These are all options that can be passed to the precacheAndRoute() method.\n  var precacheOptions = {\n    directoryIndex: directoryIndex,\n    // An array of RegExp objects can't be serialized by JSON.stringify()'s\n    // default behavior, so if it's given, convert it manually.\n    ignoreURLParametersMatching: ignoreURLParametersMatching ? [] : undefined\n  };\n  var precacheOptionsString = JSON.stringify(precacheOptions, null, 2);\n\n  if (ignoreURLParametersMatching) {\n    precacheOptionsString = precacheOptionsString.replace(\"\\\"ignoreURLParametersMatching\\\": []\", \"\\\"ignoreURLParametersMatching\\\": [\" + \"\".concat(ignoreURLParametersMatching.join(', '), \"]\"));\n  }\n\n  var offlineAnalyticsConfigString;\n\n  if (offlineGoogleAnalytics) {\n    // If offlineGoogleAnalytics is a truthy value, we need to convert it to the\n    // format expected by the template.\n    offlineAnalyticsConfigString = offlineGoogleAnalytics === true ? // If it's the literal value true, then use an empty config string.\n    '{}' : // Otherwise, convert the config object into a more complex string, taking\n    // into account the fact that functions might need to be stringified.\n    stringifyWithoutComments(offlineGoogleAnalytics);\n  }\n\n  try {\n    var populatedTemplate = template(swTemplate)({\n      cacheId: cacheId,\n      cleanupOutdatedCaches: cleanupOutdatedCaches,\n      clientsClaim: clientsClaim,\n      importScripts: importScripts,\n      manifestEntries: manifestEntries,\n      modulePathPrefix: modulePathPrefix,\n      navigateFallback: navigateFallback,\n      navigateFallbackBlacklist: navigateFallbackBlacklist,\n      navigateFallbackWhitelist: navigateFallbackWhitelist,\n      navigationPreload: navigationPreload,\n      offlineAnalyticsConfigString: offlineAnalyticsConfigString,\n      precacheOptionsString: precacheOptionsString,\n      skipWaiting: skipWaiting,\n      runtimeCaching: runtimeCachingConverter(runtimeCaching),\n      workboxSWImport: workboxSWImport\n    }); // Clean up multiple blank lines.\n\n    return populatedTemplate.replace(/\\n{3,}/g, '\\n\\n').trim() + '\\n';\n  } catch (error) {\n    throw new Error(\"\".concat(errors['populating-sw-tmpl-failed'], \" '\").concat(error.message, \"'\"));\n  }\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/populate-sw-template.js"],"names":["template","require","swTemplate","errors","runtimeCachingConverter","stringifyWithoutComments","module","exports","cacheId","cleanupOutdatedCaches","clientsClaim","directoryIndex","ignoreURLParametersMatching","importScripts","manifestEntries","modulePathPrefix","navigateFallback","navigateFallbackBlacklist","navigateFallbackWhitelist","navigationPreload","offlineGoogleAnalytics","runtimeCaching","skipWaiting","workboxSWImport","precacheOptions","undefined","precacheOptionsString","JSON","stringify","replace","join","offlineAnalyticsConfigString","populatedTemplate","trim","error","Error","message"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst template = require('lodash.template');\n\nconst swTemplate = require('../templates/sw-template');\n\nconst errors = require('./errors');\n\nconst runtimeCachingConverter = require('./runtime-caching-converter');\n\nconst stringifyWithoutComments = require('./stringify-without-comments');\n\nmodule.exports = ({\n  cacheId,\n  cleanupOutdatedCaches,\n  clientsClaim,\n  directoryIndex,\n  ignoreURLParametersMatching,\n  importScripts,\n  manifestEntries,\n  modulePathPrefix,\n  navigateFallback,\n  navigateFallbackBlacklist,\n  navigateFallbackWhitelist,\n  navigationPreload,\n  offlineGoogleAnalytics,\n  runtimeCaching,\n  skipWaiting,\n  workboxSWImport\n}) => {\n  // These are all options that can be passed to the precacheAndRoute() method.\n  const precacheOptions = {\n    directoryIndex,\n    // An array of RegExp objects can't be serialized by JSON.stringify()'s\n    // default behavior, so if it's given, convert it manually.\n    ignoreURLParametersMatching: ignoreURLParametersMatching ? [] : undefined\n  };\n  let precacheOptionsString = JSON.stringify(precacheOptions, null, 2);\n\n  if (ignoreURLParametersMatching) {\n    precacheOptionsString = precacheOptionsString.replace(`\"ignoreURLParametersMatching\": []`, `\"ignoreURLParametersMatching\": [` + `${ignoreURLParametersMatching.join(', ')}]`);\n  }\n\n  let offlineAnalyticsConfigString;\n\n  if (offlineGoogleAnalytics) {\n    // If offlineGoogleAnalytics is a truthy value, we need to convert it to the\n    // format expected by the template.\n    offlineAnalyticsConfigString = offlineGoogleAnalytics === true ? // If it's the literal value true, then use an empty config string.\n    '{}' : // Otherwise, convert the config object into a more complex string, taking\n    // into account the fact that functions might need to be stringified.\n    stringifyWithoutComments(offlineGoogleAnalytics);\n  }\n\n  try {\n    const populatedTemplate = template(swTemplate)({\n      cacheId,\n      cleanupOutdatedCaches,\n      clientsClaim,\n      importScripts,\n      manifestEntries,\n      modulePathPrefix,\n      navigateFallback,\n      navigateFallbackBlacklist,\n      navigateFallbackWhitelist,\n      navigationPreload,\n      offlineAnalyticsConfigString,\n      precacheOptionsString,\n      skipWaiting,\n      runtimeCaching: runtimeCachingConverter(runtimeCaching),\n      workboxSWImport\n    }); // Clean up multiple blank lines.\n\n    return populatedTemplate.replace(/\\n{3,}/g, '\\n\\n').trim() + '\\n';\n  } catch (error) {\n    throw new Error(`${errors['populating-sw-tmpl-failed']} '${error.message}'`);\n  }\n};"]},"metadata":{},"sourceType":"script"}