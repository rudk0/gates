{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst crypto = require('crypto');\n\nmodule.exports = (compositeURL, dependencyDetails) => {\n  let totalSize = 0;\n  let compositeHash = '';\n\n  for (const fileDetails of dependencyDetails) {\n    totalSize += fileDetails.size;\n    compositeHash += fileDetails.hash;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(compositeHash);\n  const hashOfHashes = md5.digest('hex');\n  return {\n    file: compositeURL,\n    hash: hashOfHashes,\n    size: totalSize\n  };\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-composite-details.js"],"names":["crypto","require","module","exports","compositeURL","dependencyDetails","totalSize","compositeHash","fileDetails","size","hash","md5","createHash","update","hashOfHashes","digest","file"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,YAAD,EAAeC,iBAAf,KAAqC;AACpD,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,aAAa,GAAG,EAApB;;AAEA,OAAK,MAAMC,WAAX,IAA0BH,iBAA1B,EAA6C;AAC3CC,IAAAA,SAAS,IAAIE,WAAW,CAACC,IAAzB;AACAF,IAAAA,aAAa,IAAIC,WAAW,CAACE,IAA7B;AACD;;AAED,QAAMC,GAAG,GAAGX,MAAM,CAACY,UAAP,CAAkB,KAAlB,CAAZ;AACAD,EAAAA,GAAG,CAACE,MAAJ,CAAWN,aAAX;AACA,QAAMO,YAAY,GAAGH,GAAG,CAACI,MAAJ,CAAW,KAAX,CAArB;AACA,SAAO;AACLC,IAAAA,IAAI,EAAEZ,YADD;AAELM,IAAAA,IAAI,EAAEI,YAFD;AAGLL,IAAAA,IAAI,EAAEH;AAHD,GAAP;AAKD,CAjBD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst crypto = require('crypto');\n\nmodule.exports = (compositeURL, dependencyDetails) => {\n  let totalSize = 0;\n  let compositeHash = '';\n\n  for (const fileDetails of dependencyDetails) {\n    totalSize += fileDetails.size;\n    compositeHash += fileDetails.hash;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(compositeHash);\n  const hashOfHashes = md5.digest('hex');\n  return {\n    file: compositeURL,\n    hash: hashOfHashes,\n    size: totalSize\n  };\n};"]},"metadata":{},"sourceType":"script"}