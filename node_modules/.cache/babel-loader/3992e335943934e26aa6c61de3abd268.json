{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nvar copyWorkboxLibraries = require('./lib/copy-workbox-libraries');\n\nvar generateSW = require('./entry-points/generate-sw');\n\nvar generateSWString = require('./entry-points/generate-sw-string');\n\nvar getManifest = require('./entry-points/get-manifest');\n\nvar injectManifest = require('./entry-points/inject-manifest');\n\nvar _require = require('./lib/cdn-utils'),\n    getModuleURL = _require.getModuleURL;\n/**\n * This Node module can be used to generate a list of assets that should be\n * precached in a service worker, generating a hash that can be used to\n * intelligently update a cache when the service worker is updated.\n *\n * This module will use glob patterns to find assets in a given directory\n * and use the resulting URL and revision data for one of the follow uses:\n *\n * 1. Generate a complete service worker with precaching and some basic\n * configurable options, writing the resulting service worker file to disk. See\n * [generateSW()]{@link module:workbox-build.generateSW}.\n * 1. Generate a complete service worker with precaching and some basic\n * configurable options, without writing the results to disk. See\n * [generateSWString()]{@link module:workbox-build.generateSWString}.\n * 1. Inject a manifest into an existing service worker. This allows you\n * to control your own service worker while still taking advantage of\n * [workboxSW.precache()]{@link module:workbox-sw.WorkboxSW#precache} logic.\n * See [injectManifest()]{@link module:workbox-build.injectManifest}.\n * 1. Just generate a manifest, not a full service worker file.\n * This is useful if you want to make use of the manifest from your own existing\n * service worker file and are okay with including the manifest yourself.\n * See [getManifest()]{@link module:workbox-build.getManifest}.\n *\n * @property {Array<RegExp>} [ignoreURLParametersMatching=[/^utm_/]] Any\n * search parameter names that match against one of the regex's in this array\n * will be removed before looking for a precache match.\n *\n * This is useful if your users might request URLs that contain, for example,\n * URL parameters used to track the source of the traffic. Those URL parameters\n * would normally cause the cache lookup to fail, since the URL strings used\n * as cache keys would not be expected to include them.\n *\n * You can use `[/./]` to ignore all URL parameters.\n *\n * Note: This option is only valid when used with\n * {@link module:workbox-build#generateSW|generateSW()}. When using\n * {@link module:workbox-build.injectManifest|injectManifest()}, you can\n * explicitly pass the desired value in to the\n * {@link module:workbox-sw.WorkboxSW|WorkboxSW() constructor} in your `swSrc`\n * file.\n *\n * E.g. `[/homescreen/]`\n *\n * @property {Boolean} [handleFetch=true] Whether or not `workbox-sw` should\n * create a `fetch` event handler that responds to network requests. This is\n * useful during development if you don't want the service worker serving stale\n * content.\n *\n * Note: This option is only valid when used with\n * {@link module:workbox-build#generateSW|generateSW()}. When using\n * {@link module:workbox-build.injectManifest|injectManifest()}, you can\n * explicitly pass the desired value in to the\n * {@link module:workbox-sw.WorkboxSW|WorkboxSW() constructor} in your `swSrc`\n * file.\n *\n * @module workbox-build\n */\n\n\nmodule.exports = {\n  copyWorkboxLibraries: copyWorkboxLibraries,\n  generateSW: generateSW,\n  generateSWString: generateSWString,\n  getManifest: getManifest,\n  getModuleURL: getModuleURL,\n  injectManifest: injectManifest\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/index.js"],"names":["copyWorkboxLibraries","require","generateSW","generateSWString","getManifest","injectManifest","_require","getModuleURL","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,IAAMA,oBAAoB,GAAGC,OAAO,CAAC,8BAAD,CAApC;;AAEA,IAAMC,UAAU,GAAGD,OAAO,CAAC,4BAAD,CAA1B;;AAEA,IAAME,gBAAgB,GAAGF,OAAO,CAAC,mCAAD,CAAhC;;AAEA,IAAMG,WAAW,GAAGH,OAAO,CAAC,6BAAD,CAA3B;;AAEA,IAAMI,cAAc,GAAGJ,OAAO,CAAC,gCAAD,CAA9B;;AAEA,IAAMK,QAAQ,GAAGL,OAAO,CAAC,iBAAD,CAAxB;AAAA,IACMM,YAAY,GAAGD,QAAQ,CAACC,YAD9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DAC,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,oBAAoB,EAApBA,oBADe;AAEfE,EAAAA,UAAU,EAAVA,UAFe;AAGfC,EAAAA,gBAAgB,EAAhBA,gBAHe;AAIfC,EAAAA,WAAW,EAAXA,WAJe;AAKfG,EAAAA,YAAY,EAAZA,YALe;AAMfF,EAAAA,cAAc,EAAdA;AANe,CAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst copyWorkboxLibraries = require('./lib/copy-workbox-libraries');\n\nconst generateSW = require('./entry-points/generate-sw');\n\nconst generateSWString = require('./entry-points/generate-sw-string');\n\nconst getManifest = require('./entry-points/get-manifest');\n\nconst injectManifest = require('./entry-points/inject-manifest');\n\nconst _require = require('./lib/cdn-utils'),\n      getModuleURL = _require.getModuleURL;\n/**\n * This Node module can be used to generate a list of assets that should be\n * precached in a service worker, generating a hash that can be used to\n * intelligently update a cache when the service worker is updated.\n *\n * This module will use glob patterns to find assets in a given directory\n * and use the resulting URL and revision data for one of the follow uses:\n *\n * 1. Generate a complete service worker with precaching and some basic\n * configurable options, writing the resulting service worker file to disk. See\n * [generateSW()]{@link module:workbox-build.generateSW}.\n * 1. Generate a complete service worker with precaching and some basic\n * configurable options, without writing the results to disk. See\n * [generateSWString()]{@link module:workbox-build.generateSWString}.\n * 1. Inject a manifest into an existing service worker. This allows you\n * to control your own service worker while still taking advantage of\n * [workboxSW.precache()]{@link module:workbox-sw.WorkboxSW#precache} logic.\n * See [injectManifest()]{@link module:workbox-build.injectManifest}.\n * 1. Just generate a manifest, not a full service worker file.\n * This is useful if you want to make use of the manifest from your own existing\n * service worker file and are okay with including the manifest yourself.\n * See [getManifest()]{@link module:workbox-build.getManifest}.\n *\n * @property {Array<RegExp>} [ignoreURLParametersMatching=[/^utm_/]] Any\n * search parameter names that match against one of the regex's in this array\n * will be removed before looking for a precache match.\n *\n * This is useful if your users might request URLs that contain, for example,\n * URL parameters used to track the source of the traffic. Those URL parameters\n * would normally cause the cache lookup to fail, since the URL strings used\n * as cache keys would not be expected to include them.\n *\n * You can use `[/./]` to ignore all URL parameters.\n *\n * Note: This option is only valid when used with\n * {@link module:workbox-build#generateSW|generateSW()}. When using\n * {@link module:workbox-build.injectManifest|injectManifest()}, you can\n * explicitly pass the desired value in to the\n * {@link module:workbox-sw.WorkboxSW|WorkboxSW() constructor} in your `swSrc`\n * file.\n *\n * E.g. `[/homescreen/]`\n *\n * @property {Boolean} [handleFetch=true] Whether or not `workbox-sw` should\n * create a `fetch` event handler that responds to network requests. This is\n * useful during development if you don't want the service worker serving stale\n * content.\n *\n * Note: This option is only valid when used with\n * {@link module:workbox-build#generateSW|generateSW()}. When using\n * {@link module:workbox-build.injectManifest|injectManifest()}, you can\n * explicitly pass the desired value in to the\n * {@link module:workbox-sw.WorkboxSW|WorkboxSW() constructor} in your `swSrc`\n * file.\n *\n * @module workbox-build\n */\n\n\nmodule.exports = {\n  copyWorkboxLibraries,\n  generateSW,\n  generateSWString,\n  getManifest,\n  getModuleURL,\n  injectManifest\n};"]},"metadata":{},"sourceType":"script"}