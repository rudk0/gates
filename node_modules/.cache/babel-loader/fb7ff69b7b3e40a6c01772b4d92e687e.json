{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst fse = require('fs-extra');\n\nconst path = require('path');\n\nconst errors = require('./errors'); // Used to filter the libraries to copy based on our package.json dependencies.\n\n\nconst WORKBOX_PREFIX = 'workbox-';\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (destDirectory) {\n    const thisPkg = require('../../package.json'); // Use the version string from workbox-build in the name of the parent\n    // directory. This should be safe, because lerna will bump workbox-build's\n    // pkg.version whenever one of the dependent libraries gets bumped, and we\n    // care about versioning the dependent libraries.\n\n\n    const workboxDirectoryName = `workbox-v${thisPkg.version}`;\n    const workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n    yield fse.ensureDir(workboxDirectoryPath);\n    const copyPromises = [];\n    const librariesToCopy = Object.keys(thisPkg.dependencies).filter(dependency => dependency.startsWith(WORKBOX_PREFIX));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = librariesToCopy[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const library = _step.value;\n\n        const mainFilePath = require.resolve(library);\n\n        const srcPath = path.dirname(mainFilePath); // fse.copy() copies all the files in a directory, not the directory itself.\n        // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n\n        copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    try {\n      yield Promise.all(copyPromises);\n      return workboxDirectoryName;\n    } catch (error) {\n      throw Error(`${errors['unable-to-copy-workbox-libraries']} ${error}`);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/copy-workbox-libraries.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","fse","path","errors","WORKBOX_PREFIX","module","exports","_ref","default","destDirectory","thisPkg","workboxDirectoryName","version","workboxDirectoryPath","join","ensureDir","copyPromises","librariesToCopy","Object","keys","dependencies","filter","dependency","startsWith","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","library","value","mainFilePath","resolve","srcPath","dirname","push","copy","err","return","Promise","all","error","Error","_x","apply","arguments"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,kBAAkB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;AAEA;;;;;;;;;AAOA,MAAME,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB,C,CAAoC;;;AAGpC,MAAMK,cAAc,GAAG,UAAvB;AACA;;;;;;;;;;;;;;;;;;;;;AAqBAC,MAAM,CAACC,OAAP,GACA,aACA,YAAY;AACV,MAAIC,IAAI,GAAG,CAAC,GAAGP,kBAAkB,CAACQ,OAAvB,EAAgC,WAAWC,aAAX,EAA0B;AACnE,UAAMC,OAAO,GAAGX,OAAO,CAAC,oBAAD,CAAvB,CADmE,CACpB;AAC/C;AACA;AACA;;;AAGA,UAAMY,oBAAoB,GAAI,YAAWD,OAAO,CAACE,OAAQ,EAAzD;AACA,UAAMC,oBAAoB,GAAGX,IAAI,CAACY,IAAL,CAAUL,aAAV,EAAyBE,oBAAzB,CAA7B;AACA,UAAMV,GAAG,CAACc,SAAJ,CAAcF,oBAAd,CAAN;AACA,UAAMG,YAAY,GAAG,EAArB;AACA,UAAMC,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAO,CAACU,YAApB,EAAkCC,MAAlC,CAAyCC,UAAU,IAAIA,UAAU,CAACC,UAAX,CAAsBnB,cAAtB,CAAvD,CAAxB;AACA,QAAIoB,yBAAyB,GAAG,IAAhC;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,QAAIC,cAAc,GAAGC,SAArB;;AAEA,QAAI;AACF,WAAK,IAAIC,SAAS,GAAGX,eAAe,CAACY,MAAM,CAACC,QAAR,CAAf,EAAhB,EAAoDC,KAAzD,EAAgE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAAhE,EAAgIT,yBAAyB,GAAG,IAA5J,EAAkK;AAChK,cAAMU,OAAO,GAAGH,KAAK,CAACI,KAAtB;;AAEA,cAAMC,YAAY,GAAGrC,OAAO,CAACsC,OAAR,CAAgBH,OAAhB,CAArB;;AAEA,cAAMI,OAAO,GAAGpC,IAAI,CAACqC,OAAL,CAAaH,YAAb,CAAhB,CALgK,CAKpH;AAC5C;;AAEApB,QAAAA,YAAY,CAACwB,IAAb,CAAkBvC,GAAG,CAACwC,IAAJ,CAASH,OAAT,EAAkBzB,oBAAlB,CAAlB;AACD;AACF,KAXD,CAWE,OAAO6B,GAAP,EAAY;AACZjB,MAAAA,iBAAiB,GAAG,IAApB;AACAC,MAAAA,cAAc,GAAGgB,GAAjB;AACD,KAdD,SAcU;AACR,UAAI;AACF,YAAI,CAAClB,yBAAD,IAA8BI,SAAS,CAACe,MAAV,IAAoB,IAAtD,EAA4D;AAC1Df,UAAAA,SAAS,CAACe,MAAV;AACD;AACF,OAJD,SAIU;AACR,YAAIlB,iBAAJ,EAAuB;AACrB,gBAAMC,cAAN;AACD;AACF;AACF;;AAED,QAAI;AACF,YAAMkB,OAAO,CAACC,GAAR,CAAY7B,YAAZ,CAAN;AACA,aAAOL,oBAAP;AACD,KAHD,CAGE,OAAOmC,KAAP,EAAc;AACd,YAAMC,KAAK,CAAE,GAAE5C,MAAM,CAAC,kCAAD,CAAqC,IAAG2C,KAAM,EAAxD,CAAX;AACD;AACF,GAhDU,CAAX;;AAkDA,SAAO,UAAUE,EAAV,EAAc;AACnB,WAAOzC,IAAI,CAAC0C,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,GAFD;AAGD,CAtDD,EAFA","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst fse = require('fs-extra');\n\nconst path = require('path');\n\nconst errors = require('./errors'); // Used to filter the libraries to copy based on our package.json dependencies.\n\n\nconst WORKBOX_PREFIX = 'workbox-';\n/**\n * This copies over a set of runtime libraries used by Workbox into a\n * local directory, which should be deployed alongside your service worker file.\n *\n * As an alternative to deploying these local copies, you could instead use\n * Workbox from its official CDN URL.\n *\n * This method is exposed for the benefit of developers using\n * [injectManifest()]{@link module:workbox-build.injectManifest} who would\n * prefer not to use the CDN copies of Workbox. Developers using\n * [generateSW()]{@link module:workbox-build.generateSW} don't need to\n * explicitly call this method, as it's called automatically when\n * `importWorkboxFrom` is set to `local`.\n *\n * @param {string} destDirectory The path to the parent directory under which\n * the new directory of libraries will be created.\n * @return {Promise<string>} The name of the newly created directory.\n *\n * @alias module:workbox-build.copyWorkboxLibraries\n */\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(function* (destDirectory) {\n    const thisPkg = require('../../package.json'); // Use the version string from workbox-build in the name of the parent\n    // directory. This should be safe, because lerna will bump workbox-build's\n    // pkg.version whenever one of the dependent libraries gets bumped, and we\n    // care about versioning the dependent libraries.\n\n\n    const workboxDirectoryName = `workbox-v${thisPkg.version}`;\n    const workboxDirectoryPath = path.join(destDirectory, workboxDirectoryName);\n    yield fse.ensureDir(workboxDirectoryPath);\n    const copyPromises = [];\n    const librariesToCopy = Object.keys(thisPkg.dependencies).filter(dependency => dependency.startsWith(WORKBOX_PREFIX));\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = librariesToCopy[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        const library = _step.value;\n\n        const mainFilePath = require.resolve(library);\n\n        const srcPath = path.dirname(mainFilePath); // fse.copy() copies all the files in a directory, not the directory itself.\n        // See https://github.com/jprichardson/node-fs-extra/blob/master/docs/copy.md#copysrc-dest-options-callback\n\n        copyPromises.push(fse.copy(srcPath, workboxDirectoryPath));\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    try {\n      yield Promise.all(copyPromises);\n      return workboxDirectoryName;\n    } catch (error) {\n      throw Error(`${errors['unable-to-copy-workbox-libraries']} ${error}`);\n    }\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();"]},"metadata":{},"sourceType":"script"}