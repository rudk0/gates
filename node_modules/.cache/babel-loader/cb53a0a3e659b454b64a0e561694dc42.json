{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hoek = require('@hapi/hoek');\n\nvar Any = require('../any');\n\nvar internals = {};\n\ninternals.Binary = /*#__PURE__*/function (_Any) {\n  _inherits(_class, _Any);\n\n  var _super = _createSuper(_class);\n\n  function _class() {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this);\n    _this._type = 'binary';\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"_base\",\n    value: function _base(value, state, options) {\n      var result = {\n        value: value\n      };\n\n      if (typeof value === 'string' && options.convert) {\n        try {\n          result.value = Buffer.from(value, this._flags.encoding);\n        } catch (e) {}\n      }\n\n      result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);\n      return result;\n    }\n  }, {\n    key: \"encoding\",\n    value: function encoding(_encoding) {\n      Hoek.assert(Buffer.isEncoding(_encoding), 'Invalid encoding:', _encoding);\n\n      if (this._flags.encoding === _encoding) {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.encoding = _encoding;\n      return obj;\n    }\n  }, {\n    key: \"min\",\n    value: function min(limit) {\n      Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n      return this._test('min', limit, function (value, state, options) {\n        if (value.length >= limit) {\n          return value;\n        }\n\n        return this.createError('binary.min', {\n          limit: limit,\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"max\",\n    value: function max(limit) {\n      Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n      return this._test('max', limit, function (value, state, options) {\n        if (value.length <= limit) {\n          return value;\n        }\n\n        return this.createError('binary.max', {\n          limit: limit,\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"length\",\n    value: function length(limit) {\n      Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n      return this._test('length', limit, function (value, state, options) {\n        if (value.length === limit) {\n          return value;\n        }\n\n        return this.createError('binary.length', {\n          limit: limit,\n          value: value\n        }, state, options);\n      });\n    }\n  }]);\n\n  return _class;\n}(Any);\n\nmodule.exports = new internals.Binary();","map":{"version":3,"sources":["/home/agatha/open/node_modules/@hapi/joi/lib/types/binary/index.js"],"names":["Hoek","require","Any","internals","Binary","_type","value","state","options","result","convert","Buffer","from","_flags","encoding","e","errors","isBuffer","createError","assert","isEncoding","obj","clone","limit","Number","isSafeInteger","_test","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\n\n\nconst internals = {};\n\n\ninternals.Binary = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'binary';\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            try {\n                result.value = Buffer.from(value, this._flags.encoding);\n            }\n            catch (e) { }\n        }\n\n        result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);\n        return result;\n    }\n\n    encoding(encoding) {\n\n        Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n\n        if (this._flags.encoding === encoding) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.encoding = encoding;\n        return obj;\n    }\n\n    min(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('min', limit, function (value, state, options) {\n\n            if (value.length >= limit) {\n                return value;\n            }\n\n            return this.createError('binary.min', { limit, value }, state, options);\n        });\n    }\n\n    max(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('max', limit, function (value, state, options) {\n\n            if (value.length <= limit) {\n                return value;\n            }\n\n            return this.createError('binary.max', { limit, value }, state, options);\n        });\n    }\n\n    length(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit) && limit >= 0, 'limit must be a positive integer');\n\n        return this._test('length', limit, function (value, state, options) {\n\n            if (value.length === limit) {\n                return value;\n            }\n\n            return this.createError('binary.length', { limit, value }, state, options);\n        });\n    }\n\n};\n\n\nmodule.exports = new internals.Binary();\n"]},"metadata":{},"sourceType":"script"}