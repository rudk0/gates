{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst fse = require('fs-extra');\n\nconst upath = require('upath');\n\nconst bundle = require('./bundle');\n\nconst errors = require('./errors');\n\nconst populateSWTemplate = require('./populate-sw-template');\n\nmodule.exports = async ({\n  babelPresetEnvTargets,\n  cacheId,\n  cleanupOutdatedCaches,\n  clientsClaim,\n  directoryIndex,\n  disableDevLogs,\n  ignoreURLParametersMatching,\n  importScripts,\n  inlineWorkboxRuntime,\n  manifestEntries,\n  mode,\n  navigateFallback,\n  navigateFallbackDenylist,\n  navigateFallbackAllowlist,\n  navigationPreload,\n  offlineGoogleAnalytics,\n  runtimeCaching,\n  skipWaiting,\n  sourcemap,\n  swDest\n}) => {\n  const outputDir = upath.dirname(swDest);\n\n  try {\n    await fse.mkdirp(outputDir);\n  } catch (error) {\n    throw new Error(`${errors['unable-to-make-sw-directory']}. ` + `'${error.message}'`);\n  }\n\n  const unbundledCode = populateSWTemplate({\n    cacheId,\n    cleanupOutdatedCaches,\n    clientsClaim,\n    directoryIndex,\n    disableDevLogs,\n    ignoreURLParametersMatching,\n    importScripts,\n    manifestEntries,\n    navigateFallback,\n    navigateFallbackDenylist,\n    navigateFallbackAllowlist,\n    navigationPreload,\n    offlineGoogleAnalytics,\n    runtimeCaching,\n    skipWaiting\n  });\n\n  try {\n    const files = await bundle({\n      babelPresetEnvTargets,\n      inlineWorkboxRuntime,\n      mode,\n      sourcemap,\n      swDest,\n      unbundledCode\n    });\n    const filePaths = [];\n\n    for (const file of files) {\n      const filePath = upath.resolve(file.name);\n      filePaths.push(filePath);\n      await fse.writeFile(filePath, file.contents);\n    }\n\n    return filePaths;\n  } catch (error) {\n    if (error.code === 'EISDIR') {\n      // See https://github.com/GoogleChrome/workbox/issues/612\n      throw new Error(errors['sw-write-failure-directory']);\n    }\n\n    throw new Error(`${errors['sw-write-failure']} '${error.message}'`);\n  }\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/write-sw-using-default-template.js"],"names":["fse","require","upath","bundle","errors","populateSWTemplate","module","exports","babelPresetEnvTargets","cacheId","cleanupOutdatedCaches","clientsClaim","directoryIndex","disableDevLogs","ignoreURLParametersMatching","importScripts","inlineWorkboxRuntime","manifestEntries","mode","navigateFallback","navigateFallbackDenylist","navigateFallbackAllowlist","navigationPreload","offlineGoogleAnalytics","runtimeCaching","skipWaiting","sourcemap","swDest","outputDir","dirname","mkdirp","error","Error","message","unbundledCode","files","filePaths","file","filePath","resolve","name","push","writeFile","contents","code"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMI,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAlC;;AAEAK,MAAM,CAACC,OAAP,GAAiB,OAAO;AACtBC,EAAAA,qBADsB;AAEtBC,EAAAA,OAFsB;AAGtBC,EAAAA,qBAHsB;AAItBC,EAAAA,YAJsB;AAKtBC,EAAAA,cALsB;AAMtBC,EAAAA,cANsB;AAOtBC,EAAAA,2BAPsB;AAQtBC,EAAAA,aARsB;AAStBC,EAAAA,oBATsB;AAUtBC,EAAAA,eAVsB;AAWtBC,EAAAA,IAXsB;AAYtBC,EAAAA,gBAZsB;AAatBC,EAAAA,wBAbsB;AActBC,EAAAA,yBAdsB;AAetBC,EAAAA,iBAfsB;AAgBtBC,EAAAA,sBAhBsB;AAiBtBC,EAAAA,cAjBsB;AAkBtBC,EAAAA,WAlBsB;AAmBtBC,EAAAA,SAnBsB;AAoBtBC,EAAAA;AApBsB,CAAP,KAqBX;AACJ,QAAMC,SAAS,GAAG1B,KAAK,CAAC2B,OAAN,CAAcF,MAAd,CAAlB;;AAEA,MAAI;AACF,UAAM3B,GAAG,CAAC8B,MAAJ,CAAWF,SAAX,CAAN;AACD,GAFD,CAEE,OAAOG,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,GAAE5B,MAAM,CAAC,6BAAD,CAAgC,IAAzC,GAAgD,IAAG2B,KAAK,CAACE,OAAQ,GAA3E,CAAN;AACD;;AAED,QAAMC,aAAa,GAAG7B,kBAAkB,CAAC;AACvCI,IAAAA,OADuC;AAEvCC,IAAAA,qBAFuC;AAGvCC,IAAAA,YAHuC;AAIvCC,IAAAA,cAJuC;AAKvCC,IAAAA,cALuC;AAMvCC,IAAAA,2BANuC;AAOvCC,IAAAA,aAPuC;AAQvCE,IAAAA,eARuC;AASvCE,IAAAA,gBATuC;AAUvCC,IAAAA,wBAVuC;AAWvCC,IAAAA,yBAXuC;AAYvCC,IAAAA,iBAZuC;AAavCC,IAAAA,sBAbuC;AAcvCC,IAAAA,cAduC;AAevCC,IAAAA;AAfuC,GAAD,CAAxC;;AAkBA,MAAI;AACF,UAAMU,KAAK,GAAG,MAAMhC,MAAM,CAAC;AACzBK,MAAAA,qBADyB;AAEzBQ,MAAAA,oBAFyB;AAGzBE,MAAAA,IAHyB;AAIzBQ,MAAAA,SAJyB;AAKzBC,MAAAA,MALyB;AAMzBO,MAAAA;AANyB,KAAD,CAA1B;AAQA,UAAME,SAAS,GAAG,EAAlB;;AAEA,SAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,QAAQ,GAAGpC,KAAK,CAACqC,OAAN,CAAcF,IAAI,CAACG,IAAnB,CAAjB;AACAJ,MAAAA,SAAS,CAACK,IAAV,CAAeH,QAAf;AACA,YAAMtC,GAAG,CAAC0C,SAAJ,CAAcJ,QAAd,EAAwBD,IAAI,CAACM,QAA7B,CAAN;AACD;;AAED,WAAOP,SAAP;AACD,GAlBD,CAkBE,OAAOL,KAAP,EAAc;AACd,QAAIA,KAAK,CAACa,IAAN,KAAe,QAAnB,EAA6B;AAC3B;AACA,YAAM,IAAIZ,KAAJ,CAAU5B,MAAM,CAAC,4BAAD,CAAhB,CAAN;AACD;;AAED,UAAM,IAAI4B,KAAJ,CAAW,GAAE5B,MAAM,CAAC,kBAAD,CAAqB,KAAI2B,KAAK,CAACE,OAAQ,GAA1D,CAAN;AACD;AACF,CA1ED","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst fse = require('fs-extra');\n\nconst upath = require('upath');\n\nconst bundle = require('./bundle');\n\nconst errors = require('./errors');\n\nconst populateSWTemplate = require('./populate-sw-template');\n\nmodule.exports = async ({\n  babelPresetEnvTargets,\n  cacheId,\n  cleanupOutdatedCaches,\n  clientsClaim,\n  directoryIndex,\n  disableDevLogs,\n  ignoreURLParametersMatching,\n  importScripts,\n  inlineWorkboxRuntime,\n  manifestEntries,\n  mode,\n  navigateFallback,\n  navigateFallbackDenylist,\n  navigateFallbackAllowlist,\n  navigationPreload,\n  offlineGoogleAnalytics,\n  runtimeCaching,\n  skipWaiting,\n  sourcemap,\n  swDest\n}) => {\n  const outputDir = upath.dirname(swDest);\n\n  try {\n    await fse.mkdirp(outputDir);\n  } catch (error) {\n    throw new Error(`${errors['unable-to-make-sw-directory']}. ` + `'${error.message}'`);\n  }\n\n  const unbundledCode = populateSWTemplate({\n    cacheId,\n    cleanupOutdatedCaches,\n    clientsClaim,\n    directoryIndex,\n    disableDevLogs,\n    ignoreURLParametersMatching,\n    importScripts,\n    manifestEntries,\n    navigateFallback,\n    navigateFallbackDenylist,\n    navigateFallbackAllowlist,\n    navigationPreload,\n    offlineGoogleAnalytics,\n    runtimeCaching,\n    skipWaiting\n  });\n\n  try {\n    const files = await bundle({\n      babelPresetEnvTargets,\n      inlineWorkboxRuntime,\n      mode,\n      sourcemap,\n      swDest,\n      unbundledCode\n    });\n    const filePaths = [];\n\n    for (const file of files) {\n      const filePath = upath.resolve(file.name);\n      filePaths.push(filePath);\n      await fse.writeFile(filePath, file.contents);\n    }\n\n    return filePaths;\n  } catch (error) {\n    if (error.code === 'EISDIR') {\n      // See https://github.com/GoogleChrome/workbox/issues/612\n      throw new Error(errors['sw-write-failure-directory']);\n    }\n\n    throw new Error(`${errors['sw-write-failure']} '${error.message}'`);\n  }\n};"]},"metadata":{},"sourceType":"script"}