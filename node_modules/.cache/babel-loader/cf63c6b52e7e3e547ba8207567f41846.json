{"ast":null,"code":"'use strict';\n\nvar isRegexp = require('is-regexp');\n\nvar isObj = require('is-obj');\n\nvar getOwnEnumPropSymbols = require('get-own-enumerable-property-symbols').default;\n\nmodule.exports = function (val, opts, pad) {\n  var seen = [];\n  return function stringify(val, opts, pad) {\n    opts = opts || {};\n    opts.indent = opts.indent || '\\t';\n    pad = pad || '';\n    var tokens;\n\n    if (opts.inlineCharacterLimit === undefined) {\n      tokens = {\n        newLine: '\\n',\n        newLineOrSpace: '\\n',\n        pad: pad,\n        indent: pad + opts.indent\n      };\n    } else {\n      tokens = {\n        newLine: '@@__STRINGIFY_OBJECT_NEW_LINE__@@',\n        newLineOrSpace: '@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@',\n        pad: '@@__STRINGIFY_OBJECT_PAD__@@',\n        indent: '@@__STRINGIFY_OBJECT_INDENT__@@'\n      };\n    }\n\n    var expandWhiteSpace = function expandWhiteSpace(string) {\n      if (opts.inlineCharacterLimit === undefined) {\n        return string;\n      }\n\n      var oneLined = string.replace(new RegExp(tokens.newLine, 'g'), '').replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ').replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n\n      if (oneLined.length <= opts.inlineCharacterLimit) {\n        return oneLined;\n      }\n\n      return string.replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n').replace(new RegExp(tokens.pad, 'g'), pad).replace(new RegExp(tokens.indent, 'g'), pad + opts.indent);\n    };\n\n    if (seen.indexOf(val) !== -1) {\n      return '\"[Circular]\"';\n    }\n\n    if (val === null || val === undefined || typeof val === 'number' || typeof val === 'boolean' || typeof val === 'function' || typeof val === 'symbol' || isRegexp(val)) {\n      return String(val);\n    }\n\n    if (val instanceof Date) {\n      return \"new Date('\".concat(val.toISOString(), \"')\");\n    }\n\n    if (Array.isArray(val)) {\n      if (val.length === 0) {\n        return '[]';\n      }\n\n      seen.push(val);\n      var ret = '[' + tokens.newLine + val.map(function (el, i) {\n        var eol = val.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n        var value = stringify(el, opts, pad + opts.indent);\n\n        if (opts.transform) {\n          value = opts.transform(val, i, value);\n        }\n\n        return tokens.indent + value + eol;\n      }).join('') + tokens.pad + ']';\n      seen.pop();\n      return expandWhiteSpace(ret);\n    }\n\n    if (isObj(val)) {\n      var objKeys = Object.keys(val).concat(getOwnEnumPropSymbols(val));\n\n      if (opts.filter) {\n        objKeys = objKeys.filter(function (el) {\n          return opts.filter(val, el);\n        });\n      }\n\n      if (objKeys.length === 0) {\n        return '{}';\n      }\n\n      seen.push(val);\n\n      var _ret = '{' + tokens.newLine + objKeys.map(function (el, i) {\n        var eol = objKeys.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n        var isSymbol = typeof el === 'symbol';\n        var isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el);\n        var key = isSymbol || isClassic ? el : stringify(el, opts);\n        var value = stringify(val[el], opts, pad + opts.indent);\n\n        if (opts.transform) {\n          value = opts.transform(val, el, value);\n        }\n\n        return tokens.indent + String(key) + ': ' + value + eol;\n      }).join('') + tokens.pad + '}';\n\n      seen.pop();\n      return expandWhiteSpace(_ret);\n    }\n\n    val = String(val).replace(/[\\r\\n]/g, function (x) {\n      return x === '\\n' ? '\\\\n' : '\\\\r';\n    });\n\n    if (opts.singleQuotes === false) {\n      val = val.replace(/\"/g, '\\\\\"');\n      return \"\\\"\".concat(val, \"\\\"\");\n    }\n\n    val = val.replace(/\\\\?'/g, '\\\\\\'');\n    return \"'\".concat(val, \"'\");\n  }(val, opts, pad);\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/stringify-object/index.js"],"names":["isRegexp","require","isObj","getOwnEnumPropSymbols","default","module","exports","val","opts","pad","seen","stringify","indent","tokens","inlineCharacterLimit","undefined","newLine","newLineOrSpace","expandWhiteSpace","string","oneLined","replace","RegExp","length","indexOf","String","Date","toISOString","Array","isArray","push","ret","map","el","i","eol","value","transform","join","pop","objKeys","Object","keys","concat","filter","isSymbol","isClassic","test","key","x","singleQuotes"],"mappings":"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","sourcesContent":["'use strict';\nconst isRegexp = require('is-regexp');\nconst isObj = require('is-obj');\nconst getOwnEnumPropSymbols = require('get-own-enumerable-property-symbols').default;\n\nmodule.exports = (val, opts, pad) => {\n\tconst seen = [];\n\n\treturn (function stringify(val, opts, pad) {\n\t\topts = opts || {};\n\t\topts.indent = opts.indent || '\\t';\n\t\tpad = pad || '';\n\n\t\tlet tokens;\n\n\t\tif (opts.inlineCharacterLimit === undefined) {\n\t\t\ttokens = {\n\t\t\t\tnewLine: '\\n',\n\t\t\t\tnewLineOrSpace: '\\n',\n\t\t\t\tpad,\n\t\t\t\tindent: pad + opts.indent\n\t\t\t};\n\t\t} else {\n\t\t\ttokens = {\n\t\t\t\tnewLine: '@@__STRINGIFY_OBJECT_NEW_LINE__@@',\n\t\t\t\tnewLineOrSpace: '@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@',\n\t\t\t\tpad: '@@__STRINGIFY_OBJECT_PAD__@@',\n\t\t\t\tindent: '@@__STRINGIFY_OBJECT_INDENT__@@'\n\t\t\t};\n\t\t}\n\n\t\tconst expandWhiteSpace = string => {\n\t\t\tif (opts.inlineCharacterLimit === undefined) {\n\t\t\t\treturn string;\n\t\t\t}\n\n\t\t\tconst oneLined = string\n\t\t\t\t.replace(new RegExp(tokens.newLine, 'g'), '')\n\t\t\t\t.replace(new RegExp(tokens.newLineOrSpace, 'g'), ' ')\n\t\t\t\t.replace(new RegExp(tokens.pad + '|' + tokens.indent, 'g'), '');\n\n\t\t\tif (oneLined.length <= opts.inlineCharacterLimit) {\n\t\t\t\treturn oneLined;\n\t\t\t}\n\n\t\t\treturn string\n\t\t\t\t.replace(new RegExp(tokens.newLine + '|' + tokens.newLineOrSpace, 'g'), '\\n')\n\t\t\t\t.replace(new RegExp(tokens.pad, 'g'), pad)\n\t\t\t\t.replace(new RegExp(tokens.indent, 'g'), pad + opts.indent);\n\t\t};\n\n\t\tif (seen.indexOf(val) !== -1) {\n\t\t\treturn '\"[Circular]\"';\n\t\t}\n\n\t\tif (val === null ||\n\t\t\tval === undefined ||\n\t\t\ttypeof val === 'number' ||\n\t\t\ttypeof val === 'boolean' ||\n\t\t\ttypeof val === 'function' ||\n\t\t\ttypeof val === 'symbol' ||\n\t\t\tisRegexp(val)) {\n\t\t\treturn String(val);\n\t\t}\n\n\t\tif (val instanceof Date) {\n\t\t\treturn `new Date('${val.toISOString()}')`;\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tif (val.length === 0) {\n\t\t\t\treturn '[]';\n\t\t\t}\n\n\t\t\tseen.push(val);\n\n\t\t\tconst ret = '[' + tokens.newLine + val.map((el, i) => {\n\t\t\t\tconst eol = val.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n\t\t\t\tlet value = stringify(el, opts, pad + opts.indent);\n\t\t\t\tif (opts.transform) {\n\t\t\t\t\tvalue = opts.transform(val, i, value);\n\t\t\t\t}\n\t\t\t\treturn tokens.indent + value + eol;\n\t\t\t}).join('') + tokens.pad + ']';\n\n\t\t\tseen.pop();\n\n\t\t\treturn expandWhiteSpace(ret);\n\t\t}\n\n\t\tif (isObj(val)) {\n\t\t\tlet objKeys = Object.keys(val).concat(getOwnEnumPropSymbols(val));\n\n\t\t\tif (opts.filter) {\n\t\t\t\tobjKeys = objKeys.filter(el => opts.filter(val, el));\n\t\t\t}\n\n\t\t\tif (objKeys.length === 0) {\n\t\t\t\treturn '{}';\n\t\t\t}\n\n\t\t\tseen.push(val);\n\n\t\t\tconst ret = '{' + tokens.newLine + objKeys.map((el, i) => {\n\t\t\t\tconst eol = objKeys.length - 1 === i ? tokens.newLine : ',' + tokens.newLineOrSpace;\n\t\t\t\tconst isSymbol = typeof el === 'symbol';\n\t\t\t\tconst isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el);\n\t\t\t\tconst key = isSymbol || isClassic ? el : stringify(el, opts);\n\t\t\t\tlet value = stringify(val[el], opts, pad + opts.indent);\n\t\t\t\tif (opts.transform) {\n\t\t\t\t\tvalue = opts.transform(val, el, value);\n\t\t\t\t}\n\t\t\t\treturn tokens.indent + String(key) + ': ' + value + eol;\n\t\t\t}).join('') + tokens.pad + '}';\n\n\t\t\tseen.pop();\n\n\t\t\treturn expandWhiteSpace(ret);\n\t\t}\n\n\t\tval = String(val).replace(/[\\r\\n]/g, x => x === '\\n' ? '\\\\n' : '\\\\r');\n\n\t\tif (opts.singleQuotes === false) {\n\t\t\tval = val.replace(/\"/g, '\\\\\"');\n\t\t\treturn `\"${val}\"`;\n\t\t}\n\n\t\tval = val.replace(/\\\\?'/g, '\\\\\\'');\n\t\treturn `'${val}'`;\n\t})(val, opts, pad);\n};\n"]},"metadata":{},"sourceType":"script"}