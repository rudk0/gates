{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar ncp = require('./ncp');\n\nvar mkdir = require('../mkdirs');\n\nvar pathExists = require('../path-exists').pathExists;\n\nfunction copy(src, dest, options, callback) {\n  if (typeof options === 'function' && !callback) {\n    callback = options;\n    options = {};\n  } else if (typeof options === 'function' || options instanceof RegExp) {\n    options = {\n      filter: options\n    };\n  }\n\n  callback = callback || function () {};\n\n  options = options || {}; // Warn about using preserveTimestamps on 32-bit node:\n\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(\"fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\\n    see https://github.com/jprichardson/node-fs-extra/issues/269\");\n  } // don't allow src and dest to be the same\n\n\n  var basePath = process.cwd();\n  var currentPath = path.resolve(basePath, src);\n  var targetPath = path.resolve(basePath, dest);\n  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'));\n  fs.lstat(src, function (err, stats) {\n    if (err) return callback(err);\n    var dir = null;\n\n    if (stats.isDirectory()) {\n      var parts = dest.split(path.sep);\n      parts.pop();\n      dir = parts.join(path.sep);\n    } else {\n      dir = path.dirname(dest);\n    }\n\n    pathExists(dir, function (err, dirExists) {\n      if (err) return callback(err);\n      if (dirExists) return ncp(src, dest, options, callback);\n      mkdir.mkdirs(dir, function (err) {\n        if (err) return callback(err);\n        ncp(src, dest, options, callback);\n      });\n    });\n  });\n}\n\nmodule.exports = copy;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/node_modules/fs-extra/lib/copy/copy.js"],"names":["fs","require","path","ncp","mkdir","pathExists","copy","src","dest","options","callback","RegExp","filter","preserveTimestamps","process","arch","console","warn","basePath","cwd","currentPath","resolve","targetPath","Error","lstat","err","stats","dir","isDirectory","parts","split","sep","pop","join","dirname","dirExists","mkdirs","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,WAAD,CAArB;;AACA,IAAMI,UAAU,GAAGJ,OAAO,CAAC,gBAAD,CAAP,CAA0BI,UAA7C;;AAEA,SAASC,IAAT,CAAeC,GAAf,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAI,OAAOD,OAAP,KAAmB,UAAnB,IAAiC,CAACC,QAAtC,EAAgD;AAC9CA,IAAAA,QAAQ,GAAGD,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD,GAHD,MAGO,IAAI,OAAOA,OAAP,KAAmB,UAAnB,IAAiCA,OAAO,YAAYE,MAAxD,EAAgE;AACrEF,IAAAA,OAAO,GAAG;AAACG,MAAAA,MAAM,EAAEH;AAAT,KAAV;AACD;;AACDC,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,YAAY,CAAE,CAArC;;AACAD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAR2C,CAU3C;;AACA,MAAIA,OAAO,CAACI,kBAAR,IAA8BC,OAAO,CAACC,IAAR,KAAiB,MAAnD,EAA2D;AACzDC,IAAAA,OAAO,CAACC,IAAR;AAED,GAd0C,CAgB3C;;;AACA,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAR,EAAjB;AACA,MAAMC,WAAW,GAAGlB,IAAI,CAACmB,OAAL,CAAaH,QAAb,EAAuBX,GAAvB,CAApB;AACA,MAAMe,UAAU,GAAGpB,IAAI,CAACmB,OAAL,CAAaH,QAAb,EAAuBV,IAAvB,CAAnB;AACA,MAAIY,WAAW,KAAKE,UAApB,EAAgC,OAAOZ,QAAQ,CAAC,IAAIa,KAAJ,CAAU,8CAAV,CAAD,CAAf;AAEhCvB,EAAAA,EAAE,CAACwB,KAAH,CAASjB,GAAT,EAAc,UAACkB,GAAD,EAAMC,KAAN,EAAgB;AAC5B,QAAID,GAAJ,EAAS,OAAOf,QAAQ,CAACe,GAAD,CAAf;AAET,QAAIE,GAAG,GAAG,IAAV;;AACA,QAAID,KAAK,CAACE,WAAN,EAAJ,EAAyB;AACvB,UAAMC,KAAK,GAAGrB,IAAI,CAACsB,KAAL,CAAW5B,IAAI,CAAC6B,GAAhB,CAAd;AACAF,MAAAA,KAAK,CAACG,GAAN;AACAL,MAAAA,GAAG,GAAGE,KAAK,CAACI,IAAN,CAAW/B,IAAI,CAAC6B,GAAhB,CAAN;AACD,KAJD,MAIO;AACLJ,MAAAA,GAAG,GAAGzB,IAAI,CAACgC,OAAL,CAAa1B,IAAb,CAAN;AACD;;AAEDH,IAAAA,UAAU,CAACsB,GAAD,EAAM,UAACF,GAAD,EAAMU,SAAN,EAAoB;AAClC,UAAIV,GAAJ,EAAS,OAAOf,QAAQ,CAACe,GAAD,CAAf;AACT,UAAIU,SAAJ,EAAe,OAAOhC,GAAG,CAACI,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,QAArB,CAAV;AACfN,MAAAA,KAAK,CAACgC,MAAN,CAAaT,GAAb,EAAkB,UAAAF,GAAG,EAAI;AACvB,YAAIA,GAAJ,EAAS,OAAOf,QAAQ,CAACe,GAAD,CAAf;AACTtB,QAAAA,GAAG,CAACI,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAqBC,QAArB,CAAH;AACD,OAHD;AAID,KAPS,CAAV;AAQD,GApBD;AAqBD;;AAED2B,MAAM,CAACC,OAAP,GAAiBhC,IAAjB","sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst ncp = require('./ncp')\nconst mkdir = require('../mkdirs')\nconst pathExists = require('../path-exists').pathExists\n\nfunction copy (src, dest, options, callback) {\n  if (typeof options === 'function' && !callback) {\n    callback = options\n    options = {}\n  } else if (typeof options === 'function' || options instanceof RegExp) {\n    options = {filter: options}\n  }\n  callback = callback || function () {}\n  options = options || {}\n\n  // Warn about using preserveTimestamps on 32-bit node:\n  if (options.preserveTimestamps && process.arch === 'ia32') {\n    console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\\n\n    see https://github.com/jprichardson/node-fs-extra/issues/269`)\n  }\n\n  // don't allow src and dest to be the same\n  const basePath = process.cwd()\n  const currentPath = path.resolve(basePath, src)\n  const targetPath = path.resolve(basePath, dest)\n  if (currentPath === targetPath) return callback(new Error('Source and destination must not be the same.'))\n\n  fs.lstat(src, (err, stats) => {\n    if (err) return callback(err)\n\n    let dir = null\n    if (stats.isDirectory()) {\n      const parts = dest.split(path.sep)\n      parts.pop()\n      dir = parts.join(path.sep)\n    } else {\n      dir = path.dirname(dest)\n    }\n\n    pathExists(dir, (err, dirExists) => {\n      if (err) return callback(err)\n      if (dirExists) return ncp(src, dest, options, callback)\n      mkdir.mkdirs(dir, err => {\n        if (err) return callback(err)\n        ncp(src, dest, options, callback)\n      })\n    })\n  })\n}\n\nmodule.exports = copy\n"]},"metadata":{},"sourceType":"script"}