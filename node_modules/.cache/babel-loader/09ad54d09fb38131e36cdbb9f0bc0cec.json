{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst template = require('lodash.template');\n\nconst swTemplate = require('../templates/sw-template');\n\nconst errors = require('./errors');\n\nconst ModuleRegistry = require('./module-registry');\n\nconst runtimeCachingConverter = require('./runtime-caching-converter');\n\nconst stringifyWithoutComments = require('./stringify-without-comments');\n\nmodule.exports = ({\n  cacheId,\n  cleanupOutdatedCaches,\n  clientsClaim,\n  directoryIndex,\n  disableDevLogs,\n  ignoreURLParametersMatching,\n  importScripts,\n  manifestEntries = [],\n  navigateFallback,\n  navigateFallbackDenylist,\n  navigateFallbackAllowlist,\n  navigationPreload,\n  offlineGoogleAnalytics,\n  runtimeCaching = [],\n  skipWaiting\n}) => {\n  // There needs to be at least something to precache, or else runtime caching.\n  if (!(manifestEntries.length > 0 || runtimeCaching.length > 0)) {\n    throw new Error(errors['no-manifest-entries-or-runtime-caching']);\n  } // These are all options that can be passed to the precacheAndRoute() method.\n\n\n  const precacheOptions = {\n    directoryIndex,\n    // An array of RegExp objects can't be serialized by JSON.stringify()'s\n    // default behavior, so if it's given, convert it manually.\n    ignoreURLParametersMatching: ignoreURLParametersMatching ? [] : undefined\n  };\n  let precacheOptionsString = JSON.stringify(precacheOptions, null, 2);\n\n  if (ignoreURLParametersMatching) {\n    precacheOptionsString = precacheOptionsString.replace(`\"ignoreURLParametersMatching\": []`, `\"ignoreURLParametersMatching\": [` + `${ignoreURLParametersMatching.join(', ')}]`);\n  }\n\n  let offlineAnalyticsConfigString;\n\n  if (offlineGoogleAnalytics) {\n    // If offlineGoogleAnalytics is a truthy value, we need to convert it to the\n    // format expected by the template.\n    offlineAnalyticsConfigString = offlineGoogleAnalytics === true ? // If it's the literal value true, then use an empty config string.\n    '{}' : // Otherwise, convert the config object into a more complex string, taking\n    // into account the fact that functions might need to be stringified.\n    stringifyWithoutComments(offlineGoogleAnalytics);\n  }\n\n  const moduleRegistry = new ModuleRegistry();\n\n  try {\n    const populatedTemplate = template(swTemplate)({\n      cacheId,\n      cleanupOutdatedCaches,\n      clientsClaim,\n      disableDevLogs,\n      importScripts,\n      manifestEntries,\n      navigateFallback,\n      navigateFallbackDenylist,\n      navigateFallbackAllowlist,\n      navigationPreload,\n      offlineAnalyticsConfigString,\n      precacheOptionsString,\n      runtimeCaching: runtimeCachingConverter(moduleRegistry, runtimeCaching),\n      skipWaiting,\n      use: moduleRegistry.use.bind(moduleRegistry)\n    });\n    const workboxImportStatements = moduleRegistry.getImportStatements(); // We need the import statements for all of the Workbox runtime modules\n    // prepended, so that the correct bundle can be created.\n\n    return workboxImportStatements.join('\\n') + populatedTemplate;\n  } catch (error) {\n    throw new Error(`${errors['populating-sw-tmpl-failed']} '${error.message}'`);\n  }\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/populate-sw-template.js"],"names":["template","require","swTemplate","errors","ModuleRegistry","runtimeCachingConverter","stringifyWithoutComments","module","exports","cacheId","cleanupOutdatedCaches","clientsClaim","directoryIndex","disableDevLogs","ignoreURLParametersMatching","importScripts","manifestEntries","navigateFallback","navigateFallbackDenylist","navigateFallbackAllowlist","navigationPreload","offlineGoogleAnalytics","runtimeCaching","skipWaiting","length","Error","precacheOptions","undefined","precacheOptionsString","JSON","stringify","replace","join","offlineAnalyticsConfigString","moduleRegistry","populatedTemplate","use","bind","workboxImportStatements","getImportStatements","error","message"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst template = require('lodash.template');\n\nconst swTemplate = require('../templates/sw-template');\n\nconst errors = require('./errors');\n\nconst ModuleRegistry = require('./module-registry');\n\nconst runtimeCachingConverter = require('./runtime-caching-converter');\n\nconst stringifyWithoutComments = require('./stringify-without-comments');\n\nmodule.exports = ({\n  cacheId,\n  cleanupOutdatedCaches,\n  clientsClaim,\n  directoryIndex,\n  disableDevLogs,\n  ignoreURLParametersMatching,\n  importScripts,\n  manifestEntries = [],\n  navigateFallback,\n  navigateFallbackDenylist,\n  navigateFallbackAllowlist,\n  navigationPreload,\n  offlineGoogleAnalytics,\n  runtimeCaching = [],\n  skipWaiting\n}) => {\n  // There needs to be at least something to precache, or else runtime caching.\n  if (!(manifestEntries.length > 0 || runtimeCaching.length > 0)) {\n    throw new Error(errors['no-manifest-entries-or-runtime-caching']);\n  } // These are all options that can be passed to the precacheAndRoute() method.\n\n\n  const precacheOptions = {\n    directoryIndex,\n    // An array of RegExp objects can't be serialized by JSON.stringify()'s\n    // default behavior, so if it's given, convert it manually.\n    ignoreURLParametersMatching: ignoreURLParametersMatching ? [] : undefined\n  };\n  let precacheOptionsString = JSON.stringify(precacheOptions, null, 2);\n\n  if (ignoreURLParametersMatching) {\n    precacheOptionsString = precacheOptionsString.replace(`\"ignoreURLParametersMatching\": []`, `\"ignoreURLParametersMatching\": [` + `${ignoreURLParametersMatching.join(', ')}]`);\n  }\n\n  let offlineAnalyticsConfigString;\n\n  if (offlineGoogleAnalytics) {\n    // If offlineGoogleAnalytics is a truthy value, we need to convert it to the\n    // format expected by the template.\n    offlineAnalyticsConfigString = offlineGoogleAnalytics === true ? // If it's the literal value true, then use an empty config string.\n    '{}' : // Otherwise, convert the config object into a more complex string, taking\n    // into account the fact that functions might need to be stringified.\n    stringifyWithoutComments(offlineGoogleAnalytics);\n  }\n\n  const moduleRegistry = new ModuleRegistry();\n\n  try {\n    const populatedTemplate = template(swTemplate)({\n      cacheId,\n      cleanupOutdatedCaches,\n      clientsClaim,\n      disableDevLogs,\n      importScripts,\n      manifestEntries,\n      navigateFallback,\n      navigateFallbackDenylist,\n      navigateFallbackAllowlist,\n      navigationPreload,\n      offlineAnalyticsConfigString,\n      precacheOptionsString,\n      runtimeCaching: runtimeCachingConverter(moduleRegistry, runtimeCaching),\n      skipWaiting,\n      use: moduleRegistry.use.bind(moduleRegistry)\n    });\n    const workboxImportStatements = moduleRegistry.getImportStatements(); // We need the import statements for all of the Workbox runtime modules\n    // prepended, so that the correct bundle can be created.\n\n    return workboxImportStatements.join('\\n') + populatedTemplate;\n  } catch (error) {\n    throw new Error(`${errors['populating-sw-tmpl-failed']} '${error.message}'`);\n  }\n};"]},"metadata":{},"sourceType":"script"}