{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst ol = require('common-tags').oneLine;\n\nconst upath = require('upath');\n/**\n * Class for keeping track of which Workbox modules are used by the generated\n * service worker script.\n *\n * @private\n */\n\n\nclass ModuleRegistry {\n  /**\n   * @private\n   */\n  constructor() {\n    this.modulesUsed = new Map();\n  }\n  /**\n   * @return {Array<string>} A list of all of the import statements that are\n   * needed for the modules being used.\n   * @private\n   */\n\n\n  getImportStatements() {\n    const workboxModuleImports = [];\n\n    for (const [localName, {\n      moduleName,\n      pkg\n    }] of this.modulesUsed) {\n      // By default require.resolve returns the resolved path of the 'main'\n      // field, which might be deeper than the package root. To work around\n      // this, we can find the package's root by resolving its package.json and\n      // strip the '/package.json' from the resolved path.\n      const pkgJsonPath = require.resolve(`${pkg}/package.json`);\n\n      const pkgRoot = upath.dirname(pkgJsonPath);\n      const importStatement = ol`import {${moduleName} as ${localName}} from\n        '${pkgRoot}/${moduleName}.mjs';`;\n      workboxModuleImports.push(importStatement);\n    }\n\n    return workboxModuleImports;\n  }\n  /**\n   * @param {string} pkg The workbox package that the module belongs to.\n   * @param {string} moduleName The name of the module to import.\n   * @return {string} The local variable name that corresponds to that module.\n   * @private\n   */\n\n\n  getLocalName(pkg, moduleName) {\n    return `${pkg.replace(/-/g, '_')}_${moduleName}`;\n  }\n  /**\n   * @param {string} pkg The workbox package that the module belongs to.\n   * @param {string} moduleName The name of the module to import.\n   * @return {string} The local variable name that corresponds to that module.\n   * @private\n   */\n\n\n  use(pkg, moduleName) {\n    const localName = this.getLocalName(pkg, moduleName);\n    this.modulesUsed.set(localName, {\n      moduleName,\n      pkg\n    });\n    return localName;\n  }\n\n}\n\nmodule.exports = ModuleRegistry;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/module-registry.js"],"names":["ol","require","oneLine","upath","ModuleRegistry","constructor","modulesUsed","Map","getImportStatements","workboxModuleImports","localName","moduleName","pkg","pkgJsonPath","resolve","pkgRoot","dirname","importStatement","push","getLocalName","replace","use","set","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,EAAE,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBC,OAAlC;;AAEA,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;AACA;;;;;;;;AAQA,MAAMG,cAAN,CAAqB;AACnB;;;AAGAC,EAAAA,WAAW,GAAG;AACZ,SAAKC,WAAL,GAAmB,IAAIC,GAAJ,EAAnB;AACD;AACD;;;;;;;AAOAC,EAAAA,mBAAmB,GAAG;AACpB,UAAMC,oBAAoB,GAAG,EAA7B;;AAEA,SAAK,MAAM,CAACC,SAAD,EAAY;AACrBC,MAAAA,UADqB;AAErBC,MAAAA;AAFqB,KAAZ,CAAX,IAGM,KAAKN,WAHX,EAGwB;AACtB;AACA;AACA;AACA;AACA,YAAMO,WAAW,GAAGZ,OAAO,CAACa,OAAR,CAAiB,GAAEF,GAAI,eAAvB,CAApB;;AAEA,YAAMG,OAAO,GAAGZ,KAAK,CAACa,OAAN,CAAcH,WAAd,CAAhB;AACA,YAAMI,eAAe,GAAGjB,EAAG,WAAUW,UAAW,OAAMD,SAAU;WAC3DK,OAAQ,IAAGJ,UAAW,QAD3B;AAEAF,MAAAA,oBAAoB,CAACS,IAArB,CAA0BD,eAA1B;AACD;;AAED,WAAOR,oBAAP;AACD;AACD;;;;;;;;AAQAU,EAAAA,YAAY,CAACP,GAAD,EAAMD,UAAN,EAAkB;AAC5B,WAAQ,GAAEC,GAAG,CAACQ,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAuB,IAAGT,UAAW,EAA/C;AACD;AACD;;;;;;;;AAQAU,EAAAA,GAAG,CAACT,GAAD,EAAMD,UAAN,EAAkB;AACnB,UAAMD,SAAS,GAAG,KAAKS,YAAL,CAAkBP,GAAlB,EAAuBD,UAAvB,CAAlB;AACA,SAAKL,WAAL,CAAiBgB,GAAjB,CAAqBZ,SAArB,EAAgC;AAC9BC,MAAAA,UAD8B;AAE9BC,MAAAA;AAF8B,KAAhC;AAIA,WAAOF,SAAP;AACD;;AA7DkB;;AAiErBa,MAAM,CAACC,OAAP,GAAiBpB,cAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst ol = require('common-tags').oneLine;\n\nconst upath = require('upath');\n/**\n * Class for keeping track of which Workbox modules are used by the generated\n * service worker script.\n *\n * @private\n */\n\n\nclass ModuleRegistry {\n  /**\n   * @private\n   */\n  constructor() {\n    this.modulesUsed = new Map();\n  }\n  /**\n   * @return {Array<string>} A list of all of the import statements that are\n   * needed for the modules being used.\n   * @private\n   */\n\n\n  getImportStatements() {\n    const workboxModuleImports = [];\n\n    for (const [localName, {\n      moduleName,\n      pkg\n    }] of this.modulesUsed) {\n      // By default require.resolve returns the resolved path of the 'main'\n      // field, which might be deeper than the package root. To work around\n      // this, we can find the package's root by resolving its package.json and\n      // strip the '/package.json' from the resolved path.\n      const pkgJsonPath = require.resolve(`${pkg}/package.json`);\n\n      const pkgRoot = upath.dirname(pkgJsonPath);\n      const importStatement = ol`import {${moduleName} as ${localName}} from\n        '${pkgRoot}/${moduleName}.mjs';`;\n      workboxModuleImports.push(importStatement);\n    }\n\n    return workboxModuleImports;\n  }\n  /**\n   * @param {string} pkg The workbox package that the module belongs to.\n   * @param {string} moduleName The name of the module to import.\n   * @return {string} The local variable name that corresponds to that module.\n   * @private\n   */\n\n\n  getLocalName(pkg, moduleName) {\n    return `${pkg.replace(/-/g, '_')}_${moduleName}`;\n  }\n  /**\n   * @param {string} pkg The workbox package that the module belongs to.\n   * @param {string} moduleName The name of the module to import.\n   * @return {string} The local variable name that corresponds to that module.\n   * @private\n   */\n\n\n  use(pkg, moduleName) {\n    const localName = this.getLocalName(pkg, moduleName);\n    this.modulesUsed.set(localName, {\n      moduleName,\n      pkg\n    });\n    return localName;\n  }\n\n}\n\nmodule.exports = ModuleRegistry;"]},"metadata":{},"sourceType":"script"}