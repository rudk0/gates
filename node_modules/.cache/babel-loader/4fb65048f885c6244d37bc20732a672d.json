{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst generateSWStringSchema = require('./options/generate-sw-string-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst populateSWTemplate = require('../lib/populate-sw-template');\n\nconst validate = require('./options/validate');\n/**\n * This method generates a service worker based on the configuration options\n * provided.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#generateswstring_mode).\n * @return {Promise<{swString: string, warnings: Array<string>}>} A promise that\n * resolves once the service worker template is populated. The `swString`\n * property contains a string representation of the full service worker code.\n * Any non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSWString(_x) {\n  return _generateSWString.apply(this, arguments);\n}\n\nfunction _generateSWString() {\n  _generateSWString = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, generateSWStringSchema);\n\n    const _ref = yield getFileManifestEntries(options),\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    const swString = yield populateSWTemplate(Object.assign({\n      manifestEntries\n    }, options)); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      swString,\n      warnings\n    };\n  });\n  return _generateSWString.apply(this, arguments);\n}\n\nmodule.exports = generateSWString;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/entry-points/generate-sw-string.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","checkForDeprecatedOptions","generateSWStringSchema","getFileManifestEntries","populateSWTemplate","validate","generateSWString","_x","_generateSWString","apply","arguments","default","config","deprecationWarnings","options","_ref","manifestEntries","warnings","swString","Object","assign","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,kBAAkB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;AAEA;;;;;;;;;AAOA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,qCAAD,CAAzC;;AAEA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,qCAAD,CAAtC;;AAEA,MAAMI,sBAAsB,GAAGJ,OAAO,CAAC,kCAAD,CAAtC;;AAEA,MAAMK,kBAAkB,GAAGL,OAAO,CAAC,6BAAD,CAAlC;;AAEA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,oBAAD,CAAxB;AACA;;;;;;;;;;;;;;;AAeA,SAASO,gBAAT,CAA0BC,EAA1B,EAA8B;AAC5B,SAAOC,iBAAiB,CAACC,KAAlB,CAAwB,IAAxB,EAA8BC,SAA9B,CAAP;AACD;;AAED,SAASF,iBAAT,GAA6B;AAC3BA,EAAAA,iBAAiB,GAAG,CAAC,GAAGR,kBAAkB,CAACW,OAAvB,EAAgC,WAAWC,MAAX,EAAmB;AACrE;AACA;AACA,UAAMC,mBAAmB,GAAGZ,yBAAyB,CAACW,MAAD,CAArD;AACA,UAAME,OAAO,GAAGT,QAAQ,CAACO,MAAD,EAASV,sBAAT,CAAxB;;AAEA,UAAMa,IAAI,GAAG,MAAMZ,sBAAsB,CAACW,OAAD,CAAzC;AAAA,UACME,eAAe,GAAGD,IAAI,CAACC,eAD7B;AAAA,UAEMC,QAAQ,GAAGF,IAAI,CAACE,QAFtB;;AAIA,UAAMC,QAAQ,GAAG,MAAMd,kBAAkB,CAACe,MAAM,CAACC,MAAP,CAAc;AACtDJ,MAAAA;AADsD,KAAd,EAEvCF,OAFuC,CAAD,CAAzC,CAVqE,CAYvD;;AAEdG,IAAAA,QAAQ,CAACI,IAAT,CAAc,GAAGR,mBAAjB;AACA,WAAO;AACLK,MAAAA,QADK;AAELD,MAAAA;AAFK,KAAP;AAID,GAnBmB,CAApB;AAoBA,SAAOT,iBAAiB,CAACC,KAAlB,CAAwB,IAAxB,EAA8BC,SAA9B,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBjB,gBAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst generateSWStringSchema = require('./options/generate-sw-string-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst populateSWTemplate = require('../lib/populate-sw-template');\n\nconst validate = require('./options/validate');\n/**\n * This method generates a service worker based on the configuration options\n * provided.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#generateswstring_mode).\n * @return {Promise<{swString: string, warnings: Array<string>}>} A promise that\n * resolves once the service worker template is populated. The `swString`\n * property contains a string representation of the full service worker code.\n * Any non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSWString(_x) {\n  return _generateSWString.apply(this, arguments);\n}\n\nfunction _generateSWString() {\n  _generateSWString = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, generateSWStringSchema);\n\n    const _ref = yield getFileManifestEntries(options),\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    const swString = yield populateSWTemplate(Object.assign({\n      manifestEntries\n    }, options)); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      swString,\n      warnings\n    };\n  });\n  return _generateSWString.apply(this, arguments);\n}\n\nmodule.exports = generateSWString;"]},"metadata":{},"sourceType":"script"}