{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logUsagePolyfills = exports.logEntryPolyfills = exports.logPluginOrPolyfill = void 0;\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nconst wordEnds = size => {\n  return size > 1 ? \"s\" : \"\";\n};\n\nconst logPluginOrPolyfill = (item, targetVersions, list) => {\n  const filteredList = (0, _helperCompilationTargets.getInclusionReasons)(item, targetVersions, list);\n  const formattedTargets = JSON.stringify(filteredList).replace(/,/g, \", \").replace(/^\\{\"/, '{ \"').replace(/\"\\}$/, '\" }');\n  console.log(`  ${item} ${formattedTargets}`);\n};\n\nexports.logPluginOrPolyfill = logPluginOrPolyfill;\n\nconst logEntryPolyfills = (polyfillName, importPolyfillIncluded, polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!importPolyfillIncluded) {\n    console.log(`\\n[${filename}] Import of ${polyfillName} was not found.`);\n    return;\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your targets, polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Replaced ${polyfillName} entries with the following polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logEntryPolyfills = logEntryPolyfills;\n\nconst logUsagePolyfills = (polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your code and targets, core-js polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Added following core-js polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logUsagePolyfills = logUsagePolyfills;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-env/lib/debug.js"],"names":["Object","defineProperty","exports","value","logUsagePolyfills","logEntryPolyfills","logPluginOrPolyfill","_helperCompilationTargets","require","wordEnds","size","item","targetVersions","list","filteredList","getInclusionReasons","formattedTargets","JSON","stringify","replace","console","log","polyfillName","importPolyfillIncluded","polyfills","filename","polyfillTargets","allBuiltInsList","process","env","BABEL_ENV","polyfill"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logUsagePolyfills = exports.logEntryPolyfills = exports.logPluginOrPolyfill = void 0;\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nconst wordEnds = size => {\n  return size > 1 ? \"s\" : \"\";\n};\n\nconst logPluginOrPolyfill = (item, targetVersions, list) => {\n  const filteredList = (0, _helperCompilationTargets.getInclusionReasons)(item, targetVersions, list);\n  const formattedTargets = JSON.stringify(filteredList).replace(/,/g, \", \").replace(/^\\{\"/, '{ \"').replace(/\"\\}$/, '\" }');\n  console.log(`  ${item} ${formattedTargets}`);\n};\n\nexports.logPluginOrPolyfill = logPluginOrPolyfill;\n\nconst logEntryPolyfills = (polyfillName, importPolyfillIncluded, polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!importPolyfillIncluded) {\n    console.log(`\\n[${filename}] Import of ${polyfillName} was not found.`);\n    return;\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your targets, polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Replaced ${polyfillName} entries with the following polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logEntryPolyfills = logEntryPolyfills;\n\nconst logUsagePolyfills = (polyfills, filename, polyfillTargets, allBuiltInsList) => {\n  if (process.env.BABEL_ENV === \"test\") {\n    filename = filename.replace(/\\\\/g, \"/\");\n  }\n\n  if (!polyfills.size) {\n    console.log(`\\n[${filename}] Based on your code and targets, core-js polyfills were not added.`);\n    return;\n  }\n\n  console.log(`\\n[${filename}] Added following core-js polyfill${wordEnds(polyfills.size)}:`);\n\n  for (const polyfill of polyfills) {\n    logPluginOrPolyfill(polyfill, polyfillTargets, allBuiltInsList);\n  }\n};\n\nexports.logUsagePolyfills = logUsagePolyfills;"]},"metadata":{},"sourceType":"script"}