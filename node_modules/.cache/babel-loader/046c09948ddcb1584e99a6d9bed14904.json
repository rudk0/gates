{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = _default;\n/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\n\nfunction _default({\n  types: t\n}) {\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return; // ignore non-block-scoped bindings:\n\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope; // ignore parent bindings (note: impossible due to let/const?)\n\n          if (!scope.hasOwnBinding(name)) continue; // check if shadowed within the nearest function/program boundary\n\n          while (scope = scope.parent) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      }\n\n    }\n  };\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-modules/lib/plugins/transform-safari-block-shadowing/index.js"],"names":["exports","__esModule","default","_default","types","t","name","visitor","VariableDeclarator","path","kind","parent","block","scope","isFunction","isProgram","bindings","getOuterBindingIdentifiers","node","id","Object","keys","hasOwnBinding","rename","module"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;AAEA;;;;;AAIA,SAASA,QAAT,CAAkB;AAChBC,EAAAA,KAAK,EAAEC;AADS,CAAlB,EAEG;AACD,SAAO;AACLC,IAAAA,IAAI,EAAE,kCADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,kBAAkB,CAACC,IAAD,EAAO;AACvB;AACA,cAAMC,IAAI,GAAGD,IAAI,CAACE,MAAL,CAAYD,IAAzB;AACA,YAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,OAA/B,EAAwC,OAHjB,CAGyB;;AAEhD,cAAME,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWD,KAAzB;AACA,YAAIP,CAAC,CAACS,UAAF,CAAaF,KAAb,KAAuBP,CAAC,CAACU,SAAF,CAAYH,KAAZ,CAA3B,EAA+C;AAC/C,cAAMI,QAAQ,GAAGX,CAAC,CAACY,0BAAF,CAA6BR,IAAI,CAACS,IAAL,CAAUC,EAAvC,CAAjB;;AAEA,aAAK,MAAMb,IAAX,IAAmBc,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAnB,EAA0C;AACxC,cAAIH,KAAK,GAAGJ,IAAI,CAACI,KAAjB,CADwC,CAChB;;AAExB,cAAI,CAACA,KAAK,CAACS,aAAN,CAAoBhB,IAApB,CAAL,EAAgC,SAHQ,CAGE;;AAE1C,iBAAOO,KAAK,GAAGA,KAAK,CAACF,MAArB,EAA6B;AAC3B,gBAAIE,KAAK,CAACS,aAAN,CAAoBhB,IAApB,CAAJ,EAA+B;AAC7BG,cAAAA,IAAI,CAACI,KAAL,CAAWU,MAAX,CAAkBjB,IAAlB;AACA;AACD;;AAED,gBAAID,CAAC,CAACS,UAAF,CAAaD,KAAK,CAACD,KAAnB,KAA6BP,CAAC,CAACU,SAAF,CAAYF,KAAK,CAACD,KAAlB,CAAjC,EAA2D;AACzD;AACD;AACF;AACF;AACF;;AA1BM;AAFJ,GAAP;AAgCD;;AAEDY,MAAM,CAACxB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = _default;\n\n/**\n * Fixes block-shadowed let/const bindings in Safari 10/11.\n * https://kangax.github.io/compat-table/es6/#test-let_scope_shadow_resolution\n */\nfunction _default({\n  types: t\n}) {\n  return {\n    name: \"transform-safari-block-shadowing\",\n    visitor: {\n      VariableDeclarator(path) {\n        // the issue only affects let and const bindings:\n        const kind = path.parent.kind;\n        if (kind !== \"let\" && kind !== \"const\") return; // ignore non-block-scoped bindings:\n\n        const block = path.scope.block;\n        if (t.isFunction(block) || t.isProgram(block)) return;\n        const bindings = t.getOuterBindingIdentifiers(path.node.id);\n\n        for (const name of Object.keys(bindings)) {\n          let scope = path.scope; // ignore parent bindings (note: impossible due to let/const?)\n\n          if (!scope.hasOwnBinding(name)) continue; // check if shadowed within the nearest function/program boundary\n\n          while (scope = scope.parent) {\n            if (scope.hasOwnBinding(name)) {\n              path.scope.rename(name);\n              break;\n            }\n\n            if (t.isFunction(scope.block) || t.isProgram(scope.block)) {\n              break;\n            }\n          }\n        }\n      }\n\n    }\n  };\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}