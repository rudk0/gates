{"ast":null,"code":"function _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\n\n\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n\n        return endResult;\n      }\n\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;","map":{"version":3,"sources":["../../src/stripIndentTransformer/stripIndentTransformer.js"],"names":["stripIndentTransformer","type","onEndResult","match","endResult","indent","el","regexp"],"mappings":";;;;;;;;;;;AAAA;;;;;;;AAKA,IAAMA,sBAAAA,GAAyB,SAAzBA,sBAAyB,GAAA;AAAA,MAACC,IAAD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA;AAAA,SAAuB;AACpDC,IAAAA,WADoD,EAAA,SAAA,WAAA,CAAA,SAAA,EAC7B;AACrB,UAAID,IAAAA,KAAJ,SAAA,EAAwB;AACtB;AACA,YAAME,KAAAA,GAAQC,SAAAA,CAAAA,KAAAA,CAAd,mBAAcA,CAAd;AACA,YAAMC,MAAAA,GAASF,KAAAA,IAAS,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,IAAA,EAAA,kBAAA,CAAY,KAAA,CAAA,GAAA,CAAU,UAAA,EAAA,EAAA;AAAA,iBAAMG,EAAAA,CAAN,MAAA;AAA9C,SAAoC,CAAZ,CAAA,CAAxB;;AACA,YAAA,MAAA,EAAY;AACV,cAAMC,MAAAA,GAAS,IAAA,MAAA,CAAA,QAAA,MAAA,GAAA,GAAA,EAAf,IAAe,CAAf;AACA,iBAAOH,SAAAA,CAAAA,OAAAA,CAAAA,MAAAA,EAAP,EAAOA,CAAP;AACD;;AACD,eAAA,SAAA;AACD;;AACD,UAAIH,IAAAA,KAAJ,KAAA,EAAoB;AAClB;AACA,eAAOG,SAAAA,CAAAA,OAAAA,CAAAA,aAAAA,EAAP,EAAOA,CAAP;AACD;;AACD,YAAM,IAAA,KAAA,CAAA,mBAAN,IAAM,CAAN;AACD;AAjBmD,GAAvB;AAA/B,CAAA;;AAoBA,eAAA,sBAAA","sourcesContent":["/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nconst stripIndentTransformer = (type = 'initial') => ({\n  onEndResult(endResult) {\n    if (type === 'initial') {\n      // remove the shortest leading indentation from each line\n      const match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n      const indent = match && Math.min(...match.map(el => el.length));\n      if (indent) {\n        const regexp = new RegExp(`^.{${indent}}`, 'gm');\n        return endResult.replace(regexp, '');\n      }\n      return endResult;\n    }\n    if (type === 'all') {\n      // remove all indentation from each line\n      return endResult.replace(/^[^\\S\\n]+/gm, '');\n    }\n    throw new Error(`Unknown type: ${type}`);\n  },\n});\n\nexport default stripIndentTransformer;\n"]},"metadata":{},"sourceType":"module"}