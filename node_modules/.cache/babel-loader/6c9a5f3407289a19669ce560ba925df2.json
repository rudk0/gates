{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nvar path = require('path');\n\nvar cdnUtils = require('../lib/cdn-utils');\n\nvar checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nvar copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\n\nvar generateSWSchema = require('./options/generate-sw-schema');\n\nvar getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nvar validate = require('./options/validate');\n\nvar writeServiceWorkerUsingDefaultTemplate = require('../lib/write-sw-using-default-template');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSW(_x) {\n  return _generateSW.apply(this, arguments);\n}\n\nfunction _generateSW() {\n  _generateSW = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var deprecationWarnings, options, destDirectory, cdnURL, workboxDirectoryName, workboxSWPkg, workboxSWFilename, _ref, count, size, manifestEntries, warnings;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // This check needs to be done before validation, since the deprecated options\n            // will be renamed.\n            deprecationWarnings = checkForDeprecatedOptions(config);\n            options = validate(config, generateSWSchema);\n            destDirectory = path.dirname(options.swDest); // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n\n            if (!(options.importWorkboxFrom === 'cdn')) {\n              _context.next = 8;\n              break;\n            }\n\n            cdnURL = cdnUtils.getModuleURL('workbox-sw');\n            options.workboxSWImport = cdnURL;\n            _context.next = 17;\n            break;\n\n          case 8:\n            if (!(options.importWorkboxFrom === 'local')) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 11;\n            return copyWorkboxLibraries(destDirectory);\n\n          case 11:\n            workboxDirectoryName = _context.sent;\n            // The Workbox library files should not be precached, since they're cached\n            // automatically by virtue of being used with importScripts().\n            options.globIgnores = [\"**/\".concat(workboxDirectoryName, \"/*.+(js|mjs)*\")].concat(options.globIgnores || []);\n            workboxSWPkg = require(\"workbox-sw/package.json\");\n            workboxSWFilename = path.basename(workboxSWPkg.main);\n            options.workboxSWImport = \"\".concat(workboxDirectoryName, \"/\").concat(workboxSWFilename);\n            options.modulePathPrefix = workboxDirectoryName;\n\n          case 17:\n            _context.next = 19;\n            return getFileManifestEntries(options);\n\n          case 19:\n            _ref = _context.sent;\n            count = _ref.count;\n            size = _ref.size;\n            manifestEntries = _ref.manifestEntries;\n            warnings = _ref.warnings;\n            _context.next = 26;\n            return writeServiceWorkerUsingDefaultTemplate(Object.assign({\n              manifestEntries: manifestEntries\n            }, options));\n\n          case 26:\n            // Add in any deprecation warnings.\n            warnings.push.apply(warnings, _toConsumableArray(deprecationWarnings));\n            return _context.abrupt(\"return\", {\n              count: count,\n              size: size,\n              warnings: warnings\n            });\n\n          case 28:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _generateSW.apply(this, arguments);\n}\n\nmodule.exports = generateSW;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/entry-points/generate-sw.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","path","cdnUtils","checkForDeprecatedOptions","copyWorkboxLibraries","generateSWSchema","getFileManifestEntries","validate","writeServiceWorkerUsingDefaultTemplate","generateSW","_x","_generateSW","apply","arguments","default","config","deprecationWarnings","options","destDirectory","dirname","swDest","importWorkboxFrom","cdnURL","getModuleURL","workboxSWImport","workboxDirectoryName","globIgnores","concat","workboxSWPkg","workboxSWFilename","basename","main","modulePathPrefix","_ref","count","size","manifestEntries","warnings","Object","assign","push","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst path = require('path');\n\nconst cdnUtils = require('../lib/cdn-utils');\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst copyWorkboxLibraries = require('../lib/copy-workbox-libraries');\n\nconst generateSWSchema = require('./options/generate-sw-schema');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst validate = require('./options/validate');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('../lib/write-sw-using-default-template');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_generatesw_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction generateSW(_x) {\n  return _generateSW.apply(this, arguments);\n}\n\nfunction _generateSW() {\n  _generateSW = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, generateSWSchema);\n    const destDirectory = path.dirname(options.swDest); // Do nothing if importWorkboxFrom is set to 'disabled'. Otherwise, check:\n\n    if (options.importWorkboxFrom === 'cdn') {\n      const cdnURL = cdnUtils.getModuleURL('workbox-sw');\n      options.workboxSWImport = cdnURL;\n    } else if (options.importWorkboxFrom === 'local') {\n      // Copy over the dev + prod version of all of the core libraries.\n      const workboxDirectoryName = yield copyWorkboxLibraries(destDirectory); // The Workbox library files should not be precached, since they're cached\n      // automatically by virtue of being used with importScripts().\n\n      options.globIgnores = [`**/${workboxDirectoryName}/*.+(js|mjs)*`].concat(options.globIgnores || []);\n\n      const workboxSWPkg = require(`workbox-sw/package.json`);\n\n      const workboxSWFilename = path.basename(workboxSWPkg.main);\n      options.workboxSWImport = `${workboxDirectoryName}/${workboxSWFilename}`;\n      options.modulePathPrefix = workboxDirectoryName;\n    }\n\n    const _ref = yield getFileManifestEntries(options),\n          count = _ref.count,\n          size = _ref.size,\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    yield writeServiceWorkerUsingDefaultTemplate(Object.assign({\n      manifestEntries\n    }, options)); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      count,\n      size,\n      warnings\n    };\n  });\n  return _generateSW.apply(this, arguments);\n}\n\nmodule.exports = generateSW;"]},"metadata":{},"sourceType":"script"}