{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst {\n  SourceMapConsumer,\n  SourceMapGenerator\n} = require('source-map');\n/**\n * Adapted from https://github.com/nsams/sourcemap-aware-replace, with modern\n * JavaScript updates, along with additional properties copied from originalMap.\n *\n * @param {Object} options\n * @param {string} options.jsFilename The name for the file whose contents\n * correspond to originalSource.\n * @param {Object} options.originalMap The sourcemap for originalSource,\n * prior to any replacements.\n * @param {string} options.originalSource The source code, prior to any\n * replacements.\n * @param {string} options.replaceString A string to swap in for searchString.\n * @param {string} options.searchString A string in originalSource to replace.\n * Only the first occurrence will be replaced.\n * @return {{source: string, map: string}} An object containing both\n * originalSource with the replacement applied, and the modified originalMap.\n *\n * @private\n */\n\n\nasync function replaceAndUpdateSourceMap({\n  jsFilename,\n  originalMap,\n  originalSource,\n  replaceString,\n  searchString\n}) {\n  const generator = new SourceMapGenerator({\n    file: jsFilename\n  });\n  const consumer = await new SourceMapConsumer(originalMap);\n  let pos;\n  let src = originalSource;\n  const replacements = [];\n  let lineNum = 0;\n  let filePos = 0;\n  const lines = src.split('\\n');\n\n  for (let line of lines) {\n    lineNum++;\n    let searchPos = 0;\n\n    while ((pos = line.indexOf(searchString, searchPos)) !== -1) {\n      src = src.substring(0, filePos + pos) + replaceString + src.substring(filePos + pos + searchString.length);\n      line = line.substring(0, pos) + replaceString + line.substring(pos + searchString.length);\n      replacements.push({\n        line: lineNum,\n        column: pos\n      });\n      searchPos = pos + replaceString.length;\n    }\n\n    filePos += line.length + 1;\n  }\n\n  replacements.reverse();\n  consumer.eachMapping(mapping => {\n    for (const replacement of replacements) {\n      if (replacement.line == mapping.generatedLine && mapping.generatedColumn > replacement.column) {\n        const offset = searchString.length - replaceString.length;\n        mapping.generatedColumn -= offset;\n      }\n    }\n\n    if (mapping.source) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        },\n        original: {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        },\n        source: mapping.source\n      };\n      return generator.addMapping(newMapping);\n    }\n\n    return mapping;\n  });\n  consumer.destroy();\n  const updatedSourceMap = Object.assign(JSON.parse(generator.toString()), {\n    names: originalMap.names,\n    sourceRoot: originalMap.sourceRoot,\n    sources: originalMap.sources,\n    sourcesContent: originalMap.sourcesContent\n  });\n  return {\n    map: JSON.stringify(updatedSourceMap),\n    source: src\n  };\n}\n\nmodule.exports = replaceAndUpdateSourceMap;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/replace-and-update-source-map.js"],"names":["SourceMapConsumer","SourceMapGenerator","require","replaceAndUpdateSourceMap","jsFilename","originalMap","originalSource","replaceString","searchString","generator","file","consumer","pos","src","replacements","lineNum","filePos","lines","split","line","searchPos","indexOf","substring","length","push","column","reverse","eachMapping","mapping","replacement","generatedLine","generatedColumn","offset","source","newMapping","generated","original","originalLine","originalColumn","addMapping","destroy","updatedSourceMap","Object","assign","JSON","parse","toString","names","sourceRoot","sources","sourcesContent","map","stringify","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst {\n  SourceMapConsumer,\n  SourceMapGenerator\n} = require('source-map');\n/**\n * Adapted from https://github.com/nsams/sourcemap-aware-replace, with modern\n * JavaScript updates, along with additional properties copied from originalMap.\n *\n * @param {Object} options\n * @param {string} options.jsFilename The name for the file whose contents\n * correspond to originalSource.\n * @param {Object} options.originalMap The sourcemap for originalSource,\n * prior to any replacements.\n * @param {string} options.originalSource The source code, prior to any\n * replacements.\n * @param {string} options.replaceString A string to swap in for searchString.\n * @param {string} options.searchString A string in originalSource to replace.\n * Only the first occurrence will be replaced.\n * @return {{source: string, map: string}} An object containing both\n * originalSource with the replacement applied, and the modified originalMap.\n *\n * @private\n */\n\n\nasync function replaceAndUpdateSourceMap({\n  jsFilename,\n  originalMap,\n  originalSource,\n  replaceString,\n  searchString\n}) {\n  const generator = new SourceMapGenerator({\n    file: jsFilename\n  });\n  const consumer = await new SourceMapConsumer(originalMap);\n  let pos;\n  let src = originalSource;\n  const replacements = [];\n  let lineNum = 0;\n  let filePos = 0;\n  const lines = src.split('\\n');\n\n  for (let line of lines) {\n    lineNum++;\n    let searchPos = 0;\n\n    while ((pos = line.indexOf(searchString, searchPos)) !== -1) {\n      src = src.substring(0, filePos + pos) + replaceString + src.substring(filePos + pos + searchString.length);\n      line = line.substring(0, pos) + replaceString + line.substring(pos + searchString.length);\n      replacements.push({\n        line: lineNum,\n        column: pos\n      });\n      searchPos = pos + replaceString.length;\n    }\n\n    filePos += line.length + 1;\n  }\n\n  replacements.reverse();\n  consumer.eachMapping(mapping => {\n    for (const replacement of replacements) {\n      if (replacement.line == mapping.generatedLine && mapping.generatedColumn > replacement.column) {\n        const offset = searchString.length - replaceString.length;\n        mapping.generatedColumn -= offset;\n      }\n    }\n\n    if (mapping.source) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        },\n        original: {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        },\n        source: mapping.source\n      };\n      return generator.addMapping(newMapping);\n    }\n\n    return mapping;\n  });\n  consumer.destroy();\n  const updatedSourceMap = Object.assign(JSON.parse(generator.toString()), {\n    names: originalMap.names,\n    sourceRoot: originalMap.sourceRoot,\n    sources: originalMap.sources,\n    sourcesContent: originalMap.sourcesContent\n  });\n  return {\n    map: JSON.stringify(updatedSourceMap),\n    source: src\n  };\n}\n\nmodule.exports = replaceAndUpdateSourceMap;"]},"metadata":{},"sourceType":"script"}