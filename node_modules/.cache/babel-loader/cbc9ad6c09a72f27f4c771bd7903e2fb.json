{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst assert = require('assert');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst filterFiles = require('./filter-files');\n\nconst getCompositeDetails = require('./get-composite-details');\n\nconst getFileDetails = require('./get-file-details');\n\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2.default)(function* ({\n    dontCacheBustURLsMatching,\n    globDirectory,\n    globFollow,\n    globIgnores,\n    globPatterns,\n    globStrict,\n    manifestTransforms,\n    maximumFileSizeToCacheInBytes,\n    modifyURLPrefix,\n    swDest,\n    templatedURLs\n  }) {\n    const warnings = []; // Initialize to an empty array so that we can still pass something to\n    // filterFiles() and get a normalized output.\n\n    let fileDetails = [];\n    const fileSet = new Set();\n\n    if (globDirectory) {\n      if (swDest) {\n        // Ensure that we ignore the SW file we're eventually writing to disk.\n        globIgnores.push(`**/${path.basename(swDest)}`);\n      }\n\n      try {\n        fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n          const globbedFileDetails = getFileDetails({\n            globDirectory,\n            globFollow,\n            globIgnores,\n            globPattern,\n            globStrict\n          });\n          globbedFileDetails.forEach(fileDetails => {\n            if (fileSet.has(fileDetails.file)) {\n              return;\n            }\n\n            fileSet.add(fileDetails.file);\n            accumulated.push(fileDetails);\n          });\n          return accumulated;\n        }, []);\n      } catch (error) {\n        // If there's an exception thrown while globbing, then report\n        // it back as a warning, and don't consider it fatal.\n        warnings.push(error.message);\n      }\n    }\n\n    if (templatedURLs) {\n      var _arr = Object.keys(templatedURLs);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        let url = _arr[_i];\n        assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n        const dependencies = templatedURLs[url];\n\n        if (Array.isArray(dependencies)) {\n          const details = dependencies.reduce((previous, globPattern) => {\n            try {\n              const globbedFileDetails = getFileDetails({\n                globDirectory,\n                globFollow,\n                globIgnores,\n                globPattern,\n                globStrict\n              });\n              return previous.concat(globbedFileDetails);\n            } catch (error) {\n              const debugObj = {};\n              debugObj[url] = dependencies;\n              throw new Error(`${errors['bad-template-urls-asset']} ` + `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` + error);\n            }\n          }, []);\n          fileDetails.push(getCompositeDetails(url, details));\n        } else if (typeof dependencies === 'string') {\n          fileDetails.push(getStringDetails(url, dependencies));\n        }\n      }\n    }\n\n    const filteredFiles = filterFiles({\n      fileDetails,\n      maximumFileSizeToCacheInBytes,\n      modifyURLPrefix,\n      dontCacheBustURLsMatching,\n      manifestTransforms\n    });\n\n    if (warnings.length > 0) {\n      filteredFiles.warnings.push(...warnings);\n    }\n\n    return filteredFiles;\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-file-manifest-entries.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","assert","path","errors","filterFiles","getCompositeDetails","getFileDetails","getStringDetails","module","exports","_ref","default","dontCacheBustURLsMatching","globDirectory","globFollow","globIgnores","globPatterns","globStrict","manifestTransforms","maximumFileSizeToCacheInBytes","modifyURLPrefix","swDest","templatedURLs","warnings","fileDetails","fileSet","Set","push","basename","reduce","accumulated","globPattern","globbedFileDetails","forEach","has","file","add","error","message","_arr","Object","keys","_i","length","url","dependencies","Array","isArray","details","previous","concat","debugObj","Error","JSON","stringify","filteredFiles","_x","apply","arguments"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst assert = require('assert');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst filterFiles = require('./filter-files');\n\nconst getCompositeDetails = require('./get-composite-details');\n\nconst getFileDetails = require('./get-file-details');\n\nconst getStringDetails = require('./get-string-details');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _ref = (0, _asyncToGenerator2.default)(function* ({\n    dontCacheBustURLsMatching,\n    globDirectory,\n    globFollow,\n    globIgnores,\n    globPatterns,\n    globStrict,\n    manifestTransforms,\n    maximumFileSizeToCacheInBytes,\n    modifyURLPrefix,\n    swDest,\n    templatedURLs\n  }) {\n    const warnings = []; // Initialize to an empty array so that we can still pass something to\n    // filterFiles() and get a normalized output.\n\n    let fileDetails = [];\n    const fileSet = new Set();\n\n    if (globDirectory) {\n      if (swDest) {\n        // Ensure that we ignore the SW file we're eventually writing to disk.\n        globIgnores.push(`**/${path.basename(swDest)}`);\n      }\n\n      try {\n        fileDetails = globPatterns.reduce((accumulated, globPattern) => {\n          const globbedFileDetails = getFileDetails({\n            globDirectory,\n            globFollow,\n            globIgnores,\n            globPattern,\n            globStrict\n          });\n          globbedFileDetails.forEach(fileDetails => {\n            if (fileSet.has(fileDetails.file)) {\n              return;\n            }\n\n            fileSet.add(fileDetails.file);\n            accumulated.push(fileDetails);\n          });\n          return accumulated;\n        }, []);\n      } catch (error) {\n        // If there's an exception thrown while globbing, then report\n        // it back as a warning, and don't consider it fatal.\n        warnings.push(error.message);\n      }\n    }\n\n    if (templatedURLs) {\n      var _arr = Object.keys(templatedURLs);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        let url = _arr[_i];\n        assert(!fileSet.has(url), errors['templated-url-matches-glob']);\n        const dependencies = templatedURLs[url];\n\n        if (Array.isArray(dependencies)) {\n          const details = dependencies.reduce((previous, globPattern) => {\n            try {\n              const globbedFileDetails = getFileDetails({\n                globDirectory,\n                globFollow,\n                globIgnores,\n                globPattern,\n                globStrict\n              });\n              return previous.concat(globbedFileDetails);\n            } catch (error) {\n              const debugObj = {};\n              debugObj[url] = dependencies;\n              throw new Error(`${errors['bad-template-urls-asset']} ` + `'${globPattern}' from '${JSON.stringify(debugObj)}':\\n` + error);\n            }\n          }, []);\n          fileDetails.push(getCompositeDetails(url, details));\n        } else if (typeof dependencies === 'string') {\n          fileDetails.push(getStringDetails(url, dependencies));\n        }\n      }\n    }\n\n    const filteredFiles = filterFiles({\n      fileDetails,\n      maximumFileSizeToCacheInBytes,\n      modifyURLPrefix,\n      dontCacheBustURLsMatching,\n      manifestTransforms\n    });\n\n    if (warnings.length > 0) {\n      filteredFiles.warnings.push(...warnings);\n    }\n\n    return filteredFiles;\n  });\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();"]},"metadata":{},"sourceType":"script"}