{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst errors = require('./errors');\n\nconst additionalManifestEntriesTransform = require('./additional-manifest-entries-transform');\n\nconst maximumSizeTransform = require('./maximum-size-transform');\n\nconst modifyURLPrefixTransform = require('./modify-url-prefix-transform');\n\nconst noRevisionForURLsMatchingTransform = require('./no-revision-for-urls-matching-transform');\n/**\n * A `ManifestTransform` function can be used to modify the modify the `url` or\n * `revision` properties of some or all of the\n * {@link module:workbox-build.ManifestEntry|ManifestEntries} in the manifest.\n *\n * Deleting the `revision` property of an entry will cause\n * the corresponding `url` to be precached without cache-busting parameters\n * applied, which is to say, it implies that the URL itself contains\n * proper versioning info. If the `revision` property is present, it must be\n * set to a string.\n *\n * @example A transformation that prepended the origin of a CDN for any\n * URL starting with '/assets/' could be implemented as:\n *\n * const cdnTransform = async (manifestEntries) => {\n *   const manifest = manifestEntries.map(entry => {\n *     const cdnOrigin = 'https://example.com';\n *     if (entry.url.startsWith('/assets/')) {\n *       entry.url = cdnOrigin + entry.url;\n *     }\n *     return entry;\n *   });\n *   return {manifest, warnings: []};\n * };\n *\n * @example A transformation that nulls the revision field when the\n * URL contains an 8-character hash surrounded by '.', indicating that it\n * already contains revision information:\n *\n * const removeRevisionTransform = async (manifestEntries) => {\n *   const manifest = manifestEntries.map(entry => {\n *     const hashRegExp = /\\.\\w{8}\\./;\n *     if (entry.url.match(hashRegExp)) {\n *       entry.revision = null;\n *     }\n *     return entry;\n *   });\n *   return {manifest, warnings: []};\n * };\n *\n * @callback ManifestTransform\n * @param {Array<module:workbox-build.ManifestEntry>} manifestEntries The full\n * array of entries, prior to the current transformation.\n * @param {Object} [compilation] When used in the webpack plugins, this param\n * will be set to the current `compilation`.\n * @return {Promise<module:workbox-build.ManifestTransformResult>}\n * The array of entries with the transformation applied, and optionally, any\n * warnings that should be reported back to the build tool.\n *\n * @memberof module:workbox-build\n */\n\n\nmodule.exports = async ({\n  additionalManifestEntries,\n  dontCacheBustURLsMatching,\n  fileDetails,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  transformParam\n}) => {\n  let allWarnings = []; // Take the array of fileDetail objects and convert it into an array of\n  // {url, revision, size} objects, with \\ replaced with /.\n\n  const normalizedManifest = fileDetails.map(fileDetails => {\n    return {\n      url: fileDetails.file.replace(/\\\\/g, '/'),\n      revision: fileDetails.hash,\n      size: fileDetails.size\n    };\n  });\n  const transformsToApply = [];\n\n  if (maximumFileSizeToCacheInBytes) {\n    transformsToApply.push(maximumSizeTransform(maximumFileSizeToCacheInBytes));\n  }\n\n  if (modifyURLPrefix) {\n    transformsToApply.push(modifyURLPrefixTransform(modifyURLPrefix));\n  }\n\n  if (dontCacheBustURLsMatching) {\n    transformsToApply.push(noRevisionForURLsMatchingTransform(dontCacheBustURLsMatching));\n  } // Run any manifestTransforms functions second-to-last.\n\n\n  if (manifestTransforms) {\n    transformsToApply.push(...manifestTransforms);\n  } // Run additionalManifestEntriesTransform last.\n\n\n  if (additionalManifestEntries) {\n    transformsToApply.push(additionalManifestEntriesTransform(additionalManifestEntries));\n  }\n\n  let transformedManifest = normalizedManifest;\n\n  for (const transform of transformsToApply) {\n    const result = await transform(transformedManifest, transformParam);\n\n    if (!('manifest' in result)) {\n      throw new Error(errors['bad-manifest-transforms-return-value']);\n    }\n\n    transformedManifest = result.manifest;\n    allWarnings = allWarnings.concat(result.warnings || []);\n  } // Generate some metadata about the manifest before we clear out the size\n  // properties from each entry.\n\n\n  const count = transformedManifest.length;\n  let size = 0;\n\n  for (const manifestEntry of transformedManifest) {\n    size += manifestEntry.size || 0;\n    delete manifestEntry.size;\n  }\n\n  return {\n    count,\n    size,\n    manifestEntries: transformedManifest,\n    warnings: allWarnings\n  };\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/transform-manifest.js"],"names":["errors","require","additionalManifestEntriesTransform","maximumSizeTransform","modifyURLPrefixTransform","noRevisionForURLsMatchingTransform","module","exports","additionalManifestEntries","dontCacheBustURLsMatching","fileDetails","manifestTransforms","maximumFileSizeToCacheInBytes","modifyURLPrefix","transformParam","allWarnings","normalizedManifest","map","url","file","replace","revision","hash","size","transformsToApply","push","transformedManifest","transform","result","Error","manifest","concat","warnings","count","length","manifestEntry","manifestEntries"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMC,kCAAkC,GAAGD,OAAO,CAAC,yCAAD,CAAlD;;AAEA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,0BAAD,CAApC;;AAEA,MAAMG,wBAAwB,GAAGH,OAAO,CAAC,+BAAD,CAAxC;;AAEA,MAAMI,kCAAkC,GAAGJ,OAAO,CAAC,2CAAD,CAAlD;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDAK,MAAM,CAACC,OAAP,GAAiB,OAAO;AACtBC,EAAAA,yBADsB;AAEtBC,EAAAA,yBAFsB;AAGtBC,EAAAA,WAHsB;AAItBC,EAAAA,kBAJsB;AAKtBC,EAAAA,6BALsB;AAMtBC,EAAAA,eANsB;AAOtBC,EAAAA;AAPsB,CAAP,KAQX;AACJ,MAAIC,WAAW,GAAG,EAAlB,CADI,CACkB;AACtB;;AAEA,QAAMC,kBAAkB,GAAGN,WAAW,CAACO,GAAZ,CAAgBP,WAAW,IAAI;AACxD,WAAO;AACLQ,MAAAA,GAAG,EAAER,WAAW,CAACS,IAAZ,CAAiBC,OAAjB,CAAyB,KAAzB,EAAgC,GAAhC,CADA;AAELC,MAAAA,QAAQ,EAAEX,WAAW,CAACY,IAFjB;AAGLC,MAAAA,IAAI,EAAEb,WAAW,CAACa;AAHb,KAAP;AAKD,GAN0B,CAA3B;AAOA,QAAMC,iBAAiB,GAAG,EAA1B;;AAEA,MAAIZ,6BAAJ,EAAmC;AACjCY,IAAAA,iBAAiB,CAACC,IAAlB,CAAuBtB,oBAAoB,CAACS,6BAAD,CAA3C;AACD;;AAED,MAAIC,eAAJ,EAAqB;AACnBW,IAAAA,iBAAiB,CAACC,IAAlB,CAAuBrB,wBAAwB,CAACS,eAAD,CAA/C;AACD;;AAED,MAAIJ,yBAAJ,EAA+B;AAC7Be,IAAAA,iBAAiB,CAACC,IAAlB,CAAuBpB,kCAAkC,CAACI,yBAAD,CAAzD;AACD,GAvBG,CAuBF;;;AAGF,MAAIE,kBAAJ,EAAwB;AACtBa,IAAAA,iBAAiB,CAACC,IAAlB,CAAuB,GAAGd,kBAA1B;AACD,GA5BG,CA4BF;;;AAGF,MAAIH,yBAAJ,EAA+B;AAC7BgB,IAAAA,iBAAiB,CAACC,IAAlB,CAAuBvB,kCAAkC,CAACM,yBAAD,CAAzD;AACD;;AAED,MAAIkB,mBAAmB,GAAGV,kBAA1B;;AAEA,OAAK,MAAMW,SAAX,IAAwBH,iBAAxB,EAA2C;AACzC,UAAMI,MAAM,GAAG,MAAMD,SAAS,CAACD,mBAAD,EAAsBZ,cAAtB,CAA9B;;AAEA,QAAI,EAAE,cAAcc,MAAhB,CAAJ,EAA6B;AAC3B,YAAM,IAAIC,KAAJ,CAAU7B,MAAM,CAAC,sCAAD,CAAhB,CAAN;AACD;;AAED0B,IAAAA,mBAAmB,GAAGE,MAAM,CAACE,QAA7B;AACAf,IAAAA,WAAW,GAAGA,WAAW,CAACgB,MAAZ,CAAmBH,MAAM,CAACI,QAAP,IAAmB,EAAtC,CAAd;AACD,GA9CG,CA8CF;AACF;;;AAGA,QAAMC,KAAK,GAAGP,mBAAmB,CAACQ,MAAlC;AACA,MAAIX,IAAI,GAAG,CAAX;;AAEA,OAAK,MAAMY,aAAX,IAA4BT,mBAA5B,EAAiD;AAC/CH,IAAAA,IAAI,IAAIY,aAAa,CAACZ,IAAd,IAAsB,CAA9B;AACA,WAAOY,aAAa,CAACZ,IAArB;AACD;;AAED,SAAO;AACLU,IAAAA,KADK;AAELV,IAAAA,IAFK;AAGLa,IAAAA,eAAe,EAAEV,mBAHZ;AAILM,IAAAA,QAAQ,EAAEjB;AAJL,GAAP;AAMD,CAxED","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst errors = require('./errors');\n\nconst additionalManifestEntriesTransform = require('./additional-manifest-entries-transform');\n\nconst maximumSizeTransform = require('./maximum-size-transform');\n\nconst modifyURLPrefixTransform = require('./modify-url-prefix-transform');\n\nconst noRevisionForURLsMatchingTransform = require('./no-revision-for-urls-matching-transform');\n/**\n * A `ManifestTransform` function can be used to modify the modify the `url` or\n * `revision` properties of some or all of the\n * {@link module:workbox-build.ManifestEntry|ManifestEntries} in the manifest.\n *\n * Deleting the `revision` property of an entry will cause\n * the corresponding `url` to be precached without cache-busting parameters\n * applied, which is to say, it implies that the URL itself contains\n * proper versioning info. If the `revision` property is present, it must be\n * set to a string.\n *\n * @example A transformation that prepended the origin of a CDN for any\n * URL starting with '/assets/' could be implemented as:\n *\n * const cdnTransform = async (manifestEntries) => {\n *   const manifest = manifestEntries.map(entry => {\n *     const cdnOrigin = 'https://example.com';\n *     if (entry.url.startsWith('/assets/')) {\n *       entry.url = cdnOrigin + entry.url;\n *     }\n *     return entry;\n *   });\n *   return {manifest, warnings: []};\n * };\n *\n * @example A transformation that nulls the revision field when the\n * URL contains an 8-character hash surrounded by '.', indicating that it\n * already contains revision information:\n *\n * const removeRevisionTransform = async (manifestEntries) => {\n *   const manifest = manifestEntries.map(entry => {\n *     const hashRegExp = /\\.\\w{8}\\./;\n *     if (entry.url.match(hashRegExp)) {\n *       entry.revision = null;\n *     }\n *     return entry;\n *   });\n *   return {manifest, warnings: []};\n * };\n *\n * @callback ManifestTransform\n * @param {Array<module:workbox-build.ManifestEntry>} manifestEntries The full\n * array of entries, prior to the current transformation.\n * @param {Object} [compilation] When used in the webpack plugins, this param\n * will be set to the current `compilation`.\n * @return {Promise<module:workbox-build.ManifestTransformResult>}\n * The array of entries with the transformation applied, and optionally, any\n * warnings that should be reported back to the build tool.\n *\n * @memberof module:workbox-build\n */\n\n\nmodule.exports = async ({\n  additionalManifestEntries,\n  dontCacheBustURLsMatching,\n  fileDetails,\n  manifestTransforms,\n  maximumFileSizeToCacheInBytes,\n  modifyURLPrefix,\n  transformParam\n}) => {\n  let allWarnings = []; // Take the array of fileDetail objects and convert it into an array of\n  // {url, revision, size} objects, with \\ replaced with /.\n\n  const normalizedManifest = fileDetails.map(fileDetails => {\n    return {\n      url: fileDetails.file.replace(/\\\\/g, '/'),\n      revision: fileDetails.hash,\n      size: fileDetails.size\n    };\n  });\n  const transformsToApply = [];\n\n  if (maximumFileSizeToCacheInBytes) {\n    transformsToApply.push(maximumSizeTransform(maximumFileSizeToCacheInBytes));\n  }\n\n  if (modifyURLPrefix) {\n    transformsToApply.push(modifyURLPrefixTransform(modifyURLPrefix));\n  }\n\n  if (dontCacheBustURLsMatching) {\n    transformsToApply.push(noRevisionForURLsMatchingTransform(dontCacheBustURLsMatching));\n  } // Run any manifestTransforms functions second-to-last.\n\n\n  if (manifestTransforms) {\n    transformsToApply.push(...manifestTransforms);\n  } // Run additionalManifestEntriesTransform last.\n\n\n  if (additionalManifestEntries) {\n    transformsToApply.push(additionalManifestEntriesTransform(additionalManifestEntries));\n  }\n\n  let transformedManifest = normalizedManifest;\n\n  for (const transform of transformsToApply) {\n    const result = await transform(transformedManifest, transformParam);\n\n    if (!('manifest' in result)) {\n      throw new Error(errors['bad-manifest-transforms-return-value']);\n    }\n\n    transformedManifest = result.manifest;\n    allWarnings = allWarnings.concat(result.warnings || []);\n  } // Generate some metadata about the manifest before we clear out the size\n  // properties from each entry.\n\n\n  const count = transformedManifest.length;\n  let size = 0;\n\n  for (const manifestEntry of transformedManifest) {\n    size += manifestEntry.size || 0;\n    delete manifestEntry.size;\n  }\n\n  return {\n    count,\n    size,\n    manifestEntries: transformedManifest,\n    warnings: allWarnings\n  };\n};"]},"metadata":{},"sourceType":"script"}