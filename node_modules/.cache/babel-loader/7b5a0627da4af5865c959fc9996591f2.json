{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _noHelperImplementation = _interopRequireDefault(require(\"./no-helper-implementation\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    loose,\n    assumeArray,\n    allowArrayLike\n  } = options;\n\n  if (loose === true && assumeArray === true) {\n    throw new Error(`The loose and assumeArray options cannot be used together in @babel/plugin-transform-for-of`);\n  }\n\n  if (assumeArray === true && allowArrayLike === true) {\n    throw new Error(`The assumeArray and allowArrayLike options cannot be used together in @babel/plugin-transform-for-of`);\n  }\n\n  if (allowArrayLike && /^7\\.\\d\\./.test(api.version)) {\n    throw new Error(`The allowArrayLike is only supported when using @babel/core@^7.10.0`);\n  }\n\n  if (assumeArray) {\n    return {\n      name: \"transform-for-of\",\n      visitor: {\n        ForOfStatement(path) {\n          const {\n            scope\n          } = path;\n          const {\n            left,\n            right,\n            await: isAwait\n          } = path.node;\n\n          if (isAwait) {\n            return;\n          }\n\n          const i = scope.generateUidIdentifier(\"i\");\n          let array = scope.maybeGenerateMemoised(right, true);\n          const inits = [_core.types.variableDeclarator(i, _core.types.numericLiteral(0))];\n\n          if (array) {\n            inits.push(_core.types.variableDeclarator(array, right));\n          } else {\n            array = right;\n          }\n\n          const item = _core.types.memberExpression(_core.types.cloneNode(array), _core.types.cloneNode(i), true);\n\n          let assignment;\n\n          if (_core.types.isVariableDeclaration(left)) {\n            assignment = left;\n            assignment.declarations[0].init = item;\n          } else {\n            assignment = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, item));\n          }\n\n          let blockBody;\n          const body = path.get(\"body\");\n\n          if (body.isBlockStatement() && Object.keys(path.getBindingIdentifiers()).some(id => body.scope.hasOwnBinding(id))) {\n            blockBody = _core.types.blockStatement([assignment, body.node]);\n          } else {\n            blockBody = _core.types.toBlock(body.node);\n            blockBody.body.unshift(assignment);\n          }\n\n          path.replaceWith(_core.types.forStatement(_core.types.variableDeclaration(\"let\", inits), _core.types.binaryExpression(\"<\", _core.types.cloneNode(i), _core.types.memberExpression(_core.types.cloneNode(array), _core.types.identifier(\"length\"))), _core.types.updateExpression(\"++\", _core.types.cloneNode(i)), blockBody));\n        }\n\n      }\n    };\n  }\n\n  const buildForOfArray = (0, _core.template)(`\n    for (var KEY = 0, NAME = ARR; KEY < NAME.length; KEY++) BODY;\n  `);\n\n  const buildForOfLoose = _core.template.statements(`\n    for (var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ALLOW_ARRAY_LIKE), STEP_KEY;\n        !(STEP_KEY = ITERATOR_HELPER()).done;) BODY;\n  `);\n\n  const buildForOf = _core.template.statements(`\n    var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ALLOW_ARRAY_LIKE), STEP_KEY;\n    try {\n      for (ITERATOR_HELPER.s(); !(STEP_KEY = ITERATOR_HELPER.n()).done;) BODY;\n    } catch (err) {\n      ITERATOR_HELPER.e(err);\n    } finally {\n      ITERATOR_HELPER.f();\n    }\n  `);\n\n  const builder = loose ? {\n    build: buildForOfLoose,\n    helper: \"createForOfIteratorHelperLoose\",\n    getContainer: nodes => nodes\n  } : {\n    build: buildForOf,\n    helper: \"createForOfIteratorHelper\",\n    getContainer: nodes => nodes[1].block.body\n  };\n\n  function _ForOfStatementArray(path) {\n    const {\n      node,\n      scope\n    } = path;\n    const right = scope.generateUidIdentifierBasedOnNode(node.right, \"arr\");\n    const iterationKey = scope.generateUidIdentifier(\"i\");\n    const loop = buildForOfArray({\n      BODY: node.body,\n      KEY: iterationKey,\n      NAME: right,\n      ARR: node.right\n    });\n\n    _core.types.inherits(loop, node);\n\n    _core.types.ensureBlock(loop);\n\n    const iterationValue = _core.types.memberExpression(_core.types.cloneNode(right), _core.types.cloneNode(iterationKey), true);\n\n    const left = node.left;\n\n    if (_core.types.isVariableDeclaration(left)) {\n      left.declarations[0].init = iterationValue;\n      loop.body.body.unshift(left);\n    } else {\n      loop.body.body.unshift(_core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, iterationValue)));\n    }\n\n    return loop;\n  }\n\n  return {\n    name: \"transform-for-of\",\n    visitor: {\n      ForOfStatement(path, state) {\n        const right = path.get(\"right\");\n\n        if (right.isArrayExpression() || right.isGenericType(\"Array\") || _core.types.isArrayTypeAnnotation(right.getTypeAnnotation())) {\n          path.replaceWith(_ForOfStatementArray(path));\n          return;\n        }\n\n        if (!state.availableHelper(builder.helper)) {\n          (0, _noHelperImplementation.default)(loose, path, state);\n          return;\n        }\n\n        const {\n          node,\n          parent,\n          scope\n        } = path;\n        const left = node.left;\n        let declar;\n        const stepKey = scope.generateUid(\"step\");\n\n        const stepValue = _core.types.memberExpression(_core.types.identifier(stepKey), _core.types.identifier(\"value\"));\n\n        if (_core.types.isVariableDeclaration(left)) {\n          declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, stepValue)]);\n        } else {\n          declar = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, stepValue));\n        }\n\n        path.ensureBlock();\n        node.body.body.unshift(declar);\n        const nodes = builder.build({\n          CREATE_ITERATOR_HELPER: state.addHelper(builder.helper),\n          ITERATOR_HELPER: scope.generateUidIdentifier(\"iterator\"),\n          ALLOW_ARRAY_LIKE: allowArrayLike ? _core.types.booleanLiteral(true) : null,\n          STEP_KEY: _core.types.identifier(stepKey),\n          OBJECT: node.right,\n          BODY: node.body\n        });\n        const container = builder.getContainer(nodes);\n\n        _core.types.inherits(container[0], node);\n\n        _core.types.inherits(container[0].body, node.body);\n\n        if (_core.types.isLabeledStatement(parent)) {\n          container[0] = _core.types.labeledStatement(parent.label, container[0]);\n          path.parentPath.replaceWithMultiple(nodes);\n          path.remove();\n        } else {\n          path.replaceWithMultiple(nodes);\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-for-of/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_core","_noHelperImplementation","_interopRequireDefault","obj","__esModule","_default","declare","api","options","assertVersion","loose","assumeArray","allowArrayLike","Error","test","version","name","visitor","ForOfStatement","path","scope","left","right","await","isAwait","node","i","generateUidIdentifier","array","maybeGenerateMemoised","inits","types","variableDeclarator","numericLiteral","push","item","memberExpression","cloneNode","assignment","isVariableDeclaration","declarations","init","expressionStatement","assignmentExpression","blockBody","body","get","isBlockStatement","keys","getBindingIdentifiers","some","id","hasOwnBinding","blockStatement","toBlock","unshift","replaceWith","forStatement","variableDeclaration","binaryExpression","identifier","updateExpression","buildForOfArray","template","buildForOfLoose","statements","buildForOf","builder","build","helper","getContainer","nodes","block","_ForOfStatementArray","generateUidIdentifierBasedOnNode","iterationKey","loop","BODY","KEY","NAME","ARR","inherits","ensureBlock","iterationValue","state","isArrayExpression","isGenericType","isArrayTypeAnnotation","getTypeAnnotation","availableHelper","parent","declar","stepKey","generateUid","stepValue","kind","CREATE_ITERATOR_HELPER","addHelper","ITERATOR_HELPER","ALLOW_ARRAY_LIKE","booleanLiteral","STEP_KEY","OBJECT","container","isLabeledStatement","labeledStatement","label","parentPath","replaceWithMultiple","remove"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _noHelperImplementation = _interopRequireDefault(require(\"./no-helper-implementation\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    loose,\n    assumeArray,\n    allowArrayLike\n  } = options;\n\n  if (loose === true && assumeArray === true) {\n    throw new Error(`The loose and assumeArray options cannot be used together in @babel/plugin-transform-for-of`);\n  }\n\n  if (assumeArray === true && allowArrayLike === true) {\n    throw new Error(`The assumeArray and allowArrayLike options cannot be used together in @babel/plugin-transform-for-of`);\n  }\n\n  if (allowArrayLike && /^7\\.\\d\\./.test(api.version)) {\n    throw new Error(`The allowArrayLike is only supported when using @babel/core@^7.10.0`);\n  }\n\n  if (assumeArray) {\n    return {\n      name: \"transform-for-of\",\n      visitor: {\n        ForOfStatement(path) {\n          const {\n            scope\n          } = path;\n          const {\n            left,\n            right,\n            await: isAwait\n          } = path.node;\n\n          if (isAwait) {\n            return;\n          }\n\n          const i = scope.generateUidIdentifier(\"i\");\n          let array = scope.maybeGenerateMemoised(right, true);\n          const inits = [_core.types.variableDeclarator(i, _core.types.numericLiteral(0))];\n\n          if (array) {\n            inits.push(_core.types.variableDeclarator(array, right));\n          } else {\n            array = right;\n          }\n\n          const item = _core.types.memberExpression(_core.types.cloneNode(array), _core.types.cloneNode(i), true);\n\n          let assignment;\n\n          if (_core.types.isVariableDeclaration(left)) {\n            assignment = left;\n            assignment.declarations[0].init = item;\n          } else {\n            assignment = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, item));\n          }\n\n          let blockBody;\n          const body = path.get(\"body\");\n\n          if (body.isBlockStatement() && Object.keys(path.getBindingIdentifiers()).some(id => body.scope.hasOwnBinding(id))) {\n            blockBody = _core.types.blockStatement([assignment, body.node]);\n          } else {\n            blockBody = _core.types.toBlock(body.node);\n            blockBody.body.unshift(assignment);\n          }\n\n          path.replaceWith(_core.types.forStatement(_core.types.variableDeclaration(\"let\", inits), _core.types.binaryExpression(\"<\", _core.types.cloneNode(i), _core.types.memberExpression(_core.types.cloneNode(array), _core.types.identifier(\"length\"))), _core.types.updateExpression(\"++\", _core.types.cloneNode(i)), blockBody));\n        }\n\n      }\n    };\n  }\n\n  const buildForOfArray = (0, _core.template)(`\n    for (var KEY = 0, NAME = ARR; KEY < NAME.length; KEY++) BODY;\n  `);\n\n  const buildForOfLoose = _core.template.statements(`\n    for (var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ALLOW_ARRAY_LIKE), STEP_KEY;\n        !(STEP_KEY = ITERATOR_HELPER()).done;) BODY;\n  `);\n\n  const buildForOf = _core.template.statements(`\n    var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ALLOW_ARRAY_LIKE), STEP_KEY;\n    try {\n      for (ITERATOR_HELPER.s(); !(STEP_KEY = ITERATOR_HELPER.n()).done;) BODY;\n    } catch (err) {\n      ITERATOR_HELPER.e(err);\n    } finally {\n      ITERATOR_HELPER.f();\n    }\n  `);\n\n  const builder = loose ? {\n    build: buildForOfLoose,\n    helper: \"createForOfIteratorHelperLoose\",\n    getContainer: nodes => nodes\n  } : {\n    build: buildForOf,\n    helper: \"createForOfIteratorHelper\",\n    getContainer: nodes => nodes[1].block.body\n  };\n\n  function _ForOfStatementArray(path) {\n    const {\n      node,\n      scope\n    } = path;\n    const right = scope.generateUidIdentifierBasedOnNode(node.right, \"arr\");\n    const iterationKey = scope.generateUidIdentifier(\"i\");\n    const loop = buildForOfArray({\n      BODY: node.body,\n      KEY: iterationKey,\n      NAME: right,\n      ARR: node.right\n    });\n\n    _core.types.inherits(loop, node);\n\n    _core.types.ensureBlock(loop);\n\n    const iterationValue = _core.types.memberExpression(_core.types.cloneNode(right), _core.types.cloneNode(iterationKey), true);\n\n    const left = node.left;\n\n    if (_core.types.isVariableDeclaration(left)) {\n      left.declarations[0].init = iterationValue;\n      loop.body.body.unshift(left);\n    } else {\n      loop.body.body.unshift(_core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, iterationValue)));\n    }\n\n    return loop;\n  }\n\n  return {\n    name: \"transform-for-of\",\n    visitor: {\n      ForOfStatement(path, state) {\n        const right = path.get(\"right\");\n\n        if (right.isArrayExpression() || right.isGenericType(\"Array\") || _core.types.isArrayTypeAnnotation(right.getTypeAnnotation())) {\n          path.replaceWith(_ForOfStatementArray(path));\n          return;\n        }\n\n        if (!state.availableHelper(builder.helper)) {\n          (0, _noHelperImplementation.default)(loose, path, state);\n          return;\n        }\n\n        const {\n          node,\n          parent,\n          scope\n        } = path;\n        const left = node.left;\n        let declar;\n        const stepKey = scope.generateUid(\"step\");\n\n        const stepValue = _core.types.memberExpression(_core.types.identifier(stepKey), _core.types.identifier(\"value\"));\n\n        if (_core.types.isVariableDeclaration(left)) {\n          declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, stepValue)]);\n        } else {\n          declar = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, stepValue));\n        }\n\n        path.ensureBlock();\n        node.body.body.unshift(declar);\n        const nodes = builder.build({\n          CREATE_ITERATOR_HELPER: state.addHelper(builder.helper),\n          ITERATOR_HELPER: scope.generateUidIdentifier(\"iterator\"),\n          ALLOW_ARRAY_LIKE: allowArrayLike ? _core.types.booleanLiteral(true) : null,\n          STEP_KEY: _core.types.identifier(stepKey),\n          OBJECT: node.right,\n          BODY: node.body\n        });\n        const container = builder.getContainer(nodes);\n\n        _core.types.inherits(container[0], node);\n\n        _core.types.inherits(container[0].body, node.body);\n\n        if (_core.types.isLabeledStatement(parent)) {\n          container[0] = _core.types.labeledStatement(parent.label, container[0]);\n          path.parentPath.replaceWithMultiple(nodes);\n          path.remove();\n        } else {\n          path.replaceWithMultiple(nodes);\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}