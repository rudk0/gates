{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst prettyBytes = require('pretty-bytes');\n\nmodule.exports = maximumFileSizeToCacheInBytes => {\n  return originalManifest => {\n    const warnings = [];\n    const manifest = originalManifest.filter(entry => {\n      if (entry.size <= maximumFileSizeToCacheInBytes) {\n        return true;\n      }\n\n      warnings.push(`${entry.url} is ${prettyBytes(entry.size)}, and won't ` + `be precached. Configure maximumFileSizeToCacheInBytes to change ` + `this limit.`);\n      return false;\n    });\n    return {\n      manifest,\n      warnings\n    };\n  };\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/maximum-size-transform.js"],"names":["prettyBytes","require","module","exports","maximumFileSizeToCacheInBytes","originalManifest","warnings","manifest","filter","entry","size","push","url"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,6BAA6B,IAAI;AAChD,SAAOC,gBAAgB,IAAI;AACzB,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,QAAQ,GAAGF,gBAAgB,CAACG,MAAjB,CAAwBC,KAAK,IAAI;AAChD,UAAIA,KAAK,CAACC,IAAN,IAAcN,6BAAlB,EAAiD;AAC/C,eAAO,IAAP;AACD;;AAEDE,MAAAA,QAAQ,CAACK,IAAT,CAAe,GAAEF,KAAK,CAACG,GAAI,OAAMZ,WAAW,CAACS,KAAK,CAACC,IAAP,CAAa,cAA3C,GAA4D,kEAA5D,GAAiI,aAA/I;AACA,aAAO,KAAP;AACD,KAPgB,CAAjB;AAQA,WAAO;AACLH,MAAAA,QADK;AAELD,MAAAA;AAFK,KAAP;AAID,GAdD;AAeD,CAhBD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst prettyBytes = require('pretty-bytes');\n\nmodule.exports = maximumFileSizeToCacheInBytes => {\n  return originalManifest => {\n    const warnings = [];\n    const manifest = originalManifest.filter(entry => {\n      if (entry.size <= maximumFileSizeToCacheInBytes) {\n        return true;\n      }\n\n      warnings.push(`${entry.url} is ${prettyBytes(entry.size)}, and won't ` + `be precached. Configure maximumFileSizeToCacheInBytes to change ` + `this limit.`);\n      return false;\n    });\n    return {\n      manifest,\n      warnings\n    };\n  };\n};"]},"metadata":{},"sourceType":"script"}