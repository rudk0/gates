{"ast":null,"code":"var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\n\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial; // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        } // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n\n\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;","map":{"version":3,"sources":["../../src/inlineArrayTransformer/inlineArrayTransformer.js"],"names":["defaults","separator","conjunction","serial","inlineArrayTransformer","opts","onSubstitution","Array","arrayLength","substitution","indent","resultSoFar","separatorIndex"],"mappings":"AAAA,IAAMA,QAAAA,GAAW;AACfC,EAAAA,SAAAA,EADe,EAAA;AAEfC,EAAAA,WAAAA,EAFe,EAAA;AAGfC,EAAAA,MAAAA,EAAQ;AAHO,CAAjB;AAMA;;;;;;;;;AAQA,IAAMC,sBAAAA,GAAyB,SAAzBA,sBAAyB,GAAA;AAAA,MAACC,IAAD,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,QAAA;AAAA,SAAsB;AACnDC,IAAAA,cADmD,EAAA,SAAA,cAAA,CAAA,YAAA,EAAA,WAAA,EACT;AACxC;AACA,UAAIC,KAAAA,CAAAA,OAAAA,CAAJ,YAAIA,CAAJ,EAAiC;AAC/B,YAAMC,WAAAA,GAAcC,YAAAA,CAApB,MAAA;AACA,YAAMR,SAAAA,GAAYI,IAAAA,CAAlB,SAAA;AACA,YAAMH,WAAAA,GAAcG,IAAAA,CAApB,WAAA;AACA,YAAMF,MAAAA,GAASE,IAAAA,CAAf,MAAA,CAJ+B,CAK/B;AACA;;AACA,YAAMK,MAAAA,GAASC,WAAAA,CAAAA,KAAAA,CAAf,gBAAeA,CAAf;;AACA,YAAA,MAAA,EAAY;AACVF,UAAAA,YAAAA,GAAeA,YAAAA,CAAAA,IAAAA,CAAkBR,SAAAA,GAAYS,MAAAA,CAA7CD,CAA6CC,CAA9BD,CAAfA;AADF,SAAA,MAEO;AACLA,UAAAA,YAAAA,GAAeA,YAAAA,CAAAA,IAAAA,CAAkBR,SAAAA,GAAjCQ,GAAeA,CAAfA;AACD,SAZ8B,CAa/B;;;AACA,YAAIP,WAAAA,IAAeM,WAAAA,GAAnB,CAAA,EAAoC;AAClC,cAAMI,cAAAA,GAAiBH,YAAAA,CAAAA,WAAAA,CAAvB,SAAuBA,CAAvB;AACAA,UAAAA,YAAAA,GACEA,YAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,cAAAA,KACCN,MAAAA,GAAAA,SAAAA,GADDM,EAAAA,IAAAA,GAAAA,GAAAA,WAAAA,GAIAA,YAAAA,CAAAA,KAAAA,CAAmBG,cAAAA,GALrBH,CAKEA,CALFA;AAMD;AACF;;AACD,aAAA,YAAA;AACD;AA5BkD,GAAtB;AAA/B,CAAA;;AA+BA,eAAA,sBAAA","sourcesContent":["const defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false,\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nconst inlineArrayTransformer = (opts = defaults) => ({\n  onSubstitution(substitution, resultSoFar) {\n    // only operate on arrays\n    if (Array.isArray(substitution)) {\n      const arrayLength = substitution.length;\n      const separator = opts.separator;\n      const conjunction = opts.conjunction;\n      const serial = opts.serial;\n      // join each item in the array into a string where each item is separated by separator\n      // be sure to maintain indentation\n      const indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n      if (indent) {\n        substitution = substitution.join(separator + indent[1]);\n      } else {\n        substitution = substitution.join(separator + ' ');\n      }\n      // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n      if (conjunction && arrayLength > 1) {\n        const separatorIndex = substitution.lastIndexOf(separator);\n        substitution =\n          substitution.slice(0, separatorIndex) +\n          (serial ? separator : '') +\n          ' ' +\n          conjunction +\n          substitution.slice(separatorIndex + 1);\n      }\n    }\n    return substitution;\n  },\n});\n\nexport default inlineArrayTransformer;\n"]},"metadata":{},"sourceType":"module"}