{"ast":null,"code":"'use strict';\n\nconst {\n  compare,\n  intersection,\n  semver\n} = require('./helpers');\n\nconst modulesByVersions = require('./modules-by-versions');\n\nconst modules = require('./modules');\n\nmodule.exports = function (raw) {\n  const corejs = semver(raw);\n\n  if (corejs.major !== 3) {\n    throw RangeError('This version of `core-js-compat` works only with `core-js@3`.');\n  }\n\n  const result = [];\n\n  for (const version of Object.keys(modulesByVersions)) {\n    if (compare(version, '<=', corejs)) {\n      result.push(...modulesByVersions[version]);\n    }\n  }\n\n  return intersection(result, modules);\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/core-js-compat/get-modules-list-for-target-version.js"],"names":["compare","intersection","semver","require","modulesByVersions","modules","module","exports","raw","corejs","major","RangeError","result","version","Object","keys","push"],"mappings":"AAAA;;AACA,MAAM;AAAEA,EAAAA,OAAF;AAAWC,EAAAA,YAAX;AAAyBC,EAAAA;AAAzB,IAAoCC,OAAO,CAAC,WAAD,CAAjD;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,uBAAD,CAAjC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAC9B,QAAMC,MAAM,GAAGP,MAAM,CAACM,GAAD,CAArB;;AACA,MAAIC,MAAM,CAACC,KAAP,KAAiB,CAArB,EAAwB;AACtB,UAAMC,UAAU,CAAC,+DAAD,CAAhB;AACD;;AACD,QAAMC,MAAM,GAAG,EAAf;;AACA,OAAK,MAAMC,OAAX,IAAsBC,MAAM,CAACC,IAAP,CAAYX,iBAAZ,CAAtB,EAAsD;AACpD,QAAIJ,OAAO,CAACa,OAAD,EAAU,IAAV,EAAgBJ,MAAhB,CAAX,EAAoC;AAClCG,MAAAA,MAAM,CAACI,IAAP,CAAY,GAAGZ,iBAAiB,CAACS,OAAD,CAAhC;AACD;AACF;;AACD,SAAOZ,YAAY,CAACW,MAAD,EAASP,OAAT,CAAnB;AACD,CAZD","sourcesContent":["'use strict';\nconst { compare, intersection, semver } = require('./helpers');\nconst modulesByVersions = require('./modules-by-versions');\nconst modules = require('./modules');\n\nmodule.exports = function (raw) {\n  const corejs = semver(raw);\n  if (corejs.major !== 3) {\n    throw RangeError('This version of `core-js-compat` works only with `core-js@3`.');\n  }\n  const result = [];\n  for (const version of Object.keys(modulesByVersions)) {\n    if (compare(version, '<=', corejs)) {\n      result.push(...modulesByVersions[version]);\n    }\n  }\n  return intersection(result, modules);\n};\n"]},"metadata":{},"sourceType":"script"}