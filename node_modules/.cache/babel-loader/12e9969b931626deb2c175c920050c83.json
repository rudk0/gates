{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _os() {\n  const data = _interopRequireDefault(require('os'));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _WorkerPool = _interopRequireDefault(require('./WorkerPool'));\n\nvar _Farm = _interopRequireDefault(require('./Farm'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  let exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    const module = require(workerPath);\n\n    exposedMethods = Object.keys(module).filter( // @ts-ignore: no index\n    name => typeof module[name] === 'function');\n\n    if (typeof module === 'function') {\n      exposedMethods = [...exposedMethods, 'default'];\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\n\nclass JestWorker {\n  constructor(workerPath, options) {\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = _objectSpread({}, options);\n    this._ending = false;\n    const workerPoolOptions = {\n      enableWorkerThreads: this._options.enableWorkerThreads || false,\n      forkOptions: this._options.forkOptions || {},\n      maxRetries: this._options.maxRetries || 3,\n      numWorkers: this._options.numWorkers || Math.max(_os().default.cpus().length - 1, 1),\n      setupArgs: this._options.setupArgs || []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-ignore: constructor target any?\n      this._workerPool = new this._options.WorkerPool(workerPath, workerPoolOptions);\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(workerPoolOptions.numWorkers, this._workerPool.send.bind(this._workerPool), this._options.computeWorkerKey);\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _bindExposedWorkerMethods(workerPath, options) {\n    getExposedMethods(workerPath, options).forEach(name => {\n      if (name.startsWith('_')) {\n        return;\n      }\n\n      if (this.constructor.prototype.hasOwnProperty(name)) {\n        throw new TypeError('Cannot define a method called ' + name);\n      } // @ts-ignore: dynamic extension of the class instance is expected.\n\n\n      this[name] = this._callFunctionWithArgs.bind(this, name);\n    });\n  }\n\n  _callFunctionWithArgs(method, ...args) {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    return this._farm.doWork(method, ...args);\n  }\n\n  getStderr() {\n    return this._workerPool.getStderr();\n  }\n\n  getStdout() {\n    return this._workerPool.getStdout();\n  }\n\n  end() {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    this._workerPool.end();\n\n    this._ending = true;\n  }\n\n}\n\nexports.default = JestWorker;","map":{"version":3,"sources":["/home/agatha/open/node_modules/jest-worker/build/index.js"],"names":["Object","defineProperty","exports","value","default","_os","data","_interopRequireDefault","require","_WorkerPool","_Farm","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","getExposedMethods","workerPath","options","exposedMethods","module","name","JestWorker","constructor","_options","_ending","workerPoolOptions","enableWorkerThreads","forkOptions","maxRetries","numWorkers","Math","max","cpus","setupArgs","WorkerPool","_workerPool","_farm","send","bind","computeWorkerKey","_bindExposedWorkerMethods","startsWith","prototype","hasOwnProperty","TypeError","_callFunctionWithArgs","method","args","Error","doWork","getStderr","getStdout","end"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAD,CAAR,CAAnC;;AAEAH,EAAAA,GAAG,GAAG,SAASA,GAAT,GAAe;AACnB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,IAAIG,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIE,KAAK,GAAGH,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACP,IAAAA,OAAO,EAAEO;AAAV,GAArC;AACD;;AAED,SAASE,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AACzC,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;AACA,QAAII,OAAO,GAAGnB,MAAM,CAACoB,IAAP,CAAYF,MAAZ,CAAd;;AACA,QAAI,OAAOlB,MAAM,CAACqB,qBAAd,KAAwC,UAA5C,EAAwD;AACtDF,MAAAA,OAAO,GAAGA,OAAO,CAACG,MAAR,CACRtB,MAAM,CAACqB,qBAAP,CAA6BH,MAA7B,EAAqCK,MAArC,CAA4C,UAASC,GAAT,EAAc;AACxD,eAAOxB,MAAM,CAACyB,wBAAP,CAAgCP,MAAhC,EAAwCM,GAAxC,EAA6CE,UAApD;AACD,OAFD,CADQ,CAAV;AAKD;;AACDP,IAAAA,OAAO,CAACQ,OAAR,CAAgB,UAASC,GAAT,EAAc;AAC5BC,MAAAA,eAAe,CAACf,MAAD,EAASc,GAAT,EAAcV,MAAM,CAACU,GAAD,CAApB,CAAf;AACD,KAFD;AAGD;;AACD,SAAOd,MAAP;AACD;;AAED,SAASe,eAAT,CAAyBlB,GAAzB,EAA8BiB,GAA9B,EAAmCzB,KAAnC,EAA0C;AACxC,MAAIyB,GAAG,IAAIjB,GAAX,EAAgB;AACdX,IAAAA,MAAM,CAACC,cAAP,CAAsBU,GAAtB,EAA2BiB,GAA3B,EAAgC;AAC9BzB,MAAAA,KAAK,EAAEA,KADuB;AAE9BuB,MAAAA,UAAU,EAAE,IAFkB;AAG9BI,MAAAA,YAAY,EAAE,IAHgB;AAI9BC,MAAAA,QAAQ,EAAE;AAJoB,KAAhC;AAMD,GAPD,MAOO;AACLpB,IAAAA,GAAG,CAACiB,GAAD,CAAH,GAAWzB,KAAX;AACD;;AACD,SAAOQ,GAAP;AACD;;AAED,SAASqB,iBAAT,CAA2BC,UAA3B,EAAuCC,OAAvC,EAAgD;AAC9C,MAAIC,cAAc,GAAGD,OAAO,CAACC,cAA7B,CAD8C,CACD;;AAE7C,MAAI,CAACA,cAAL,EAAqB;AACnB,UAAMC,MAAM,GAAG5B,OAAO,CAACyB,UAAD,CAAtB;;AAEAE,IAAAA,cAAc,GAAGnC,MAAM,CAACoB,IAAP,CAAYgB,MAAZ,EAAoBb,MAApB,EACf;AACAc,IAAAA,IAAI,IAAI,OAAOD,MAAM,CAACC,IAAD,CAAb,KAAwB,UAFjB,CAAjB;;AAKA,QAAI,OAAOD,MAAP,KAAkB,UAAtB,EAAkC;AAChCD,MAAAA,cAAc,GAAG,CAAC,GAAGA,cAAJ,EAAoB,SAApB,CAAjB;AACD;AACF;;AAED,SAAOA,cAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMG,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACN,UAAD,EAAaC,OAAb,EAAsB;AAC/BL,IAAAA,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB,KAAK,CAAvB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAK,CAArB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,UAAP,EAAmB,KAAK,CAAxB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,aAAP,EAAsB,KAAK,CAA3B,CAAf;;AAEA,SAAKW,QAAL,GAAgB3B,aAAa,CAAC,EAAD,EAAKqB,OAAL,CAA7B;AACA,SAAKO,OAAL,GAAe,KAAf;AACA,UAAMC,iBAAiB,GAAG;AACxBC,MAAAA,mBAAmB,EAAE,KAAKH,QAAL,CAAcG,mBAAd,IAAqC,KADlC;AAExBC,MAAAA,WAAW,EAAE,KAAKJ,QAAL,CAAcI,WAAd,IAA6B,EAFlB;AAGxBC,MAAAA,UAAU,EAAE,KAAKL,QAAL,CAAcK,UAAd,IAA4B,CAHhB;AAIxBC,MAAAA,UAAU,EACR,KAAKN,QAAL,CAAcM,UAAd,IACAC,IAAI,CAACC,GAAL,CAAS3C,GAAG,GAAGD,OAAN,CAAc6C,IAAd,GAAqBhC,MAArB,GAA8B,CAAvC,EAA0C,CAA1C,CANsB;AAOxBiC,MAAAA,SAAS,EAAE,KAAKV,QAAL,CAAcU,SAAd,IAA2B;AAPd,KAA1B;;AAUA,QAAI,KAAKV,QAAL,CAAcW,UAAlB,EAA8B;AAC5B;AACA,WAAKC,WAAL,GAAmB,IAAI,KAAKZ,QAAL,CAAcW,UAAlB,CACjBlB,UADiB,EAEjBS,iBAFiB,CAAnB;AAID,KAND,MAMO;AACL,WAAKU,WAAL,GAAmB,IAAI3C,WAAW,CAACL,OAAhB,CAAwB6B,UAAxB,EAAoCS,iBAApC,CAAnB;AACD;;AAED,SAAKW,KAAL,GAAa,IAAI3C,KAAK,CAACN,OAAV,CACXsC,iBAAiB,CAACI,UADP,EAEX,KAAKM,WAAL,CAAiBE,IAAjB,CAAsBC,IAAtB,CAA2B,KAAKH,WAAhC,CAFW,EAGX,KAAKZ,QAAL,CAAcgB,gBAHH,CAAb;;AAMA,SAAKC,yBAAL,CAA+BxB,UAA/B,EAA2C,KAAKO,QAAhD;AACD;;AAEDiB,EAAAA,yBAAyB,CAACxB,UAAD,EAAaC,OAAb,EAAsB;AAC7CF,IAAAA,iBAAiB,CAACC,UAAD,EAAaC,OAAb,CAAjB,CAAuCP,OAAvC,CAA+CU,IAAI,IAAI;AACrD,UAAIA,IAAI,CAACqB,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AACxB;AACD;;AAED,UAAI,KAAKnB,WAAL,CAAiBoB,SAAjB,CAA2BC,cAA3B,CAA0CvB,IAA1C,CAAJ,EAAqD;AACnD,cAAM,IAAIwB,SAAJ,CAAc,mCAAmCxB,IAAjD,CAAN;AACD,OAPoD,CAOnD;;;AAEF,WAAKA,IAAL,IAAa,KAAKyB,qBAAL,CAA2BP,IAA3B,CAAgC,IAAhC,EAAsClB,IAAtC,CAAb;AACD,KAVD;AAWD;;AAEDyB,EAAAA,qBAAqB,CAACC,MAAD,EAAS,GAAGC,IAAZ,EAAkB;AACrC,QAAI,KAAKvB,OAAT,EAAkB;AAChB,YAAM,IAAIwB,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,WAAO,KAAKZ,KAAL,CAAWa,MAAX,CAAkBH,MAAlB,EAA0B,GAAGC,IAA7B,CAAP;AACD;;AAEDG,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKf,WAAL,CAAiBe,SAAjB,EAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKhB,WAAL,CAAiBgB,SAAjB,EAAP;AACD;;AAEDC,EAAAA,GAAG,GAAG;AACJ,QAAI,KAAK5B,OAAT,EAAkB;AAChB,YAAM,IAAIwB,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,SAAKb,WAAL,CAAiBiB,GAAjB;;AAEA,SAAK5B,OAAL,GAAe,IAAf;AACD;;AA/Ec;;AAkFjBvC,OAAO,CAACE,OAAR,GAAkBkC,UAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _os() {\n  const data = _interopRequireDefault(require('os'));\n\n  _os = function _os() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _WorkerPool = _interopRequireDefault(require('./WorkerPool'));\n\nvar _Farm = _interopRequireDefault(require('./Farm'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        })\n      );\n    }\n    ownKeys.forEach(function(key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nfunction getExposedMethods(workerPath, options) {\n  let exposedMethods = options.exposedMethods; // If no methods list is given, try getting it by auto-requiring the module.\n\n  if (!exposedMethods) {\n    const module = require(workerPath);\n\n    exposedMethods = Object.keys(module).filter(\n      // @ts-ignore: no index\n      name => typeof module[name] === 'function'\n    );\n\n    if (typeof module === 'function') {\n      exposedMethods = [...exposedMethods, 'default'];\n    }\n  }\n\n  return exposedMethods;\n}\n/**\n * The Jest farm (publicly called \"Worker\") is a class that allows you to queue\n * methods across multiple child processes, in order to parallelize work. This\n * is done by providing an absolute path to a module that will be loaded on each\n * of the child processes, and bridged to the main process.\n *\n * Bridged methods are specified by using the \"exposedMethods\" property of the\n * \"options\" object. This is an array of strings, where each of them corresponds\n * to the exported name in the loaded module.\n *\n * You can also control the amount of workers by using the \"numWorkers\" property\n * of the \"options\" object, and the settings passed to fork the process through\n * the \"forkOptions\" property. The amount of workers defaults to the amount of\n * CPUS minus one.\n *\n * Queueing calls can be done in two ways:\n *   - Standard method: calls will be redirected to the first available worker,\n *     so they will get executed as soon as they can.\n *\n *   - Sticky method: if a \"computeWorkerKey\" method is provided within the\n *     config, the resulting string of this method will be used as a key.\n *     Every time this key is returned, it is guaranteed that your job will be\n *     processed by the same worker. This is specially useful if your workers\n *     are caching results.\n */\n\nclass JestWorker {\n  constructor(workerPath, options) {\n    _defineProperty(this, '_ending', void 0);\n\n    _defineProperty(this, '_farm', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workerPool', void 0);\n\n    this._options = _objectSpread({}, options);\n    this._ending = false;\n    const workerPoolOptions = {\n      enableWorkerThreads: this._options.enableWorkerThreads || false,\n      forkOptions: this._options.forkOptions || {},\n      maxRetries: this._options.maxRetries || 3,\n      numWorkers:\n        this._options.numWorkers ||\n        Math.max(_os().default.cpus().length - 1, 1),\n      setupArgs: this._options.setupArgs || []\n    };\n\n    if (this._options.WorkerPool) {\n      // @ts-ignore: constructor target any?\n      this._workerPool = new this._options.WorkerPool(\n        workerPath,\n        workerPoolOptions\n      );\n    } else {\n      this._workerPool = new _WorkerPool.default(workerPath, workerPoolOptions);\n    }\n\n    this._farm = new _Farm.default(\n      workerPoolOptions.numWorkers,\n      this._workerPool.send.bind(this._workerPool),\n      this._options.computeWorkerKey\n    );\n\n    this._bindExposedWorkerMethods(workerPath, this._options);\n  }\n\n  _bindExposedWorkerMethods(workerPath, options) {\n    getExposedMethods(workerPath, options).forEach(name => {\n      if (name.startsWith('_')) {\n        return;\n      }\n\n      if (this.constructor.prototype.hasOwnProperty(name)) {\n        throw new TypeError('Cannot define a method called ' + name);\n      } // @ts-ignore: dynamic extension of the class instance is expected.\n\n      this[name] = this._callFunctionWithArgs.bind(this, name);\n    });\n  }\n\n  _callFunctionWithArgs(method, ...args) {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    return this._farm.doWork(method, ...args);\n  }\n\n  getStderr() {\n    return this._workerPool.getStderr();\n  }\n\n  getStdout() {\n    return this._workerPool.getStdout();\n  }\n\n  end() {\n    if (this._ending) {\n      throw new Error('Farm is ended, no more calls can be done to it');\n    }\n\n    this._workerPool.end();\n\n    this._ending = true;\n  }\n}\n\nexports.default = JestWorker;\n"]},"metadata":{},"sourceType":"script"}