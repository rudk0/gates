{"ast":null,"code":"const {\n  codeFrameColumns\n} = require(\"@babel/code-frame\");\n\nconst Worker = require(\"jest-worker\").default;\n\nconst serialize = require(\"serialize-javascript\");\n\nconst {\n  createFilter\n} = require(\"rollup-pluginutils\");\n\nfunction terser(userOptions = {}) {\n  if (userOptions.sourceMap != null) {\n    throw Error(\"sourceMap option is removed, use sourcemap instead\");\n  }\n\n  const filter = createFilter(userOptions.include, userOptions.exclude, {\n    resolve: false\n  });\n  return {\n    name: \"terser\",\n\n    renderChunk(code, chunk, outputOptions) {\n      if (!filter(chunk.fileName)) {\n        return null;\n      }\n\n      if (!this.worker) {\n        this.worker = new Worker(require.resolve(\"./transform.js\"), {\n          numWorkers: userOptions.numWorkers\n        });\n        this.numOfBundles = 0;\n      }\n\n      this.numOfBundles++;\n      const defaultOptions = {\n        sourceMap: userOptions.sourcemap !== false\n      };\n\n      if (outputOptions.format === \"es\" || outputOptions.format === \"esm\") {\n        defaultOptions.module = true;\n      }\n\n      if (outputOptions.format === \"cjs\") {\n        defaultOptions.toplevel = true;\n      } // TODO rewrite with object spread after dropping node v6\n\n\n      const normalizedOptions = Object.assign({}, defaultOptions, userOptions); // remove plugin specific options\n\n      for (let key of [\"include\", \"exclude\", \"sourcemap\", \"numWorkers\"]) {\n        if (normalizedOptions.hasOwnProperty(key)) {\n          delete normalizedOptions[key];\n        }\n      }\n\n      const serializedOptions = serialize(normalizedOptions);\n      const result = this.worker.transform(code, serializedOptions).catch(error => {\n        const {\n          message,\n          line,\n          col: column\n        } = error;\n        console.error(codeFrameColumns(code, {\n          start: {\n            line,\n            column\n          }\n        }, {\n          message\n        }));\n        throw error;\n      });\n\n      const handler = () => {\n        this.numOfBundles--;\n\n        if (this.numOfBundles === 0) {\n          this.worker.end();\n          this.worker = 0;\n        }\n      };\n\n      result.then(handler, handler);\n      return result.then(result => {\n        if (result.nameCache) {\n          let {\n            vars,\n            props\n          } = userOptions.nameCache; // only assign nameCache.vars if it was provided, and if terser produced values:\n\n          if (vars) {\n            const newVars = result.nameCache.vars && result.nameCache.vars.props;\n\n            if (newVars) {\n              vars.props = vars.props || {};\n              Object.assign(vars.props, newVars);\n            }\n          } // support populating an empty nameCache object:\n\n\n          if (!props) {\n            props = userOptions.nameCache.props = {};\n          } // merge updated props into original nameCache object:\n\n\n          const newProps = result.nameCache.props && result.nameCache.props.props;\n\n          if (newProps) {\n            props.props = props.props || {};\n            Object.assign(props.props, newProps);\n          }\n        }\n\n        return result.result;\n      });\n    }\n\n  };\n}\n\nexports.terser = terser;","map":{"version":3,"sources":["/home/agatha/open/node_modules/rollup-plugin-terser/index.js"],"names":["codeFrameColumns","require","Worker","default","serialize","createFilter","terser","userOptions","sourceMap","Error","filter","include","exclude","resolve","name","renderChunk","code","chunk","outputOptions","fileName","worker","numWorkers","numOfBundles","defaultOptions","sourcemap","format","module","toplevel","normalizedOptions","Object","assign","key","hasOwnProperty","serializedOptions","result","transform","catch","error","message","line","col","column","console","start","handler","end","then","nameCache","vars","props","newVars","newProps","exports"],"mappings":"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","sourcesContent":["const { codeFrameColumns } = require(\"@babel/code-frame\");\nconst Worker = require(\"jest-worker\").default;\nconst serialize = require(\"serialize-javascript\");\nconst { createFilter } = require(\"rollup-pluginutils\");\n\nfunction terser(userOptions = {}) {\n  if (userOptions.sourceMap != null) {\n    throw Error(\"sourceMap option is removed, use sourcemap instead\");\n  }\n\n  const filter = createFilter(userOptions.include, userOptions.exclude, {\n    resolve: false\n  });\n\n  return {\n    name: \"terser\",\n\n    renderChunk(code, chunk, outputOptions) {\n      if (!filter(chunk.fileName)) {\n        return null;\n      }\n\n      if (!this.worker) {\n        this.worker = new Worker(require.resolve(\"./transform.js\"), {\n          numWorkers: userOptions.numWorkers\n        });\n        this.numOfBundles = 0;\n      }\n\n      this.numOfBundles++;\n\n      const defaultOptions = {\n        sourceMap: userOptions.sourcemap !== false\n      };\n      if (outputOptions.format === \"es\" || outputOptions.format === \"esm\") {\n        defaultOptions.module = true;\n      }\n      if (outputOptions.format === \"cjs\") {\n        defaultOptions.toplevel = true;\n      }\n\n      // TODO rewrite with object spread after dropping node v6\n      const normalizedOptions = Object.assign({}, defaultOptions, userOptions);\n\n      // remove plugin specific options\n      for (let key of [\"include\", \"exclude\", \"sourcemap\", \"numWorkers\"]) {\n        if (normalizedOptions.hasOwnProperty(key)) {\n          delete normalizedOptions[key];\n        }\n      }\n\n      const serializedOptions = serialize(normalizedOptions);\n\n      const result = this.worker\n        .transform(code, serializedOptions)\n        .catch(error => {\n          const { message, line, col: column } = error;\n          console.error(\n            codeFrameColumns(code, { start: { line, column } }, { message })\n          );\n          throw error;\n        });\n\n      const handler = () => {\n        this.numOfBundles--;\n\n        if (this.numOfBundles === 0) {\n          this.worker.end();\n          this.worker = 0;\n        }\n      };\n\n      result.then(handler, handler);\n\n      return result.then(result => {\n        if (result.nameCache) {\n          let { vars, props } = userOptions.nameCache;\n\n          // only assign nameCache.vars if it was provided, and if terser produced values:\n          if (vars) {\n            const newVars =\n              result.nameCache.vars && result.nameCache.vars.props;\n            if (newVars) {\n              vars.props = vars.props || {};\n              Object.assign(vars.props, newVars);\n            }\n          }\n\n          // support populating an empty nameCache object:\n          if (!props) {\n            props = userOptions.nameCache.props = {};\n          }\n\n          // merge updated props into original nameCache object:\n          const newProps =\n            result.nameCache.props && result.nameCache.props.props;\n          if (newProps) {\n            props.props = props.props || {};\n            Object.assign(props.props, newProps);\n          }\n        }\n\n        return result.result;\n      });\n    }\n  };\n}\n\nexports.terser = terser;\n"]},"metadata":{},"sourceType":"script"}