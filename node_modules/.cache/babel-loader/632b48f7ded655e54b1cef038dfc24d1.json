{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst getManifestSchema = require('./options/get-manifest-schema');\n\nconst validate = require('./options/validate');\n/**\n * This method returns a list of URLs to precache, referred to as a \"precache\n * manifest\", along with details about the number of entries and their size,\n * based on the options you provide.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#getmanifest_mode).\n * @return {Promise<{manifestEntries: Array<ManifestEntry>,\n * count: number, size: number, warnings: Array<string>}>} A promise that\n * resolves once the precache manifest is determined. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, the\n * `count` property contains the total number of precached entries, and the\n * `manifestEntries` property contains all the `ManifestEntry` items. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction getManifest(_x) {\n  return _getManifest.apply(this, arguments);\n}\n\nfunction _getManifest() {\n  _getManifest = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, getManifestSchema);\n\n    const _ref = yield getFileManifestEntries(options),\n          manifestEntries = _ref.manifestEntries,\n          count = _ref.count,\n          size = _ref.size,\n          warnings = _ref.warnings; // Add in any deprecation warnings.\n\n\n    warnings.push(...deprecationWarnings);\n    return {\n      manifestEntries,\n      count,\n      size,\n      warnings\n    };\n  });\n  return _getManifest.apply(this, arguments);\n}\n\nmodule.exports = getManifest;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/entry-points/get-manifest.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","checkForDeprecatedOptions","getFileManifestEntries","getManifestSchema","validate","getManifest","_x","_getManifest","apply","arguments","default","config","deprecationWarnings","options","_ref","manifestEntries","count","size","warnings","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,kBAAkB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA/C;AAEA;;;;;;;;;AAOA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,qCAAD,CAAzC;;AAEA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,kCAAD,CAAtC;;AAEA,MAAMI,iBAAiB,GAAGJ,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,oBAAD,CAAxB;AACA;;;;;;;;;;;;;;;;;;;AAmBA,SAASM,WAAT,CAAqBC,EAArB,EAAyB;AACvB,SAAOC,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AAED,SAASF,YAAT,GAAwB;AACtBA,EAAAA,YAAY,GAAG,CAAC,GAAGP,kBAAkB,CAACU,OAAvB,EAAgC,WAAWC,MAAX,EAAmB;AAChE;AACA;AACA,UAAMC,mBAAmB,GAAGX,yBAAyB,CAACU,MAAD,CAArD;AACA,UAAME,OAAO,GAAGT,QAAQ,CAACO,MAAD,EAASR,iBAAT,CAAxB;;AAEA,UAAMW,IAAI,GAAG,MAAMZ,sBAAsB,CAACW,OAAD,CAAzC;AAAA,UACME,eAAe,GAAGD,IAAI,CAACC,eAD7B;AAAA,UAEMC,KAAK,GAAGF,IAAI,CAACE,KAFnB;AAAA,UAGMC,IAAI,GAAGH,IAAI,CAACG,IAHlB;AAAA,UAIMC,QAAQ,GAAGJ,IAAI,CAACI,QAJtB,CANgE,CAUhC;;;AAGhCA,IAAAA,QAAQ,CAACC,IAAT,CAAc,GAAGP,mBAAjB;AACA,WAAO;AACLG,MAAAA,eADK;AAELC,MAAAA,KAFK;AAGLC,MAAAA,IAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GApBc,CAAf;AAqBA,SAAOX,YAAY,CAACC,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBhB,WAAjB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst getManifestSchema = require('./options/get-manifest-schema');\n\nconst validate = require('./options/validate');\n/**\n * This method returns a list of URLs to precache, referred to as a \"precache\n * manifest\", along with details about the number of entries and their size,\n * based on the options you provide.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#getmanifest_mode).\n * @return {Promise<{manifestEntries: Array<ManifestEntry>,\n * count: number, size: number, warnings: Array<string>}>} A promise that\n * resolves once the precache manifest is determined. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, the\n * `count` property contains the total number of precached entries, and the\n * `manifestEntries` property contains all the `ManifestEntry` items. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction getManifest(_x) {\n  return _getManifest.apply(this, arguments);\n}\n\nfunction _getManifest() {\n  _getManifest = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, getManifestSchema);\n\n    const _ref = yield getFileManifestEntries(options),\n          manifestEntries = _ref.manifestEntries,\n          count = _ref.count,\n          size = _ref.size,\n          warnings = _ref.warnings; // Add in any deprecation warnings.\n\n\n    warnings.push(...deprecationWarnings);\n    return {\n      manifestEntries,\n      count,\n      size,\n      warnings\n    };\n  });\n  return _getManifest.apply(this, arguments);\n}\n\nmodule.exports = getManifest;"]},"metadata":{},"sourceType":"script"}