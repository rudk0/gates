{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst glob = require('glob');\n\nconst upath = require('upath');\n\nconst errors = require('./errors');\n\nconst getFileSize = require('./get-file-size');\n\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = ({\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPattern,\n  globStrict\n}) => {\n  let globbedFiles;\n  let warning;\n\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    warning = errors['useless-glob-pattern'] + ' ' + JSON.stringify({\n      globDirectory,\n      globPattern,\n      globIgnores\n    }, null, 2);\n  }\n\n  const fileDetails = globbedFiles.map(file => {\n    const fullPath = upath.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${upath.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize\n    };\n  }); // If !== null, means it's a valid file.\n\n  const globbedFileDetails = fileDetails.filter(details => details !== null);\n  return {\n    globbedFileDetails,\n    warning\n  };\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-file-details.js"],"names":["glob","require","upath","errors","getFileSize","getFileHash","module","exports","globDirectory","globFollow","globIgnores","globPattern","globStrict","globbedFiles","warning","sync","cwd","follow","ignore","strict","err","Error","message","length","JSON","stringify","fileDetails","map","file","fullPath","join","fileSize","fileHash","relative","hash","size","globbedFileDetails","filter","details"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMG,WAAW,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AAEA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AAEAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAChBC,EAAAA,aADgB;AAEhBC,EAAAA,UAFgB;AAGhBC,EAAAA,WAHgB;AAIhBC,EAAAA,WAJgB;AAKhBC,EAAAA;AALgB,CAAD,KAMX;AACJ,MAAIC,YAAJ;AACA,MAAIC,OAAJ;;AAEA,MAAI;AACFD,IAAAA,YAAY,GAAGb,IAAI,CAACe,IAAL,CAAUJ,WAAV,EAAuB;AACpCK,MAAAA,GAAG,EAAER,aAD+B;AAEpCS,MAAAA,MAAM,EAAER,UAF4B;AAGpCS,MAAAA,MAAM,EAAER,WAH4B;AAIpCS,MAAAA,MAAM,EAAEP;AAJ4B,KAAvB,CAAf;AAMD,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUlB,MAAM,CAAC,sBAAD,CAAN,GAAkC,KAAIiB,GAAG,CAACE,OAAQ,GAA5D,CAAN;AACD;;AAED,MAAIT,YAAY,CAACU,MAAb,KAAwB,CAA5B,EAA+B;AAC7BT,IAAAA,OAAO,GAAGX,MAAM,CAAC,sBAAD,CAAN,GAAiC,GAAjC,GAAuCqB,IAAI,CAACC,SAAL,CAAe;AAC9DjB,MAAAA,aAD8D;AAE9DG,MAAAA,WAF8D;AAG9DD,MAAAA;AAH8D,KAAf,EAI9C,IAJ8C,EAIxC,CAJwC,CAAjD;AAKD;;AAED,QAAMgB,WAAW,GAAGb,YAAY,CAACc,GAAb,CAAiBC,IAAI,IAAI;AAC3C,UAAMC,QAAQ,GAAG3B,KAAK,CAAC4B,IAAN,CAAWtB,aAAX,EAA0BoB,IAA1B,CAAjB;AACA,UAAMG,QAAQ,GAAG3B,WAAW,CAACyB,QAAD,CAA5B;;AAEA,QAAIE,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,UAAMC,QAAQ,GAAG3B,WAAW,CAACwB,QAAD,CAA5B;AACA,WAAO;AACLD,MAAAA,IAAI,EAAG,GAAE1B,KAAK,CAAC+B,QAAN,CAAezB,aAAf,EAA8BqB,QAA9B,CAAwC,EAD5C;AAELK,MAAAA,IAAI,EAAEF,QAFD;AAGLG,MAAAA,IAAI,EAAEJ;AAHD,KAAP;AAKD,GAdmB,CAApB,CAvBI,CAqCA;;AAEJ,QAAMK,kBAAkB,GAAGV,WAAW,CAACW,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,KAAK,IAA1C,CAA3B;AACA,SAAO;AACLF,IAAAA,kBADK;AAELtB,IAAAA;AAFK,GAAP;AAID,CAlDD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst glob = require('glob');\n\nconst upath = require('upath');\n\nconst errors = require('./errors');\n\nconst getFileSize = require('./get-file-size');\n\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = ({\n  globDirectory,\n  globFollow,\n  globIgnores,\n  globPattern,\n  globStrict\n}) => {\n  let globbedFiles;\n  let warning;\n\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    warning = errors['useless-glob-pattern'] + ' ' + JSON.stringify({\n      globDirectory,\n      globPattern,\n      globIgnores\n    }, null, 2);\n  }\n\n  const fileDetails = globbedFiles.map(file => {\n    const fullPath = upath.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${upath.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize\n    };\n  }); // If !== null, means it's a valid file.\n\n  const globbedFileDetails = fileDetails.filter(details => details !== null);\n  return {\n    globbedFileDetails,\n    warning\n  };\n};"]},"metadata":{},"sourceType":"script"}