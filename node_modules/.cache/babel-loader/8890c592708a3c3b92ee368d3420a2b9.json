{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _data = _interopRequireDefault(require(\"core-js-compat/data\"));\n\nvar _entries = _interopRequireDefault(require(\"core-js-compat/entries\"));\n\nvar _getModulesListForTargetVersion = _interopRequireDefault(require(\"core-js-compat/get-modules-list-for-target-version\"));\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nvar _utils = require(\"../../utils\");\n\nvar _debug = require(\"../../debug\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isBabelPolyfillSource(source) {\n  return source === \"@babel/polyfill\" || source === \"babel-polyfill\";\n}\n\nfunction isCoreJSSource(source) {\n  if (typeof source === \"string\") {\n    source = source.replace(/\\\\/g, \"/\").replace(/(\\/(index)?)?(\\.js)?$/i, \"\").toLowerCase();\n  }\n\n  return (0, _utils.has)(_entries.default, source) && _entries.default[source];\n}\n\nconst BABEL_POLYFILL_DEPRECATION = `\n  \\`@babel/polyfill\\` is deprecated. Please, use required parts of \\`core-js\\`\n  and \\`regenerator-runtime/runtime\\` separately`;\n\nfunction _default(_, {\n  corejs,\n  include,\n  exclude,\n  polyfillTargets,\n  debug\n}) {\n  const polyfills = (0, _helperCompilationTargets.filterItems)(_data.default, include, exclude, polyfillTargets, null);\n  const available = new Set((0, _getModulesListForTargetVersion.default)(corejs.version));\n\n  function shouldReplace(source, modules) {\n    if (!modules) return false;\n\n    if (modules.length === 1 && polyfills.has(modules[0]) && available.has(modules[0]) && (0, _utils.getModulePath)(modules[0]) === source) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const isPolyfillImport = {\n    ImportDeclaration(path) {\n      const source = (0, _utils.getImportSource)(path);\n      if (!source) return;\n\n      if (isBabelPolyfillSource(source)) {\n        console.warn(BABEL_POLYFILL_DEPRECATION);\n      } else {\n        const modules = isCoreJSSource(source);\n\n        if (shouldReplace(source, modules)) {\n          this.replaceBySeparateModulesImport(path, modules);\n        }\n      }\n    },\n\n    Program: {\n      enter(path) {\n        path.get(\"body\").forEach(bodyPath => {\n          const source = (0, _utils.getRequireSource)(bodyPath);\n          if (!source) return;\n\n          if (isBabelPolyfillSource(source)) {\n            console.warn(BABEL_POLYFILL_DEPRECATION);\n          } else {\n            const modules = isCoreJSSource(source);\n\n            if (shouldReplace(source, modules)) {\n              this.replaceBySeparateModulesImport(bodyPath, modules);\n            }\n          }\n        });\n      },\n\n      exit(path) {\n        const filtered = (0, _utils.intersection)(polyfills, this.polyfillsSet, available);\n        const reversed = Array.from(filtered).reverse();\n\n        for (const module of reversed) {\n          if (!this.injectedPolyfills.has(module)) {\n            (0, _utils.createImport)(path, module);\n          }\n        }\n\n        filtered.forEach(module => this.injectedPolyfills.add(module));\n      }\n\n    }\n  };\n  return {\n    name: \"corejs3-entry\",\n    visitor: isPolyfillImport,\n\n    pre() {\n      this.injectedPolyfills = new Set();\n      this.polyfillsSet = new Set();\n\n      this.replaceBySeparateModulesImport = function (path, modules) {\n        for (const module of modules) {\n          this.polyfillsSet.add(module);\n        }\n\n        path.remove();\n      };\n    },\n\n    post() {\n      if (debug) {\n        (0, _debug.logEntryPolyfills)(\"core-js\", this.injectedPolyfills.size > 0, this.injectedPolyfills, this.file.opts.filename, polyfillTargets, _data.default);\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-env/lib/polyfills/corejs3/entry-plugin.js"],"names":["Object","defineProperty","exports","value","default","_default","_data","_interopRequireDefault","require","_entries","_getModulesListForTargetVersion","_helperCompilationTargets","_utils","_debug","obj","__esModule","isBabelPolyfillSource","source","isCoreJSSource","replace","toLowerCase","has","BABEL_POLYFILL_DEPRECATION","_","corejs","include","exclude","polyfillTargets","debug","polyfills","filterItems","available","Set","version","shouldReplace","modules","length","getModulePath","isPolyfillImport","ImportDeclaration","path","getImportSource","console","warn","replaceBySeparateModulesImport","Program","enter","get","forEach","bodyPath","getRequireSource","exit","filtered","intersection","polyfillsSet","reversed","Array","from","reverse","module","injectedPolyfills","createImport","add","name","visitor","pre","remove","post","logEntryPolyfills","size","file","opts","filename"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _data = _interopRequireDefault(require(\"core-js-compat/data\"));\n\nvar _entries = _interopRequireDefault(require(\"core-js-compat/entries\"));\n\nvar _getModulesListForTargetVersion = _interopRequireDefault(require(\"core-js-compat/get-modules-list-for-target-version\"));\n\nvar _helperCompilationTargets = require(\"@babel/helper-compilation-targets\");\n\nvar _utils = require(\"../../utils\");\n\nvar _debug = require(\"../../debug\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction isBabelPolyfillSource(source) {\n  return source === \"@babel/polyfill\" || source === \"babel-polyfill\";\n}\n\nfunction isCoreJSSource(source) {\n  if (typeof source === \"string\") {\n    source = source.replace(/\\\\/g, \"/\").replace(/(\\/(index)?)?(\\.js)?$/i, \"\").toLowerCase();\n  }\n\n  return (0, _utils.has)(_entries.default, source) && _entries.default[source];\n}\n\nconst BABEL_POLYFILL_DEPRECATION = `\n  \\`@babel/polyfill\\` is deprecated. Please, use required parts of \\`core-js\\`\n  and \\`regenerator-runtime/runtime\\` separately`;\n\nfunction _default(_, {\n  corejs,\n  include,\n  exclude,\n  polyfillTargets,\n  debug\n}) {\n  const polyfills = (0, _helperCompilationTargets.filterItems)(_data.default, include, exclude, polyfillTargets, null);\n  const available = new Set((0, _getModulesListForTargetVersion.default)(corejs.version));\n\n  function shouldReplace(source, modules) {\n    if (!modules) return false;\n\n    if (modules.length === 1 && polyfills.has(modules[0]) && available.has(modules[0]) && (0, _utils.getModulePath)(modules[0]) === source) {\n      return false;\n    }\n\n    return true;\n  }\n\n  const isPolyfillImport = {\n    ImportDeclaration(path) {\n      const source = (0, _utils.getImportSource)(path);\n      if (!source) return;\n\n      if (isBabelPolyfillSource(source)) {\n        console.warn(BABEL_POLYFILL_DEPRECATION);\n      } else {\n        const modules = isCoreJSSource(source);\n\n        if (shouldReplace(source, modules)) {\n          this.replaceBySeparateModulesImport(path, modules);\n        }\n      }\n    },\n\n    Program: {\n      enter(path) {\n        path.get(\"body\").forEach(bodyPath => {\n          const source = (0, _utils.getRequireSource)(bodyPath);\n          if (!source) return;\n\n          if (isBabelPolyfillSource(source)) {\n            console.warn(BABEL_POLYFILL_DEPRECATION);\n          } else {\n            const modules = isCoreJSSource(source);\n\n            if (shouldReplace(source, modules)) {\n              this.replaceBySeparateModulesImport(bodyPath, modules);\n            }\n          }\n        });\n      },\n\n      exit(path) {\n        const filtered = (0, _utils.intersection)(polyfills, this.polyfillsSet, available);\n        const reversed = Array.from(filtered).reverse();\n\n        for (const module of reversed) {\n          if (!this.injectedPolyfills.has(module)) {\n            (0, _utils.createImport)(path, module);\n          }\n        }\n\n        filtered.forEach(module => this.injectedPolyfills.add(module));\n      }\n\n    }\n  };\n  return {\n    name: \"corejs3-entry\",\n    visitor: isPolyfillImport,\n\n    pre() {\n      this.injectedPolyfills = new Set();\n      this.polyfillsSet = new Set();\n\n      this.replaceBySeparateModulesImport = function (path, modules) {\n        for (const module of modules) {\n          this.polyfillsSet.add(module);\n        }\n\n        path.remove();\n      };\n    },\n\n    post() {\n      if (debug) {\n        (0, _debug.logEntryPolyfills)(\"core-js\", this.injectedPolyfills.size > 0, this.injectedPolyfills, this.file.opts.filename, polyfillTargets, _data.default);\n      }\n    }\n\n  };\n}"]},"metadata":{},"sourceType":"script"}