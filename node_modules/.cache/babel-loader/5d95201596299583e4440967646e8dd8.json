{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar leap = _interopRequireWildcard(require(\"./leap\"));\n\nvar meta = _interopRequireWildcard(require(\"./meta\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert[\"default\"].ok(this instanceof Emitter);\n\n  util.getTypes().assertIdentifier(contextId); // Used to generate unique temporary names.\n\n  this.nextTempId = 0; // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n\n  this.contextId = contextId; // An append-only list of Statements that grows each time this.emit is\n  // called.\n\n  this.listing = []; // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n\n  this.marked = [true];\n  this.insertedLocs = new Set(); // The last location will be marked when this.getDispatchLoop is\n  // called.\n\n  this.finalLoc = this.loc(); // A list of all leap.TryEntry statements emitted.\n\n  this.tryEntries = []; // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter; // Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\n\nEp.loc = function () {\n  var l = util.getTypes().numericLiteral(-1);\n  this.insertedLocs.add(l);\n  return l;\n};\n\nEp.getInsertedLocs = function () {\n  return this.insertedLocs;\n};\n\nEp.getContextId = function () {\n  return util.getTypes().clone(this.contextId);\n}; // Sets the exact value of the given location to the offset of the next\n// Statement emitted.\n\n\nEp.mark = function (loc) {\n  util.getTypes().assertLiteral(loc);\n  var index = this.listing.length;\n\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert[\"default\"].strictEqual(loc.value, index);\n  }\n\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  var t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n}; // Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\n\n\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n}; // Shorthand for an assignment statement.\n\n\nEp.assign = function (lhs, rhs) {\n  var t = util.getTypes();\n  return t.expressionStatement(t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n}; // Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\n\n\nEp.contextProperty = function (name, computed) {\n  var t = util.getTypes();\n  return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n}; // Shorthand for setting context.rval and jumping to `context.stop()`.\n\n\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  var t = util.getTypes();\n  t.assertLiteral(tryLoc);\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [t.clone(tryLoc)]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n}; // Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\n\n\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n}; // Conditional jump.\n\n\nEp.jumpIf = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Conditional jump, with the condition negated.\n\n\nEp.jumpIfNot = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  var negatedTest;\n\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\n\n\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  var t = util.getTypes();\n  return t.functionExpression(id || null\n  /*Anonymous*/\n  , [this.getContextId()], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n}; // Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\n\n\nEp.getDispatchLoop = function () {\n  var self = this;\n  var t = util.getTypes();\n  var cases = [];\n  var current; // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n\n  var alreadyEnded = false;\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  }); // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n\n  this.finalLoc.value = this.listing.length;\n  cases.push(t.switchCase(this.finalLoc, [// Intentionally fall through to the \"end\" case...\n  ]), // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [// This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var t = util.getTypes();\n  var lastLocValue = 0;\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n\n    _assert[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n\n    lastLocValue = thisLocValue;\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n    var locs = [tryEntry.firstLoc, // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs.map(function (loc) {\n      return loc && t.clone(loc);\n    }));\n  }));\n}; // All side effects must be realized in order.\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n// No destructive modification of AST nodes.\n\n\nEp.explode = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var node = path.node;\n  var self = this;\n  t.assertNode(node);\n  if (t.isDeclaration(node)) throw getDeclError(node);\n  if (t.isStatement(node)) return self.explodeStatement(path);\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var t = util.getTypes();\n  var stmt = path.node;\n  var self = this;\n  var before, after, head;\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  } // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n\n\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = this.loc(); // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n      self.mark(after);\n      break;\n\n    case \"WhileStatement\":\n      before = this.loc();\n      after = this.loc();\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n      break;\n\n    case \"DoWhileStatement\":\n      var first = this.loc();\n      var test = this.loc();\n      after = this.loc();\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n      break;\n\n    case \"ForStatement\":\n      head = this.loc();\n      var update = this.loc();\n      after = this.loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {// No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = this.loc();\n      after = this.loc();\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n      self.mark(head);\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier(\"done\"), false), after);\n      self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier(\"value\"), false));\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n      after = this.loc();\n      var defaultLoc = this.loc();\n      var condition = defaultLoc;\n      var caseLocs = []; // If there are no cases, .cases might be undefined.\n\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      util.replaceWithOrRemove(discriminant, condition);\n      self.jump(self.explodeExpression(discriminant));\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n      self.mark(after);\n\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n\n        _assert[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && this.loc();\n      after = this.loc();\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = this.loc();\n      var handler = stmt.handler;\n      var catchLoc = handler && this.loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n      var finallyLoc = stmt.finalizer && this.loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          if (finallyLoc) {\n            // If we have both a catch block and a finally block, then\n            // because we emit the catch block first, we need to jump over\n            // it to the finally block.\n            self.jump(finallyLoc);\n          } else {\n            // If there is no finally block, then we need to jump over the\n            // catch block to the fall-through location.\n            self.jump(after);\n          }\n\n          self.updateContextPrevLoc(self.mark(catchLoc));\n          var bodyPath = path.get(\"handler.body\");\n          var safeParam = self.makeTempVar();\n          self.clearPendingException(tryEntry.firstLoc, safeParam);\n          bodyPath.traverse(catchParamVisitor, {\n            getSafeParam: function getSafeParam() {\n              return t.cloneDeep(safeParam);\n            },\n            catchParamName: handler.param.name\n          });\n          self.leapManager.withEntry(catchEntry, function () {\n            self.explodeStatement(bodyPath);\n          });\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n      self.mark(after);\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var t = util.getTypes();\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n} // Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\n\n\nEp.getUnmarkedCurrentLoc = function () {\n  return util.getTypes().numericLiteral(this.listing.length);\n}; // The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\n\n\nEp.updateContextPrevLoc = function (loc) {\n  var t = util.getTypes();\n\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  } // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n\n\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var expr = path.node;\n\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result; // Used optionally by several cases below.\n\n  var after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  } // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n\n\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  } // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n\n\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr); // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {// Side effects already emitted above.\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(tempVar || self.makeTempVar(), result);\n    }\n\n    return result;\n  } // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n      var newCallee;\n      var newArgs;\n      var hasLeapingArgs = argsPath.some(function (argPath) {\n        return meta.containsLeap(argPath.node);\n      });\n      var injectFirstArg = null;\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n          var newObject = explodeViaTempVar( // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n          injectFirstArg = newObject;\n          newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = explodeViaTempVar(null, calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), t.cloneDeep(newCallee)]);\n        }\n      }\n\n      if (hasLeapingArgs) {\n        newArgs = argsPath.map(function (argPath) {\n          return explodeViaTempVar(null, argPath);\n        });\n        if (injectFirstArg) newArgs.unshift(injectFirstArg);\n        newArgs = newArgs.map(function (arg) {\n          return t.cloneDeep(arg);\n        });\n      } else {\n        newArgs = path.node.arguments;\n      }\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(explodeViaTempVar(null, elemPath.get(\"argument\")));\n        } else {\n          return explodeViaTempVar(null, elemPath);\n        }\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n      return result;\n\n    case \"LogicalExpression\":\n      after = this.loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert[\"default\"].strictEqual(expr.operator, \"||\");\n\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = this.loc();\n      after = this.loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      if (expr.operator === \"=\") {\n        // If this is a simple assignment, the left hand side does not need\n        // to be read before the right hand side is evaluated, so we can\n        // avoid the more complicated logic below.\n        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n      }\n\n      var lhs = self.explodeExpression(path.get(\"left\"));\n      var temp = self.emitAssign(self.makeTempVar(), lhs); // For example,\n      //\n      //   x += yield y\n      //\n      // becomes\n      //\n      //   context.t0 = x\n      //   x = context.t0 += yield y\n      //\n      // so that the left-hand side expression is read before the yield.\n      // Fixes https://github.com/facebook/regenerator/issues/345.\n\n      return finish(t.assignmentExpression(\"=\", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get(\"right\")))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = this.loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        var _ret = t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after]));\n\n        _ret.loc = expr.loc;\n        self.emit(_ret);\n        self.mark(after);\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      var ret = t.returnStatement(t.cloneDeep(arg) || null); // Preserve the `yield` location so that source mappings for the statements\n      // link back to the yield properly.\n\n      ret.loc = expr.loc;\n      self.emit(ret);\n      self.mark(after);\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/regenerator-transform/lib/emit.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","_assert","leap","meta","util","hasOwn","Object","prototype","hasOwnProperty","Emitter","contextId","ok","getTypes","assertIdentifier","nextTempId","listing","marked","insertedLocs","Set","finalLoc","loc","tryEntries","leapManager","LeapManager","Ep","exports","l","numericLiteral","add","getInsertedLocs","getContextId","clone","mark","assertLiteral","index","length","value","strictEqual","emit","node","t","isExpression","expressionStatement","assertStatement","push","emitAssign","lhs","rhs","assign","assignmentExpression","cloneDeep","contextProperty","name","computed","memberExpression","stringLiteral","identifier","stop","rval","setReturnValue","jump","valuePath","assertExpression","explodeExpression","clearPendingException","tryLoc","assignee","catchCall","callExpression","toLoc","breakStatement","jumpIf","test","ifStatement","blockStatement","jumpIfNot","negatedTest","isUnaryExpression","operator","argument","unaryExpression","makeTempVar","getContextFunction","id","functionExpression","getDispatchLoop","self","cases","current","alreadyEnded","forEach","stmt","i","switchCase","isCompletionStatement","returnStatement","whileStatement","switchStatement","getTryLocsList","lastLocValue","arrayExpression","map","tryEntry","thisLocValue","firstLoc","ce","catchEntry","fe","finallyEntry","locs","afterLoc","explode","path","ignoreResult","assertNode","isDeclaration","getDeclError","isStatement","explodeStatement","type","get","Error","JSON","stringify","labelId","before","after","head","isBlockStatement","containsLeap","withEntry","LabeledEntry","label","LoopEntry","first","update","init","keyIterNextFn","runtimeProperty","keyInfoTmpVar","left","emitAbruptCompletion","target","getBreakLoc","getContinueLoc","disc","defaultLoc","condition","caseLocs","c","assertSwitchCase","conditionalExpression","binaryExpression","discriminant","replaceWithOrRemove","SwitchEntry","casePath","key","elseLoc","alternate","handler","catchLoc","CatchEntry","param","finallyLoc","finalizer","FinallyEntry","TryEntry","getUnmarkedCurrentLoc","updateContextPrevLoc","bodyPath","safeParam","traverse","catchParamVisitor","getSafeParam","catchParamName","throwStatement","Identifier","state","isReference","Scope","scope","hasOwnBinding","skip","record","isValidCompletion","notStrictEqual","abruptArgs","has","call","isLiteral","expr","result","finish","hasLeapingChildren","onlyChildren","explodeViaTempVar","tempVar","childPath","ignoreChildResult","property","calleePath","argsPath","newCallee","newArgs","hasLeapingArgs","some","argPath","injectFirstArg","isMemberExpression","newObject","newProperty","sequenceExpression","unshift","arg","arguments","newExpression","objectExpression","propPath","isObjectProperty","objectProperty","elemPath","isSpreadElement","spreadElement","lastIndex","expressions","exprPath","prefix","temp","updateExpression","delegate","_result","_ret","ret"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _assert = _interopRequireDefault(require(\"assert\"));\n\nvar leap = _interopRequireWildcard(require(\"./leap\"));\n\nvar meta = _interopRequireWildcard(require(\"./meta\"));\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert[\"default\"].ok(this instanceof Emitter);\n\n  util.getTypes().assertIdentifier(contextId); // Used to generate unique temporary names.\n\n  this.nextTempId = 0; // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n\n  this.contextId = contextId; // An append-only list of Statements that grows each time this.emit is\n  // called.\n\n  this.listing = []; // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n\n  this.marked = [true];\n  this.insertedLocs = new Set(); // The last location will be marked when this.getDispatchLoop is\n  // called.\n\n  this.finalLoc = this.loc(); // A list of all leap.TryEntry statements emitted.\n\n  this.tryEntries = []; // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter; // Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\n\nEp.loc = function () {\n  var l = util.getTypes().numericLiteral(-1);\n  this.insertedLocs.add(l);\n  return l;\n};\n\nEp.getInsertedLocs = function () {\n  return this.insertedLocs;\n};\n\nEp.getContextId = function () {\n  return util.getTypes().clone(this.contextId);\n}; // Sets the exact value of the given location to the offset of the next\n// Statement emitted.\n\n\nEp.mark = function (loc) {\n  util.getTypes().assertLiteral(loc);\n  var index = this.listing.length;\n\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert[\"default\"].strictEqual(loc.value, index);\n  }\n\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  var t = util.getTypes();\n\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n}; // Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\n\n\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n}; // Shorthand for an assignment statement.\n\n\nEp.assign = function (lhs, rhs) {\n  var t = util.getTypes();\n  return t.expressionStatement(t.assignmentExpression(\"=\", t.cloneDeep(lhs), rhs));\n}; // Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\n\n\nEp.contextProperty = function (name, computed) {\n  var t = util.getTypes();\n  return t.memberExpression(this.getContextId(), computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n}; // Shorthand for setting context.rval and jumping to `context.stop()`.\n\n\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  util.getTypes().assertExpression(valuePath.value);\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  var t = util.getTypes();\n  t.assertLiteral(tryLoc);\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [t.clone(tryLoc)]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n}; // Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\n\n\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(util.getTypes().breakStatement());\n}; // Conditional jump.\n\n\nEp.jumpIf = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Conditional jump, with the condition negated.\n\n\nEp.jumpIfNot = function (test, toLoc) {\n  var t = util.getTypes();\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n  var negatedTest;\n\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n}; // Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\n\n\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  var t = util.getTypes();\n  return t.functionExpression(id || null\n  /*Anonymous*/\n  , [this.getContextId()], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n}; // Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\n\n\nEp.getDispatchLoop = function () {\n  var self = this;\n  var t = util.getTypes();\n  var cases = [];\n  var current; // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n\n  var alreadyEnded = false;\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  }); // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n\n  this.finalLoc.value = this.listing.length;\n  cases.push(t.switchCase(this.finalLoc, [// Intentionally fall through to the \"end\" case...\n  ]), // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [// This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var t = util.getTypes();\n  var lastLocValue = 0;\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n\n    _assert[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n\n    lastLocValue = thisLocValue;\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n    var locs = [tryEntry.firstLoc, // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs.map(function (loc) {\n      return loc && t.clone(loc);\n    }));\n  }));\n}; // All side effects must be realized in order.\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n// No destructive modification of AST nodes.\n\n\nEp.explode = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var node = path.node;\n  var self = this;\n  t.assertNode(node);\n  if (t.isDeclaration(node)) throw getDeclError(node);\n  if (t.isStatement(node)) return self.explodeStatement(path);\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var t = util.getTypes();\n  var stmt = path.node;\n  var self = this;\n  var before, after, head;\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  } // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n\n\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = this.loc(); // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n      self.mark(after);\n      break;\n\n    case \"WhileStatement\":\n      before = this.loc();\n      after = this.loc();\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n      break;\n\n    case \"DoWhileStatement\":\n      var first = this.loc();\n      var test = this.loc();\n      after = this.loc();\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n      break;\n\n    case \"ForStatement\":\n      head = this.loc();\n      var update = this.loc();\n      after = this.loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {// No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = this.loc();\n      after = this.loc();\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n      self.mark(head);\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(t.cloneDeep(keyIterNextFn), [])), t.identifier(\"done\"), false), after);\n      self.emitAssign(stmt.left, t.memberExpression(t.cloneDeep(keyInfoTmpVar), t.identifier(\"value\"), false));\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(head);\n      self.mark(after);\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n      after = this.loc();\n      var defaultLoc = this.loc();\n      var condition = defaultLoc;\n      var caseLocs = []; // If there are no cases, .cases might be undefined.\n\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", t.cloneDeep(disc), c.test), caseLocs[i] = this.loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      util.replaceWithOrRemove(discriminant, condition);\n      self.jump(self.explodeExpression(discriminant));\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n      self.mark(after);\n\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n\n        _assert[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && this.loc();\n      after = this.loc();\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = this.loc();\n      var handler = stmt.handler;\n      var catchLoc = handler && this.loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n      var finallyLoc = stmt.finalizer && this.loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          if (finallyLoc) {\n            // If we have both a catch block and a finally block, then\n            // because we emit the catch block first, we need to jump over\n            // it to the finally block.\n            self.jump(finallyLoc);\n          } else {\n            // If there is no finally block, then we need to jump over the\n            // catch block to the fall-through location.\n            self.jump(after);\n          }\n\n          self.updateContextPrevLoc(self.mark(catchLoc));\n          var bodyPath = path.get(\"handler.body\");\n          var safeParam = self.makeTempVar();\n          self.clearPendingException(tryEntry.firstLoc, safeParam);\n          bodyPath.traverse(catchParamVisitor, {\n            getSafeParam: function getSafeParam() {\n              return t.cloneDeep(safeParam);\n            },\n            catchParamName: handler.param.name\n          });\n          self.leapManager.withEntry(catchEntry, function () {\n            self.explodeStatement(bodyPath);\n          });\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n      self.mark(after);\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      util.replaceWithOrRemove(path, state.getSafeParam());\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var t = util.getTypes();\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = this.insertedLocs.has(record.target) ? record.target : t.cloneDeep(record.target);\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = this.insertedLocs.has(record.value) ? record.value : t.cloneDeep(record.value);\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && util.getTypes().isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n} // Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\n\n\nEp.getUnmarkedCurrentLoc = function () {\n  return util.getTypes().numericLiteral(this.listing.length);\n}; // The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\n\n\nEp.updateContextPrevLoc = function (loc) {\n  var t = util.getTypes();\n\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  } // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n\n\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var t = util.getTypes();\n  var expr = path.node;\n\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result; // Used optionally by several cases below.\n\n  var after;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  } // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n\n\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  } // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n\n\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr); // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {// Side effects already emitted above.\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n      // If tempVar was provided, then the result will always be assigned\n      // to it, even if the result does not otherwise need to be assigned\n      // to a temporary variable.  When no tempVar is provided, we have\n      // the flexibility to decide whether a temporary variable is really\n      // necessary.  Unfortunately, in general, a temporary variable is\n      // required whenever any child contains a yield expression, since it\n      // is difficult to prove (at all, let alone efficiently) whether\n      // this result would evaluate to the same value before and after the\n      // yield (see #206).  One narrow case where we can prove it doesn't\n      // matter (and thus we do not need a temporary variable) is when the\n      // result in question is a Literal value.\n      result = self.emitAssign(tempVar || self.makeTempVar(), result);\n    }\n\n    return result;\n  } // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n      var newCallee;\n      var newArgs;\n      var hasLeapingArgs = argsPath.some(function (argPath) {\n        return meta.containsLeap(argPath.node);\n      });\n      var injectFirstArg = null;\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n          var newObject = explodeViaTempVar( // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n          injectFirstArg = newObject;\n          newCallee = t.memberExpression(t.memberExpression(t.cloneDeep(newObject), newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = explodeViaTempVar(null, calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), t.cloneDeep(newCallee)]);\n        }\n      }\n\n      if (hasLeapingArgs) {\n        newArgs = argsPath.map(function (argPath) {\n          return explodeViaTempVar(null, argPath);\n        });\n        if (injectFirstArg) newArgs.unshift(injectFirstArg);\n        newArgs = newArgs.map(function (arg) {\n          return t.cloneDeep(arg);\n        });\n      } else {\n        newArgs = path.node.arguments;\n      }\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        if (elemPath.isSpreadElement()) {\n          return t.spreadElement(explodeViaTempVar(null, elemPath.get(\"argument\")));\n        } else {\n          return explodeViaTempVar(null, elemPath);\n        }\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n      return result;\n\n    case \"LogicalExpression\":\n      after = this.loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert[\"default\"].strictEqual(expr.operator, \"||\");\n\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = this.loc();\n      after = this.loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n      self.mark(after);\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator, // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      if (expr.operator === \"=\") {\n        // If this is a simple assignment, the left hand side does not need\n        // to be read before the right hand side is evaluated, so we can\n        // avoid the more complicated logic below.\n        return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n      }\n\n      var lhs = self.explodeExpression(path.get(\"left\"));\n      var temp = self.emitAssign(self.makeTempVar(), lhs); // For example,\n      //\n      //   x += yield y\n      //\n      // becomes\n      //\n      //   context.t0 = x\n      //   x = context.t0 += yield y\n      //\n      // so that the left-hand side expression is read before the yield.\n      // Fixes https://github.com/facebook/regenerator/issues/345.\n\n      return finish(t.assignmentExpression(\"=\", t.cloneDeep(lhs), t.assignmentExpression(expr.operator, t.cloneDeep(temp), self.explodeExpression(path.get(\"right\")))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = this.loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        var _ret = t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after]));\n\n        _ret.loc = expr.loc;\n        self.emit(_ret);\n        self.mark(after);\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      var ret = t.returnStatement(t.cloneDeep(arg) || null); // Preserve the `yield` location so that source mappings for the statements\n      // link back to the yield properly.\n\n      ret.loc = expr.loc;\n      self.emit(ret);\n      self.mark(after);\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};"]},"metadata":{},"sourceType":"script"}