{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst glob = require('glob');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst getFileSize = require('./get-file-size');\n\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = globOptions => {\n  const globDirectory = globOptions.globDirectory,\n        globFollow = globOptions.globFollow,\n        globIgnores = globOptions.globIgnores,\n        globPattern = globOptions.globPattern,\n        globStrict = globOptions.globStrict;\n  let globbedFiles;\n\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    throw new Error(errors['useless-glob-pattern'] + ' ' + JSON.stringify({\n      globDirectory,\n      globPattern,\n      globIgnores\n    }, null, 2));\n  }\n\n  const fileDetails = globbedFiles.map(file => {\n    const fullPath = path.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${path.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize\n    };\n  }); // If !== null, means it's a valid file.\n\n  return fileDetails.filter(details => details !== null);\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/lib/get-file-details.js"],"names":["glob","require","path","errors","getFileSize","getFileHash","module","exports","globOptions","globDirectory","globFollow","globIgnores","globPattern","globStrict","globbedFiles","sync","cwd","follow","ignore","strict","err","Error","message","length","JSON","stringify","fileDetails","map","file","fullPath","join","fileSize","fileHash","relative","hash","size","filter","details"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEA,MAAMG,WAAW,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AAEA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AAEAK,MAAM,CAACC,OAAP,GAAiBC,WAAW,IAAI;AAC9B,QAAMC,aAAa,GAAGD,WAAW,CAACC,aAAlC;AAAA,QACMC,UAAU,GAAGF,WAAW,CAACE,UAD/B;AAAA,QAEMC,WAAW,GAAGH,WAAW,CAACG,WAFhC;AAAA,QAGMC,WAAW,GAAGJ,WAAW,CAACI,WAHhC;AAAA,QAIMC,UAAU,GAAGL,WAAW,CAACK,UAJ/B;AAKA,MAAIC,YAAJ;;AAEA,MAAI;AACFA,IAAAA,YAAY,GAAGd,IAAI,CAACe,IAAL,CAAUH,WAAV,EAAuB;AACpCI,MAAAA,GAAG,EAAEP,aAD+B;AAEpCQ,MAAAA,MAAM,EAAEP,UAF4B;AAGpCQ,MAAAA,MAAM,EAAEP,WAH4B;AAIpCQ,MAAAA,MAAM,EAAEN;AAJ4B,KAAvB,CAAf;AAMD,GAPD,CAOE,OAAOO,GAAP,EAAY;AACZ,UAAM,IAAIC,KAAJ,CAAUlB,MAAM,CAAC,sBAAD,CAAN,GAAkC,KAAIiB,GAAG,CAACE,OAAQ,GAA5D,CAAN;AACD;;AAED,MAAIR,YAAY,CAACS,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,UAAM,IAAIF,KAAJ,CAAUlB,MAAM,CAAC,sBAAD,CAAN,GAAiC,GAAjC,GAAuCqB,IAAI,CAACC,SAAL,CAAe;AACpEhB,MAAAA,aADoE;AAEpEG,MAAAA,WAFoE;AAGpED,MAAAA;AAHoE,KAAf,EAIpD,IAJoD,EAI9C,CAJ8C,CAAjD,CAAN;AAKD;;AAED,QAAMe,WAAW,GAAGZ,YAAY,CAACa,GAAb,CAAiBC,IAAI,IAAI;AAC3C,UAAMC,QAAQ,GAAG3B,IAAI,CAAC4B,IAAL,CAAUrB,aAAV,EAAyBmB,IAAzB,CAAjB;AACA,UAAMG,QAAQ,GAAG3B,WAAW,CAACyB,QAAD,CAA5B;;AAEA,QAAIE,QAAQ,KAAK,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,UAAMC,QAAQ,GAAG3B,WAAW,CAACwB,QAAD,CAA5B;AACA,WAAO;AACLD,MAAAA,IAAI,EAAG,GAAE1B,IAAI,CAAC+B,QAAL,CAAcxB,aAAd,EAA6BoB,QAA7B,CAAuC,EAD3C;AAELK,MAAAA,IAAI,EAAEF,QAFD;AAGLG,MAAAA,IAAI,EAAEJ;AAHD,KAAP;AAKD,GAdmB,CAApB,CA3B8B,CAyC1B;;AAEJ,SAAOL,WAAW,CAACU,MAAZ,CAAmBC,OAAO,IAAIA,OAAO,KAAK,IAA1C,CAAP;AACD,CA5CD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst glob = require('glob');\n\nconst path = require('path');\n\nconst errors = require('./errors');\n\nconst getFileSize = require('./get-file-size');\n\nconst getFileHash = require('./get-file-hash');\n\nmodule.exports = globOptions => {\n  const globDirectory = globOptions.globDirectory,\n        globFollow = globOptions.globFollow,\n        globIgnores = globOptions.globIgnores,\n        globPattern = globOptions.globPattern,\n        globStrict = globOptions.globStrict;\n  let globbedFiles;\n\n  try {\n    globbedFiles = glob.sync(globPattern, {\n      cwd: globDirectory,\n      follow: globFollow,\n      ignore: globIgnores,\n      strict: globStrict\n    });\n  } catch (err) {\n    throw new Error(errors['unable-to-glob-files'] + ` '${err.message}'`);\n  }\n\n  if (globbedFiles.length === 0) {\n    throw new Error(errors['useless-glob-pattern'] + ' ' + JSON.stringify({\n      globDirectory,\n      globPattern,\n      globIgnores\n    }, null, 2));\n  }\n\n  const fileDetails = globbedFiles.map(file => {\n    const fullPath = path.join(globDirectory, file);\n    const fileSize = getFileSize(fullPath);\n\n    if (fileSize === null) {\n      return null;\n    }\n\n    const fileHash = getFileHash(fullPath);\n    return {\n      file: `${path.relative(globDirectory, fullPath)}`,\n      hash: fileHash,\n      size: fileSize\n    };\n  }); // If !== null, means it's a valid file.\n\n  return fileDetails.filter(details => details !== null);\n};"]},"metadata":{},"sourceType":"script"}