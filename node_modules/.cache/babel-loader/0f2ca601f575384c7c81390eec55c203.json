{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.wrapWithTypes = wrapWithTypes;\nexports.getTypes = getTypes;\nexports.runtimeProperty = runtimeProperty;\nexports.isReference = isReference;\nexports.replaceWithOrRemove = replaceWithOrRemove;\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar currentTypes = null;\n\nfunction wrapWithTypes(types, fn) {\n  return function () {\n    var oldTypes = currentTypes;\n    currentTypes = types;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return fn.apply(this, args);\n    } finally {\n      currentTypes = oldTypes;\n    }\n  };\n}\n\nfunction getTypes() {\n  return currentTypes;\n}\n\nfunction runtimeProperty(name) {\n  var t = getTypes();\n  return t.memberExpression(t.identifier(\"regeneratorRuntime\"), t.identifier(name), false);\n}\n\nfunction isReference(path) {\n  return path.isReferenced() || path.parentPath.isAssignmentExpression({\n    left: path.node\n  });\n}\n\nfunction replaceWithOrRemove(path, replacement) {\n  if (replacement) {\n    path.replaceWith(replacement);\n  } else {\n    path.remove();\n  }\n}","map":{"version":3,"sources":["/home/agatha/open/node_modules/regenerator-transform/lib/util.js"],"names":["exports","__esModule","wrapWithTypes","getTypes","runtimeProperty","isReference","replaceWithOrRemove","currentTypes","types","fn","oldTypes","_len","arguments","length","args","Array","_key","apply","name","t","memberExpression","identifier","path","isReferenced","parentPath","isAssignmentExpression","left","node","replacement","replaceWith","remove"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACAH,OAAO,CAACI,eAAR,GAA0BA,eAA1B;AACAJ,OAAO,CAACK,WAAR,GAAsBA,WAAtB;AACAL,OAAO,CAACM,mBAAR,GAA8BA,mBAA9B;AAEA;;;;;;;AAMA,IAAIC,YAAY,GAAG,IAAnB;;AAEA,SAASL,aAAT,CAAuBM,KAAvB,EAA8BC,EAA9B,EAAkC;AAChC,SAAO,YAAY;AACjB,QAAIC,QAAQ,GAAGH,YAAf;AACAA,IAAAA,YAAY,GAAGC,KAAf;;AAEA,QAAI;AACF,WAAK,IAAIG,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,QAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,aAAOP,EAAE,CAACQ,KAAH,CAAS,IAAT,EAAeH,IAAf,CAAP;AACD,KAND,SAMU;AACRP,MAAAA,YAAY,GAAGG,QAAf;AACD;AACF,GAbD;AAcD;;AAED,SAASP,QAAT,GAAoB;AAClB,SAAOI,YAAP;AACD;;AAED,SAASH,eAAT,CAAyBc,IAAzB,EAA+B;AAC7B,MAAIC,CAAC,GAAGhB,QAAQ,EAAhB;AACA,SAAOgB,CAAC,CAACC,gBAAF,CAAmBD,CAAC,CAACE,UAAF,CAAa,oBAAb,CAAnB,EAAuDF,CAAC,CAACE,UAAF,CAAaH,IAAb,CAAvD,EAA2E,KAA3E,CAAP;AACD;;AAED,SAASb,WAAT,CAAqBiB,IAArB,EAA2B;AACzB,SAAOA,IAAI,CAACC,YAAL,MAAuBD,IAAI,CAACE,UAAL,CAAgBC,sBAAhB,CAAuC;AACnEC,IAAAA,IAAI,EAAEJ,IAAI,CAACK;AADwD,GAAvC,CAA9B;AAGD;;AAED,SAASrB,mBAAT,CAA6BgB,IAA7B,EAAmCM,WAAnC,EAAgD;AAC9C,MAAIA,WAAJ,EAAiB;AACfN,IAAAA,IAAI,CAACO,WAAL,CAAiBD,WAAjB;AACD,GAFD,MAEO;AACLN,IAAAA,IAAI,CAACQ,MAAL;AACD;AACF","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.wrapWithTypes = wrapWithTypes;\nexports.getTypes = getTypes;\nexports.runtimeProperty = runtimeProperty;\nexports.isReference = isReference;\nexports.replaceWithOrRemove = replaceWithOrRemove;\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar currentTypes = null;\n\nfunction wrapWithTypes(types, fn) {\n  return function () {\n    var oldTypes = currentTypes;\n    currentTypes = types;\n\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return fn.apply(this, args);\n    } finally {\n      currentTypes = oldTypes;\n    }\n  };\n}\n\nfunction getTypes() {\n  return currentTypes;\n}\n\nfunction runtimeProperty(name) {\n  var t = getTypes();\n  return t.memberExpression(t.identifier(\"regeneratorRuntime\"), t.identifier(name), false);\n}\n\nfunction isReference(path) {\n  return path.isReferenced() || path.parentPath.isAssignmentExpression({\n    left: path.node\n  });\n}\n\nfunction replaceWithOrRemove(path, replacement) {\n  if (replacement) {\n    path.replaceWith(replacement);\n  } else {\n    path.remove();\n  }\n}"]},"metadata":{},"sourceType":"script"}