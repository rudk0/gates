{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar PRECACHE='precache-v1';var RUNTIME='runtime';// A list of local resources we always want to be cached.\nvar PRECACHE_URLS=['index.html','./',// Alias for index.html\n'styles.css','../../styles/main.css','demo.js'];var isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}self.addEventListener('install',function(event){event.waitUntil(caches.open(PRECACHE).then(function(cache){return cache.addAll(PRECACHE_URLS);}).then(self.skipWaiting()));});// The activate handler takes care of cleaning up old caches.\nself.addEventListener('activate',function(event){var currentCaches=[PRECACHE,RUNTIME];event.waitUntil(caches.keys().then(function(cacheNames){return cacheNames.filter(function(cacheName){return!currentCaches.includes(cacheName);});}).then(function(cachesToDelete){return Promise.all(cachesToDelete.map(function(cacheToDelete){return caches.delete(cacheToDelete);}));}).then(function(){return self.clients.claim();}));});// The fetch handler serves responses for same-origin resources from a cache.\n// If no response is found, it populates the runtime cache with the response\n// from the network before returning it to the page.\nself.addEventListener('fetch',function(event){// Skip cross-origin requests, like those for Google Analytics.\nif(event.request.url.startsWith(self.location.origin)){event.respondWith(caches.match(event.request).then(function(cachedResponse){if(cachedResponse){return cachedResponse;}return caches.open(RUNTIME).then(function(cache){return fetch(event.request).then(function(response){// Put a copy of the response in the runtime cache.\nreturn cache.put(event.request,response.clone()).then(function(){return response;});});});}));}});","map":{"version":3,"sources":["/home/agatha/open/src/serviceWorker.js"],"names":["PRECACHE","RUNTIME","PRECACHE_URLS","isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message","self","event","waitUntil","caches","open","cache","addAll","skipWaiting","currentCaches","keys","cacheNames","filter","cacheName","includes","cachesToDelete","Promise","all","map","cacheToDelete","delete","clients","claim","request","url","startsWith","respondWith","cachedResponse","put","clone"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst PRECACHE = 'precache-v1';\nconst RUNTIME = 'runtime';\n\n// A list of local resources we always want to be cached.\nconst PRECACHE_URLS = [\n  'index.html',\n  './', // Alias for index.html\n  'styles.css',\n  '../../styles/main.css',\n  'demo.js'\n];\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(PRECACHE)\n      .then(cache => cache.addAll(PRECACHE_URLS))\n      .then(self.skipWaiting())\n  );\n});\n\n// The activate handler takes care of cleaning up old caches.\nself.addEventListener('activate', event => {\n  const currentCaches = [PRECACHE, RUNTIME];\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));\n    }).then(cachesToDelete => {\n      return Promise.all(cachesToDelete.map(cacheToDelete => {\n        return caches.delete(cacheToDelete);\n      }));\n    }).then(() => self.clients.claim())\n  );\n});\n\n// The fetch handler serves responses for same-origin resources from a cache.\n// If no response is found, it populates the runtime cache with the response\n// from the network before returning it to the page.\nself.addEventListener('fetch', event => {\n  // Skip cross-origin requests, like those for Google Analytics.\n  if (event.request.url.startsWith(self.location.origin)) {\n    event.respondWith(\n      caches.match(event.request).then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n\n        return caches.open(RUNTIME).then(cache => {\n          return fetch(event.request).then(response => {\n            // Put a copy of the response in the runtime cache.\n            return cache.put(event.request, response.clone()).then(() => {\n              return response;\n            });\n          });\n        });\n      })\n    );\n  }\n});\n"]},"metadata":{},"sourceType":"module"}