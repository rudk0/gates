{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    spec\n  } = options;\n  return {\n    name: \"transform-arrow-functions\",\n    visitor: {\n      ArrowFunctionExpression(path) {\n        if (!path.isArrowFunctionExpression()) return;\n        path.arrowFunctionToExpression({\n          allowInsertArrow: false,\n          specCompliant: !!spec\n        });\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-arrow-functions/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_default","declare","api","options","assertVersion","spec","name","visitor","ArrowFunctionExpression","path","isArrowFunctionExpression","arrowFunctionToExpression","allowInsertArrow","specCompliant"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,QAAQ,GAAG,CAAC,GAAGF,kBAAkB,CAACG,OAAvB,EAAgC,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC/DD,EAAAA,GAAG,CAACE,aAAJ,CAAkB,CAAlB;AACA,QAAM;AACJC,IAAAA;AADI,MAEFF,OAFJ;AAGA,SAAO;AACLG,IAAAA,IAAI,EAAE,2BADD;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,uBAAuB,CAACC,IAAD,EAAO;AAC5B,YAAI,CAACA,IAAI,CAACC,yBAAL,EAAL,EAAuC;AACvCD,QAAAA,IAAI,CAACE,yBAAL,CAA+B;AAC7BC,UAAAA,gBAAgB,EAAE,KADW;AAE7BC,UAAAA,aAAa,EAAE,CAAC,CAACR;AAFY,SAA/B;AAID;;AAPM;AAFJ,GAAP;AAaD,CAlBc,CAAf;;AAoBAV,OAAO,CAACE,OAAR,GAAkBG,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const {\n    spec\n  } = options;\n  return {\n    name: \"transform-arrow-functions\",\n    visitor: {\n      ArrowFunctionExpression(path) {\n        if (!path.isArrowFunctionExpression()) return;\n        path.arrowFunctionToExpression({\n          allowInsertArrow: false,\n          specCompliant: !!spec\n        });\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}