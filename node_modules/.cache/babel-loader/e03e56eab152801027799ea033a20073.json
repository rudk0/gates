{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n\nvar assert = require('assert');\n\nvar fse = require('fs-extra');\n\nvar path = require('path');\n\nvar checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nvar defaults = require('./options/defaults');\n\nvar errors = require('../lib/errors');\n\nvar getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nvar injectManifestSchema = require('./options/inject-manifest-schema');\n\nvar validate = require('./options/validate');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * The manifest is injected into the `swSrc` file, and the regular expression\n * `injectionPointRegexp` determines where in the file the manifest should go.\n *\n * The final service worker file, with the manifest injected, is written to\n * disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_injectmanifest_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction injectManifest(_x) {\n  return _injectManifest.apply(this, arguments);\n}\n\nfunction _injectManifest() {\n  _injectManifest = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(config) {\n    var deprecationWarnings, options, globalRegexp, _ref, count, size, manifestEntries, warnings, swFileContents, injectionResults, entriesString;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // This check needs to be done before validation, since the deprecated options\n            // will be renamed.\n            deprecationWarnings = checkForDeprecatedOptions(config);\n            options = validate(config, injectManifestSchema);\n\n            if (!(path.normalize(config.swSrc) === path.normalize(config.swDest))) {\n              _context.next = 4;\n              break;\n            }\n\n            throw new Error(errors['same-src-and-dest']);\n\n          case 4:\n            globalRegexp = new RegExp(options.injectionPointRegexp, 'g');\n            _context.next = 7;\n            return getFileManifestEntries(options);\n\n          case 7:\n            _ref = _context.sent;\n            count = _ref.count;\n            size = _ref.size;\n            manifestEntries = _ref.manifestEntries;\n            warnings = _ref.warnings;\n            _context.prev = 12;\n            _context.next = 15;\n            return fse.readFile(config.swSrc, 'utf8');\n\n          case 15:\n            swFileContents = _context.sent;\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](12);\n            throw new Error(\"\".concat(errors['invalid-sw-src'], \" \").concat(_context.t0.message));\n\n          case 21:\n            injectionResults = swFileContents.match(globalRegexp);\n            assert(injectionResults, errors['injection-point-not-found'] + ( // Customize the error message when this happens:\n            // - If the default RegExp is used, then include the expected string that\n            //   matches as a hint to the developer.\n            // - If a custom RegExp is used, then just include the raw RegExp.\n            options.injectionPointRegexp === defaults.injectionPointRegexp ? 'workbox.precaching.precacheAndRoute([])' : options.injectionPointRegexp));\n            assert(injectionResults.length === 1, errors['multiple-injection-points'] + \" \".concat(options.injectionPointRegexp));\n            entriesString = JSON.stringify(manifestEntries, null, 2);\n            swFileContents = swFileContents.replace(globalRegexp, \"$1\".concat(entriesString, \"$2\"));\n            _context.prev = 26;\n            _context.next = 29;\n            return fse.mkdirp(path.dirname(options.swDest));\n\n          case 29:\n            _context.next = 34;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t1 = _context[\"catch\"](26);\n            throw new Error(errors['unable-to-make-injection-directory'] + \" '\".concat(_context.t1.message, \"'\"));\n\n          case 34:\n            _context.next = 36;\n            return fse.writeFile(config.swDest, swFileContents);\n\n          case 36:\n            // Add in any deprecation warnings.\n            warnings.push.apply(warnings, _toConsumableArray(deprecationWarnings));\n            return _context.abrupt(\"return\", {\n              count: count,\n              size: size,\n              warnings: warnings\n            });\n\n          case 38:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 18], [26, 31]]);\n  }));\n  return _injectManifest.apply(this, arguments);\n}\n\nmodule.exports = injectManifest;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/entry-points/inject-manifest.js"],"names":["_interopRequireDefault","require","_asyncToGenerator2","assert","fse","path","checkForDeprecatedOptions","defaults","errors","getFileManifestEntries","injectManifestSchema","validate","injectManifest","_x","_injectManifest","apply","arguments","default","config","deprecationWarnings","options","normalize","swSrc","swDest","Error","globalRegexp","RegExp","injectionPointRegexp","_ref","count","size","manifestEntries","warnings","readFile","swFileContents","message","injectionResults","match","length","entriesString","JSON","stringify","replace","mkdirp","dirname","writeFile","push","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst assert = require('assert');\n\nconst fse = require('fs-extra');\n\nconst path = require('path');\n\nconst checkForDeprecatedOptions = require('../lib/check-for-deprecated-options');\n\nconst defaults = require('./options/defaults');\n\nconst errors = require('../lib/errors');\n\nconst getFileManifestEntries = require('../lib/get-file-manifest-entries');\n\nconst injectManifestSchema = require('./options/inject-manifest-schema');\n\nconst validate = require('./options/validate');\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * The manifest is injected into the `swSrc` file, and the regular expression\n * `injectionPointRegexp` determines where in the file the manifest should go.\n *\n * The final service worker file, with the manifest injected, is written to\n * disk at `swDest`.\n *\n * @param {Object} config Please refer to the\n * [configuration guide](https://developers.google.com/web/tools/workbox/modules/workbox-build#full_injectmanifest_config).\n * @return {Promise<{count: number, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker file has been written to\n * `swDest`. The `size` property contains the aggregate size of all the\n * precached entries, in bytes, and the `count` property contains the total\n * number of precached entries. Any non-fatal warning messages will be returned\n * via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nfunction injectManifest(_x) {\n  return _injectManifest.apply(this, arguments);\n}\n\nfunction _injectManifest() {\n  _injectManifest = (0, _asyncToGenerator2.default)(function* (config) {\n    // This check needs to be done before validation, since the deprecated options\n    // will be renamed.\n    const deprecationWarnings = checkForDeprecatedOptions(config);\n    const options = validate(config, injectManifestSchema);\n\n    if (path.normalize(config.swSrc) === path.normalize(config.swDest)) {\n      throw new Error(errors['same-src-and-dest']);\n    }\n\n    const globalRegexp = new RegExp(options.injectionPointRegexp, 'g');\n\n    const _ref = yield getFileManifestEntries(options),\n          count = _ref.count,\n          size = _ref.size,\n          manifestEntries = _ref.manifestEntries,\n          warnings = _ref.warnings;\n\n    let swFileContents;\n\n    try {\n      swFileContents = yield fse.readFile(config.swSrc, 'utf8');\n    } catch (error) {\n      throw new Error(`${errors['invalid-sw-src']} ${error.message}`);\n    }\n\n    const injectionResults = swFileContents.match(globalRegexp);\n    assert(injectionResults, errors['injection-point-not-found'] + ( // Customize the error message when this happens:\n    // - If the default RegExp is used, then include the expected string that\n    //   matches as a hint to the developer.\n    // - If a custom RegExp is used, then just include the raw RegExp.\n    options.injectionPointRegexp === defaults.injectionPointRegexp ? 'workbox.precaching.precacheAndRoute([])' : options.injectionPointRegexp));\n    assert(injectionResults.length === 1, errors['multiple-injection-points'] + ` ${options.injectionPointRegexp}`);\n    const entriesString = JSON.stringify(manifestEntries, null, 2);\n    swFileContents = swFileContents.replace(globalRegexp, `$1${entriesString}$2`);\n\n    try {\n      yield fse.mkdirp(path.dirname(options.swDest));\n    } catch (error) {\n      throw new Error(errors['unable-to-make-injection-directory'] + ` '${error.message}'`);\n    }\n\n    yield fse.writeFile(config.swDest, swFileContents); // Add in any deprecation warnings.\n\n    warnings.push(...deprecationWarnings);\n    return {\n      count,\n      size,\n      warnings\n    };\n  });\n  return _injectManifest.apply(this, arguments);\n}\n\nmodule.exports = injectManifest;"]},"metadata":{},"sourceType":"script"}