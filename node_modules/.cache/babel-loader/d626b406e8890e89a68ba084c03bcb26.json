{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/agatha/open/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Hoek = require('@hapi/hoek');\n\nvar Any = require('../any');\n\nvar Ref = require('../../ref');\n\nvar internals = {\n  precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n  normalizeExponent: function normalizeExponent(str) {\n    return str.replace(/\\.?0+e/, 'e').replace(/e\\+/, 'e').replace(/^\\+/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n  },\n  normalizeDecimal: function normalizeDecimal(str) {\n    str = str.replace(/^\\+/, '').replace(/\\.0+$/, '').replace(/^(-?)0+([1-9])/, '$1$2');\n\n    if (str.includes('.') && str.endsWith('0')) {\n      str = str.replace(/0+$/, '');\n    }\n\n    return str;\n  }\n};\n\ninternals.Number = /*#__PURE__*/function (_Any) {\n  _inherits(_class, _Any);\n\n  var _super = _createSuper(_class);\n\n  function _class() {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    _this = _super.call(this);\n    _this._type = 'number';\n    _this._flags.unsafe = false;\n\n    _this._invalids.add(Infinity);\n\n    _this._invalids.add(-Infinity);\n\n    return _this;\n  }\n\n  _createClass(_class, [{\n    key: \"_base\",\n    value: function _base(value, state, options) {\n      var result = {\n        errors: null,\n        value: value\n      };\n\n      if (typeof value === 'string' && options.convert) {\n        var matches = value.match(/^\\s*[+-]?\\d+(?:\\.\\d+)?(?:e([+-]?\\d+))?\\s*$/i);\n\n        if (matches) {\n          value = value.trim();\n          result.value = parseFloat(value);\n\n          if (!this._flags.unsafe) {\n            if (value.includes('e')) {\n              if (internals.normalizeExponent(\"\".concat(result.value / Math.pow(10, matches[1]), \"e\").concat(matches[1])) !== internals.normalizeExponent(value)) {\n                result.errors = this.createError('number.unsafe', {\n                  value: value\n                }, state, options);\n                return result;\n              }\n            } else {\n              if (result.value.toString() !== internals.normalizeDecimal(value)) {\n                result.errors = this.createError('number.unsafe', {\n                  value: value\n                }, state, options);\n                return result;\n              }\n            }\n          }\n        }\n      }\n\n      var isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n      if (options.convert && 'precision' in this._flags && isNumber) {\n        // This is conceptually equivalent to using toFixed but it should be much faster\n        var precision = Math.pow(10, this._flags.precision);\n        result.value = Math.round(result.value * precision) / precision;\n      }\n\n      if (isNumber) {\n        if (!this._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n          result.errors = this.createError('number.unsafe', {\n            value: value\n          }, state, options);\n        }\n      } else {\n        result.errors = this.createError('number.base', {\n          value: value\n        }, state, options);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"multiple\",\n    value: function multiple(base) {\n      var isRef = Ref.isRef(base);\n\n      if (!isRef) {\n        Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n        Hoek.assert(base > 0, 'multiple must be greater than 0');\n      }\n\n      return this._test('multiple', base, function (value, state, options) {\n        var divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n        if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n          return this.createError('number.ref', {\n            ref: base.key\n          }, state, options);\n        }\n\n        if (value % divisor === 0) {\n          return value;\n        }\n\n        return this.createError('number.multiple', {\n          multiple: base,\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"integer\",\n    value: function integer() {\n      return this._test('integer', undefined, function (value, state, options) {\n        return Math.trunc(value) - value === 0 ? value : this.createError('number.integer', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"unsafe\",\n    value: function unsafe() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      Hoek.assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n      if (this._flags.unsafe === enabled) {\n        return this;\n      }\n\n      var obj = this.clone();\n      obj._flags.unsafe = enabled;\n      return obj;\n    }\n  }, {\n    key: \"negative\",\n    value: function negative() {\n      return this._test('negative', undefined, function (value, state, options) {\n        if (value < 0) {\n          return value;\n        }\n\n        return this.createError('number.negative', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"positive\",\n    value: function positive() {\n      return this._test('positive', undefined, function (value, state, options) {\n        if (value > 0) {\n          return value;\n        }\n\n        return this.createError('number.positive', {\n          value: value\n        }, state, options);\n      });\n    }\n  }, {\n    key: \"precision\",\n    value: function precision(limit) {\n      Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n      Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n      var obj = this._test('precision', limit, function (value, state, options) {\n        var places = value.toString().match(internals.precisionRx);\n        var decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n\n        if (decimals <= limit) {\n          return value;\n        }\n\n        return this.createError('number.precision', {\n          limit: limit,\n          value: value\n        }, state, options);\n      });\n\n      obj._flags.precision = limit;\n      return obj;\n    }\n  }, {\n    key: \"port\",\n    value: function port() {\n      return this._test('port', undefined, function (value, state, options) {\n        if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n          return this.createError('number.port', {\n            value: value\n          }, state, options);\n        }\n\n        return value;\n      });\n    }\n  }]);\n\n  return _class;\n}(Any);\n\ninternals.compare = function (type, compare) {\n  return function (limit) {\n    var isRef = Ref.isRef(limit);\n    var isNumber = typeof limit === 'number' && !isNaN(limit);\n    Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n    return this._test(type, limit, function (value, state, options) {\n      var compareTo;\n\n      if (isRef) {\n        compareTo = limit(state.reference || state.parent, options);\n\n        if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n          return this.createError('number.ref', {\n            ref: limit.key\n          }, state, options);\n        }\n      } else {\n        compareTo = limit;\n      }\n\n      if (compare(value, compareTo)) {\n        return value;\n      }\n\n      return this.createError('number.' + type, {\n        limit: compareTo,\n        value: value\n      }, state, options);\n    });\n  };\n};\n\ninternals.Number.prototype.min = internals.compare('min', function (value, limit) {\n  return value >= limit;\n});\ninternals.Number.prototype.max = internals.compare('max', function (value, limit) {\n  return value <= limit;\n});\ninternals.Number.prototype.greater = internals.compare('greater', function (value, limit) {\n  return value > limit;\n});\ninternals.Number.prototype.less = internals.compare('less', function (value, limit) {\n  return value < limit;\n});\nmodule.exports = new internals.Number();","map":{"version":3,"sources":["/home/agatha/open/node_modules/@hapi/joi/lib/types/number/index.js"],"names":["Hoek","require","Any","Ref","internals","precisionRx","normalizeExponent","str","replace","normalizeDecimal","includes","endsWith","Number","_type","_flags","unsafe","_invalids","add","Infinity","value","state","options","result","errors","convert","matches","match","trim","parseFloat","Math","pow","createError","toString","isNumber","isNaN","precision","round","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","base","isRef","assert","isFinite","_test","divisor","reference","parent","ref","key","multiple","undefined","trunc","enabled","obj","clone","limit","isSafeInteger","places","decimals","max","length","parseInt","compare","type","compareTo","prototype","min","greater","less","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Hoek = require('@hapi/hoek');\n\nconst Any = require('../any');\nconst Ref = require('../../ref');\n\n\nconst internals = {\n    precisionRx: /(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/,\n    normalizeExponent(str) {\n\n        return str\n            .replace(/\\.?0+e/, 'e')\n            .replace(/e\\+/, 'e')\n            .replace(/^\\+/, '')\n            .replace(/^(-?)0+([1-9])/, '$1$2');\n    },\n    normalizeDecimal(str) {\n\n        str = str\n            .replace(/^\\+/, '')\n            .replace(/\\.0+$/, '')\n            .replace(/^(-?)0+([1-9])/, '$1$2');\n\n        if (str.includes('.') && str.endsWith('0')) {\n            str = str.replace(/0+$/, '');\n        }\n\n        return str;\n    }\n};\n\n\ninternals.Number = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'number';\n        this._flags.unsafe = false;\n        this._invalids.add(Infinity);\n        this._invalids.add(-Infinity);\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            errors: null,\n            value\n        };\n\n        if (typeof value === 'string' &&\n            options.convert) {\n\n            const matches = value.match(/^\\s*[+-]?\\d+(?:\\.\\d+)?(?:e([+-]?\\d+))?\\s*$/i);\n            if (matches) {\n\n                value = value.trim();\n                result.value = parseFloat(value);\n\n                if (!this._flags.unsafe) {\n                    if (value.includes('e')) {\n                        if (internals.normalizeExponent(`${result.value / Math.pow(10, matches[1])}e${matches[1]}`) !== internals.normalizeExponent(value)) {\n                            result.errors = this.createError('number.unsafe', { value }, state, options);\n                            return result;\n                        }\n                    }\n                    else {\n                        if (result.value.toString() !== internals.normalizeDecimal(value)) {\n                            result.errors = this.createError('number.unsafe', { value }, state, options);\n                            return result;\n                        }\n                    }\n                }\n            }\n        }\n\n        const isNumber = typeof result.value === 'number' && !isNaN(result.value);\n\n        if (options.convert && 'precision' in this._flags && isNumber) {\n\n            // This is conceptually equivalent to using toFixed but it should be much faster\n            const precision = Math.pow(10, this._flags.precision);\n            result.value = Math.round(result.value * precision) / precision;\n        }\n\n        if (isNumber) {\n            if (!this._flags.unsafe &&\n                (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {\n                result.errors = this.createError('number.unsafe', { value }, state, options);\n            }\n        }\n        else {\n            result.errors = this.createError('number.base', { value }, state, options);\n        }\n\n        return result;\n    }\n\n    multiple(base) {\n\n        const isRef = Ref.isRef(base);\n\n        if (!isRef) {\n            Hoek.assert(typeof base === 'number' && isFinite(base), 'multiple must be a number');\n            Hoek.assert(base > 0, 'multiple must be greater than 0');\n        }\n\n        return this._test('multiple', base, function (value, state, options) {\n\n            const divisor = isRef ? base(state.reference || state.parent, options) : base;\n\n            if (isRef && (typeof divisor !== 'number' || !isFinite(divisor))) {\n                return this.createError('number.ref', { ref: base.key }, state, options);\n            }\n\n            if (value % divisor === 0) {\n                return value;\n            }\n\n            return this.createError('number.multiple', { multiple: base, value }, state, options);\n        });\n    }\n\n    integer() {\n\n        return this._test('integer', undefined, function (value, state, options) {\n\n            return Math.trunc(value) - value === 0 ? value : this.createError('number.integer', { value }, state, options);\n        });\n    }\n\n    unsafe(enabled = true) {\n\n        Hoek.assert(typeof enabled === 'boolean', 'enabled must be a boolean');\n\n        if (this._flags.unsafe === enabled) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.unsafe = enabled;\n        return obj;\n    }\n\n    negative() {\n\n        return this._test('negative', undefined, function (value, state, options) {\n\n            if (value < 0) {\n                return value;\n            }\n\n            return this.createError('number.negative', { value }, state, options);\n        });\n    }\n\n    positive() {\n\n        return this._test('positive', undefined, function (value, state, options) {\n\n            if (value > 0) {\n                return value;\n            }\n\n            return this.createError('number.positive', { value }, state, options);\n        });\n    }\n\n    precision(limit) {\n\n        Hoek.assert(Number.isSafeInteger(limit), 'limit must be an integer');\n        Hoek.assert(!('precision' in this._flags), 'precision already set');\n\n        const obj = this._test('precision', limit, function (value, state, options) {\n\n            const places = value.toString().match(internals.precisionRx);\n            const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);\n            if (decimals <= limit) {\n                return value;\n            }\n\n            return this.createError('number.precision', { limit, value }, state, options);\n        });\n\n        obj._flags.precision = limit;\n        return obj;\n    }\n\n    port() {\n\n        return this._test('port', undefined, function (value, state, options) {\n\n            if (!Number.isSafeInteger(value) || value < 0 || value > 65535) {\n                return this.createError('number.port', { value }, state, options);\n            }\n\n            return value;\n        });\n    }\n\n};\n\n\ninternals.compare = function (type, compare) {\n\n    return function (limit) {\n\n        const isRef = Ref.isRef(limit);\n        const isNumber = typeof limit === 'number' && !isNaN(limit);\n\n        Hoek.assert(isNumber || isRef, 'limit must be a number or reference');\n\n        return this._test(type, limit, function (value, state, options) {\n\n            let compareTo;\n            if (isRef) {\n                compareTo = limit(state.reference || state.parent, options);\n\n                if (!(typeof compareTo === 'number' && !isNaN(compareTo))) {\n                    return this.createError('number.ref', { ref: limit.key }, state, options);\n                }\n            }\n            else {\n                compareTo = limit;\n            }\n\n            if (compare(value, compareTo)) {\n                return value;\n            }\n\n            return this.createError('number.' + type, { limit: compareTo, value }, state, options);\n        });\n    };\n};\n\n\ninternals.Number.prototype.min = internals.compare('min', (value, limit) => value >= limit);\ninternals.Number.prototype.max = internals.compare('max', (value, limit) => value <= limit);\ninternals.Number.prototype.greater = internals.compare('greater', (value, limit) => value > limit);\ninternals.Number.prototype.less = internals.compare('less', (value, limit) => value < limit);\n\n\nmodule.exports = new internals.Number();\n"]},"metadata":{},"sourceType":"script"}