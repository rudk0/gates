{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nvar hasOwn = Object.prototype.hasOwnProperty; // The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\n\nexports.hoist = function (funPath) {\n  var t = util.getTypes();\n  t.assertFunction(funPath.node);\n  var vars = {};\n\n  function varDeclToExpr(_ref, includeIdentifiers) {\n    var vdec = _ref.node,\n        scope = _ref.scope;\n    t.assertVariableDeclaration(vdec); // TODO assert.equal(vdec.kind, \"var\");\n\n    var exprs = [];\n    vdec.declarations.forEach(function (dec) {\n      // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't\n      // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.\n      vars[dec.id.name] = t.identifier(dec.id.name); // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n      scope.removeBinding(dec.id.name);\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\"=\", dec.id, dec.init));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n    if (exprs.length === 0) return null;\n    if (exprs.length === 1) return exprs[0];\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function exit(path) {\n        var expr = varDeclToExpr(path, false);\n\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          util.replaceWithOrRemove(path, t.expressionStatement(expr));\n        } // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n\n\n        path.skip();\n      }\n    },\n    ForStatement: function ForStatement(path) {\n      var init = path.get(\"init\");\n\n      if (init.isVariableDeclaration()) {\n        util.replaceWithOrRemove(init, varDeclToExpr(init, false));\n      }\n    },\n    ForXStatement: function ForXStatement(path) {\n      var left = path.get(\"left\");\n\n      if (left.isVariableDeclaration()) {\n        util.replaceWithOrRemove(left, varDeclToExpr(left, true));\n      }\n    },\n    FunctionDeclaration: function FunctionDeclaration(path) {\n      var node = path.node;\n      vars[node.id.name] = node.id;\n      var assignment = t.expressionStatement(t.assignmentExpression(\"=\", t.clone(node.id), t.functionExpression(path.scope.generateUidIdentifierBasedOnNode(node), node.params, node.body, node.generator, node.expression)));\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment); // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        util.replaceWithOrRemove(path, assignment);\n      } // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n\n      path.scope.removeBinding(node.id.name); // Don't hoist variables out of inner functions.\n\n      path.skip();\n    },\n    FunctionExpression: function FunctionExpression(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    },\n    ArrowFunctionExpression: function ArrowFunctionExpression(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n  var paramNames = {};\n  funPath.get(\"params\").forEach(function (paramPath) {\n    var param = paramPath.node;\n\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {// Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n  var declarations = [];\n  Object.keys(vars).forEach(function (name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/regenerator-transform/lib/hoist.js"],"names":["_interopRequireWildcard","require","util","hasOwn","Object","prototype","hasOwnProperty","exports","hoist","funPath","t","getTypes","assertFunction","node","vars","varDeclToExpr","_ref","includeIdentifiers","vdec","scope","assertVariableDeclaration","exprs","declarations","forEach","dec","id","name","identifier","removeBinding","init","push","assignmentExpression","length","sequenceExpression","get","traverse","VariableDeclaration","exit","path","expr","remove","replaceWithOrRemove","expressionStatement","skip","ForStatement","isVariableDeclaration","ForXStatement","left","FunctionDeclaration","assignment","clone","functionExpression","generateUidIdentifierBasedOnNode","params","body","generator","expression","parentPath","isBlockStatement","unshiftContainer","FunctionExpression","ArrowFunctionExpression","paramNames","paramPath","param","isIdentifier","keys","call","variableDeclarator","variableDeclaration"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar util = _interopRequireWildcard(require(\"./util\"));\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar hasOwn = Object.prototype.hasOwnProperty; // The hoist function takes a FunctionExpression or FunctionDeclaration\n// and replaces any Declaration nodes in its body with assignments, then\n// returns a VariableDeclaration containing just the names of the removed\n// declarations.\n\nexports.hoist = function (funPath) {\n  var t = util.getTypes();\n  t.assertFunction(funPath.node);\n  var vars = {};\n\n  function varDeclToExpr(_ref, includeIdentifiers) {\n    var vdec = _ref.node,\n        scope = _ref.scope;\n    t.assertVariableDeclaration(vdec); // TODO assert.equal(vdec.kind, \"var\");\n\n    var exprs = [];\n    vdec.declarations.forEach(function (dec) {\n      // Note: We duplicate 'dec.id' here to ensure that the variable declaration IDs don't\n      // have the same 'loc' value, since that can make sourcemaps and retainLines behave poorly.\n      vars[dec.id.name] = t.identifier(dec.id.name); // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n      scope.removeBinding(dec.id.name);\n\n      if (dec.init) {\n        exprs.push(t.assignmentExpression(\"=\", dec.id, dec.init));\n      } else if (includeIdentifiers) {\n        exprs.push(dec.id);\n      }\n    });\n    if (exprs.length === 0) return null;\n    if (exprs.length === 1) return exprs[0];\n    return t.sequenceExpression(exprs);\n  }\n\n  funPath.get(\"body\").traverse({\n    VariableDeclaration: {\n      exit: function exit(path) {\n        var expr = varDeclToExpr(path, false);\n\n        if (expr === null) {\n          path.remove();\n        } else {\n          // We don't need to traverse this expression any further because\n          // there can't be any new declarations inside an expression.\n          util.replaceWithOrRemove(path, t.expressionStatement(expr));\n        } // Since the original node has been either removed or replaced,\n        // avoid traversing it any further.\n\n\n        path.skip();\n      }\n    },\n    ForStatement: function ForStatement(path) {\n      var init = path.get(\"init\");\n\n      if (init.isVariableDeclaration()) {\n        util.replaceWithOrRemove(init, varDeclToExpr(init, false));\n      }\n    },\n    ForXStatement: function ForXStatement(path) {\n      var left = path.get(\"left\");\n\n      if (left.isVariableDeclaration()) {\n        util.replaceWithOrRemove(left, varDeclToExpr(left, true));\n      }\n    },\n    FunctionDeclaration: function FunctionDeclaration(path) {\n      var node = path.node;\n      vars[node.id.name] = node.id;\n      var assignment = t.expressionStatement(t.assignmentExpression(\"=\", t.clone(node.id), t.functionExpression(path.scope.generateUidIdentifierBasedOnNode(node), node.params, node.body, node.generator, node.expression)));\n\n      if (path.parentPath.isBlockStatement()) {\n        // Insert the assignment form before the first statement in the\n        // enclosing block.\n        path.parentPath.unshiftContainer(\"body\", assignment); // Remove the function declaration now that we've inserted the\n        // equivalent assignment form at the beginning of the block.\n\n        path.remove();\n      } else {\n        // If the parent node is not a block statement, then we can just\n        // replace the declaration with the equivalent assignment form\n        // without worrying about hoisting it.\n        util.replaceWithOrRemove(path, assignment);\n      } // Remove the binding, to avoid \"duplicate declaration\" errors when it will\n      // be injected again.\n\n\n      path.scope.removeBinding(node.id.name); // Don't hoist variables out of inner functions.\n\n      path.skip();\n    },\n    FunctionExpression: function FunctionExpression(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    },\n    ArrowFunctionExpression: function ArrowFunctionExpression(path) {\n      // Don't descend into nested function expressions.\n      path.skip();\n    }\n  });\n  var paramNames = {};\n  funPath.get(\"params\").forEach(function (paramPath) {\n    var param = paramPath.node;\n\n    if (t.isIdentifier(param)) {\n      paramNames[param.name] = param;\n    } else {// Variables declared by destructuring parameter patterns will be\n      // harmlessly re-declared.\n    }\n  });\n  var declarations = [];\n  Object.keys(vars).forEach(function (name) {\n    if (!hasOwn.call(paramNames, name)) {\n      declarations.push(t.variableDeclarator(vars[name], null));\n    }\n  });\n\n  if (declarations.length === 0) {\n    return null; // Be sure to handle this case!\n  }\n\n  return t.variableDeclaration(\"var\", declarations);\n};"]},"metadata":{},"sourceType":"script"}