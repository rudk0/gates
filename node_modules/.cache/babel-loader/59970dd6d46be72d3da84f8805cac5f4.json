{"ast":null,"code":"/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\nvar reInterpolate = require('lodash._reinterpolate');\n/** Used as references for various `Number` constants. */\n\n\nvar INFINITY = 1 / 0;\n/** `Object#toString` result references. */\n\nvar nullTag = '[object Null]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]';\n/** Used to match HTML entities and HTML characters. */\n\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n/** Used to match template delimiters. */\n\nvar reEscape = /<%-([\\s\\S]+?)%>/g,\n    reEvaluate = /<%([\\s\\S]+?)%>/g;\n/** Used to map characters to HTML entities. */\n\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root = freeGlobal || freeSelf || Function('return this')();\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\n\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n\n  return result;\n}\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\n\n\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\n\n\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto.toString;\n/** Built-in value references. */\n\nvar Symbol = root.Symbol,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/** Used to convert symbols to primitives and strings. */\n\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n/**\n * By default, the template delimiters used by lodash are like those in\n * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n * following template settings to use alternative delimiters.\n *\n * @static\n * @memberOf _\n * @type {Object}\n */\n\nvar templateSettings = {\n  /**\n   * Used to detect `data` property values to be HTML-escaped.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'escape': reEscape,\n\n  /**\n   * Used to detect code to be evaluated.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'evaluate': reEvaluate,\n\n  /**\n   * Used to detect `data` property values to inject.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'interpolate': reInterpolate,\n\n  /**\n   * Used to reference the data object in the template text.\n   *\n   * @memberOf _.templateSettings\n   * @type {string}\n   */\n  'variable': '',\n\n  /**\n   * Used to import variables into the compiled template.\n   *\n   * @memberOf _.templateSettings\n   * @type {Object}\n   */\n  'imports': {\n    /**\n     * A reference to the `lodash` function.\n     *\n     * @memberOf _.templateSettings.imports\n     * @type {Function}\n     */\n    '_': {\n      'escape': escape\n    }\n  }\n};\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\n\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\n\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n\n  return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\n\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\n\n\nvar isArray = Array.isArray;\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\n\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\n\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\n\n\nfunction escape(string) {\n  string = toString(string);\n  return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n}\n\nmodule.exports = templateSettings;","map":{"version":3,"sources":["/home/agatha/open/node_modules/lodash.templatesettings/index.js"],"names":["reInterpolate","require","INFINITY","nullTag","symbolTag","undefinedTag","reUnescapedHtml","reHasUnescapedHtml","RegExp","source","reEscape","reEvaluate","htmlEscapes","freeGlobal","global","Object","freeSelf","self","root","Function","arrayMap","array","iteratee","index","length","result","Array","basePropertyOf","object","key","undefined","escapeHtmlChar","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","Symbol","symToStringTag","toStringTag","symbolProto","symbolToString","templateSettings","escape","baseGetTag","value","getRawTag","objectToString","baseToString","isArray","isSymbol","call","isOwn","tag","unmasked","e","isObjectLike","string","test","replace","module","exports"],"mappings":"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","sourcesContent":["/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\nvar reInterpolate = require('lodash._reinterpolate');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]';\n\n/** Used to match HTML entities and HTML characters. */\nvar reUnescapedHtml = /[&<>\"']/g,\n    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);\n\n/** Used to match template delimiters. */\nvar reEscape = /<%-([\\s\\S]+?)%>/g,\n    reEvaluate = /<%([\\s\\S]+?)%>/g;\n\n/** Used to map characters to HTML entities. */\nvar htmlEscapes = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.escape` to convert characters to HTML entities.\n *\n * @private\n * @param {string} chr The matched character to escape.\n * @returns {string} Returns the escaped character.\n */\nvar escapeHtmlChar = basePropertyOf(htmlEscapes);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * By default, the template delimiters used by lodash are like those in\n * embedded Ruby (ERB) as well as ES2015 template strings. Change the\n * following template settings to use alternative delimiters.\n *\n * @static\n * @memberOf _\n * @type {Object}\n */\nvar templateSettings = {\n\n  /**\n   * Used to detect `data` property values to be HTML-escaped.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'escape': reEscape,\n\n  /**\n   * Used to detect code to be evaluated.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'evaluate': reEvaluate,\n\n  /**\n   * Used to detect `data` property values to inject.\n   *\n   * @memberOf _.templateSettings\n   * @type {RegExp}\n   */\n  'interpolate': reInterpolate,\n\n  /**\n   * Used to reference the data object in the template text.\n   *\n   * @memberOf _.templateSettings\n   * @type {string}\n   */\n  'variable': '',\n\n  /**\n   * Used to import variables into the compiled template.\n   *\n   * @memberOf _.templateSettings\n   * @type {Object}\n   */\n  'imports': {\n\n    /**\n     * A reference to the `lodash` function.\n     *\n     * @memberOf _.templateSettings.imports\n     * @type {Function}\n     */\n    '_': { 'escape': escape }\n  }\n};\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @example\n *\n * _.escape('fred, barney, & pebbles');\n * // => 'fred, barney, &amp; pebbles'\n */\nfunction escape(string) {\n  string = toString(string);\n  return (string && reHasUnescapedHtml.test(string))\n    ? string.replace(reUnescapedHtml, escapeHtmlChar)\n    : string;\n}\n\nmodule.exports = templateSettings;\n"]},"metadata":{},"sourceType":"script"}