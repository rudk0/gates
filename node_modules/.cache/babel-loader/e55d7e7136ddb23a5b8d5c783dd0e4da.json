{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformWithoutHelper;\n\nvar _core = require(\"@babel/core\");\n\nfunction transformWithoutHelper(loose, path, state) {\n  const pushComputedProps = loose ? pushComputedPropsLoose : pushComputedPropsSpec;\n  const {\n    node\n  } = path;\n  const build = pushComputedProps(path, state);\n  const declar = build.declar;\n  const loop = build.loop;\n  const block = loop.body;\n  path.ensureBlock();\n\n  if (declar) {\n    block.body.push(declar);\n  }\n\n  block.body = block.body.concat(node.body.body);\n\n  _core.types.inherits(loop, node);\n\n  _core.types.inherits(loop.body, node.body);\n\n  if (build.replaceParent) {\n    path.parentPath.replaceWithMultiple(build.node);\n    path.remove();\n  } else {\n    path.replaceWithMultiple(build.node);\n  }\n}\n\nconst buildForOfLoose = (0, _core.template)(`\n  for (var LOOP_OBJECT = OBJECT,\n          IS_ARRAY = Array.isArray(LOOP_OBJECT),\n          INDEX = 0,\n          LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n    INTERMEDIATE;\n    if (IS_ARRAY) {\n      if (INDEX >= LOOP_OBJECT.length) break;\n      ID = LOOP_OBJECT[INDEX++];\n    } else {\n      INDEX = LOOP_OBJECT.next();\n      if (INDEX.done) break;\n      ID = INDEX.value;\n    }\n  }\n`);\nconst buildForOf = (0, _core.template)(`\n  var ITERATOR_COMPLETION = true;\n  var ITERATOR_HAD_ERROR_KEY = false;\n  var ITERATOR_ERROR_KEY = undefined;\n  try {\n    for (\n      var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY;\n      !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done);\n      ITERATOR_COMPLETION = true\n    ) {}\n  } catch (err) {\n    ITERATOR_HAD_ERROR_KEY = true;\n    ITERATOR_ERROR_KEY = err;\n  } finally {\n    try {\n      if (!ITERATOR_COMPLETION && ITERATOR_KEY.return != null) {\n        ITERATOR_KEY.return();\n      }\n    } finally {\n      if (ITERATOR_HAD_ERROR_KEY) {\n        throw ITERATOR_ERROR_KEY;\n      }\n    }\n  }\n`);\n\nfunction pushComputedPropsLoose(path, file) {\n  const {\n    node,\n    scope,\n    parent\n  } = path;\n  const {\n    left\n  } = node;\n  let declar, id, intermediate;\n\n  if (_core.types.isIdentifier(left) || _core.types.isPattern(left) || _core.types.isMemberExpression(left)) {\n    id = left;\n    intermediate = null;\n  } else if (_core.types.isVariableDeclaration(left)) {\n    id = scope.generateUidIdentifier(\"ref\");\n    declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, _core.types.identifier(id.name))]);\n    intermediate = _core.types.variableDeclaration(\"var\", [_core.types.variableDeclarator(_core.types.identifier(id.name))]);\n  } else {\n    throw file.buildCodeFrameError(left, `Unknown node type ${left.type} in ForStatement`);\n  }\n\n  const iteratorKey = scope.generateUidIdentifier(\"iterator\");\n  const isArrayKey = scope.generateUidIdentifier(\"isArray\");\n  const loop = buildForOfLoose({\n    LOOP_OBJECT: iteratorKey,\n    IS_ARRAY: isArrayKey,\n    OBJECT: node.right,\n    INDEX: scope.generateUidIdentifier(\"i\"),\n    ID: id,\n    INTERMEDIATE: intermediate\n  });\n\n  const isLabeledParent = _core.types.isLabeledStatement(parent);\n\n  let labeled;\n\n  if (isLabeledParent) {\n    labeled = _core.types.labeledStatement(parent.label, loop);\n  }\n\n  return {\n    replaceParent: isLabeledParent,\n    declar: declar,\n    node: labeled || loop,\n    loop: loop\n  };\n}\n\nfunction pushComputedPropsSpec(path, file) {\n  const {\n    node,\n    scope,\n    parent\n  } = path;\n  const left = node.left;\n  let declar;\n  const stepKey = scope.generateUid(\"step\");\n\n  const stepValue = _core.types.memberExpression(_core.types.identifier(stepKey), _core.types.identifier(\"value\"));\n\n  if (_core.types.isIdentifier(left) || _core.types.isPattern(left) || _core.types.isMemberExpression(left)) {\n    declar = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, stepValue));\n  } else if (_core.types.isVariableDeclaration(left)) {\n    declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, stepValue)]);\n  } else {\n    throw file.buildCodeFrameError(left, `Unknown node type ${left.type} in ForStatement`);\n  }\n\n  const template = buildForOf({\n    ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(\"didIteratorError\"),\n    ITERATOR_COMPLETION: scope.generateUidIdentifier(\"iteratorNormalCompletion\"),\n    ITERATOR_ERROR_KEY: scope.generateUidIdentifier(\"iteratorError\"),\n    ITERATOR_KEY: scope.generateUidIdentifier(\"iterator\"),\n    STEP_KEY: _core.types.identifier(stepKey),\n    OBJECT: node.right\n  });\n\n  const isLabeledParent = _core.types.isLabeledStatement(parent);\n\n  const tryBody = template[3].block.body;\n  const loop = tryBody[0];\n\n  if (isLabeledParent) {\n    tryBody[0] = _core.types.labeledStatement(parent.label, loop);\n  }\n\n  return {\n    replaceParent: isLabeledParent,\n    declar: declar,\n    loop: loop,\n    node: template\n  };\n}","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-for-of/lib/no-helper-implementation.js"],"names":["Object","defineProperty","exports","value","default","transformWithoutHelper","_core","require","loose","path","state","pushComputedProps","pushComputedPropsLoose","pushComputedPropsSpec","node","build","declar","loop","block","body","ensureBlock","push","concat","types","inherits","replaceParent","parentPath","replaceWithMultiple","remove","buildForOfLoose","template","buildForOf","file","scope","parent","left","id","intermediate","isIdentifier","isPattern","isMemberExpression","isVariableDeclaration","generateUidIdentifier","variableDeclaration","kind","variableDeclarator","declarations","identifier","name","buildCodeFrameError","type","iteratorKey","isArrayKey","LOOP_OBJECT","IS_ARRAY","OBJECT","right","INDEX","ID","INTERMEDIATE","isLabeledParent","isLabeledStatement","labeled","labeledStatement","label","stepKey","generateUid","stepValue","memberExpression","expressionStatement","assignmentExpression","ITERATOR_HAD_ERROR_KEY","ITERATOR_COMPLETION","ITERATOR_ERROR_KEY","ITERATOR_KEY","STEP_KEY","tryBody"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = transformWithoutHelper;\n\nvar _core = require(\"@babel/core\");\n\nfunction transformWithoutHelper(loose, path, state) {\n  const pushComputedProps = loose ? pushComputedPropsLoose : pushComputedPropsSpec;\n  const {\n    node\n  } = path;\n  const build = pushComputedProps(path, state);\n  const declar = build.declar;\n  const loop = build.loop;\n  const block = loop.body;\n  path.ensureBlock();\n\n  if (declar) {\n    block.body.push(declar);\n  }\n\n  block.body = block.body.concat(node.body.body);\n\n  _core.types.inherits(loop, node);\n\n  _core.types.inherits(loop.body, node.body);\n\n  if (build.replaceParent) {\n    path.parentPath.replaceWithMultiple(build.node);\n    path.remove();\n  } else {\n    path.replaceWithMultiple(build.node);\n  }\n}\n\nconst buildForOfLoose = (0, _core.template)(`\n  for (var LOOP_OBJECT = OBJECT,\n          IS_ARRAY = Array.isArray(LOOP_OBJECT),\n          INDEX = 0,\n          LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n    INTERMEDIATE;\n    if (IS_ARRAY) {\n      if (INDEX >= LOOP_OBJECT.length) break;\n      ID = LOOP_OBJECT[INDEX++];\n    } else {\n      INDEX = LOOP_OBJECT.next();\n      if (INDEX.done) break;\n      ID = INDEX.value;\n    }\n  }\n`);\nconst buildForOf = (0, _core.template)(`\n  var ITERATOR_COMPLETION = true;\n  var ITERATOR_HAD_ERROR_KEY = false;\n  var ITERATOR_ERROR_KEY = undefined;\n  try {\n    for (\n      var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY;\n      !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done);\n      ITERATOR_COMPLETION = true\n    ) {}\n  } catch (err) {\n    ITERATOR_HAD_ERROR_KEY = true;\n    ITERATOR_ERROR_KEY = err;\n  } finally {\n    try {\n      if (!ITERATOR_COMPLETION && ITERATOR_KEY.return != null) {\n        ITERATOR_KEY.return();\n      }\n    } finally {\n      if (ITERATOR_HAD_ERROR_KEY) {\n        throw ITERATOR_ERROR_KEY;\n      }\n    }\n  }\n`);\n\nfunction pushComputedPropsLoose(path, file) {\n  const {\n    node,\n    scope,\n    parent\n  } = path;\n  const {\n    left\n  } = node;\n  let declar, id, intermediate;\n\n  if (_core.types.isIdentifier(left) || _core.types.isPattern(left) || _core.types.isMemberExpression(left)) {\n    id = left;\n    intermediate = null;\n  } else if (_core.types.isVariableDeclaration(left)) {\n    id = scope.generateUidIdentifier(\"ref\");\n    declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, _core.types.identifier(id.name))]);\n    intermediate = _core.types.variableDeclaration(\"var\", [_core.types.variableDeclarator(_core.types.identifier(id.name))]);\n  } else {\n    throw file.buildCodeFrameError(left, `Unknown node type ${left.type} in ForStatement`);\n  }\n\n  const iteratorKey = scope.generateUidIdentifier(\"iterator\");\n  const isArrayKey = scope.generateUidIdentifier(\"isArray\");\n  const loop = buildForOfLoose({\n    LOOP_OBJECT: iteratorKey,\n    IS_ARRAY: isArrayKey,\n    OBJECT: node.right,\n    INDEX: scope.generateUidIdentifier(\"i\"),\n    ID: id,\n    INTERMEDIATE: intermediate\n  });\n\n  const isLabeledParent = _core.types.isLabeledStatement(parent);\n\n  let labeled;\n\n  if (isLabeledParent) {\n    labeled = _core.types.labeledStatement(parent.label, loop);\n  }\n\n  return {\n    replaceParent: isLabeledParent,\n    declar: declar,\n    node: labeled || loop,\n    loop: loop\n  };\n}\n\nfunction pushComputedPropsSpec(path, file) {\n  const {\n    node,\n    scope,\n    parent\n  } = path;\n  const left = node.left;\n  let declar;\n  const stepKey = scope.generateUid(\"step\");\n\n  const stepValue = _core.types.memberExpression(_core.types.identifier(stepKey), _core.types.identifier(\"value\"));\n\n  if (_core.types.isIdentifier(left) || _core.types.isPattern(left) || _core.types.isMemberExpression(left)) {\n    declar = _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", left, stepValue));\n  } else if (_core.types.isVariableDeclaration(left)) {\n    declar = _core.types.variableDeclaration(left.kind, [_core.types.variableDeclarator(left.declarations[0].id, stepValue)]);\n  } else {\n    throw file.buildCodeFrameError(left, `Unknown node type ${left.type} in ForStatement`);\n  }\n\n  const template = buildForOf({\n    ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier(\"didIteratorError\"),\n    ITERATOR_COMPLETION: scope.generateUidIdentifier(\"iteratorNormalCompletion\"),\n    ITERATOR_ERROR_KEY: scope.generateUidIdentifier(\"iteratorError\"),\n    ITERATOR_KEY: scope.generateUidIdentifier(\"iterator\"),\n    STEP_KEY: _core.types.identifier(stepKey),\n    OBJECT: node.right\n  });\n\n  const isLabeledParent = _core.types.isLabeledStatement(parent);\n\n  const tryBody = template[3].block.body;\n  const loop = tryBody[0];\n\n  if (isLabeledParent) {\n    tryBody[0] = _core.types.labeledStatement(parent.label, loop);\n  }\n\n  return {\n    replaceParent: isLabeledParent,\n    declar: declar,\n    loop: loop,\n    node: template\n  };\n}"]},"metadata":{},"sourceType":"script"}