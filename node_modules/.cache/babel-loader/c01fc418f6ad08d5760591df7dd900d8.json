{"ast":null,"code":"/*!\n * babel-extract-comments <https://github.com/jonschlinkert/babel-extract-comments>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar babylon = require('babylon');\n/**\n * Extract code comments from the given `string`.\n *\n * ```js\n * var extract = require('babel-extract-comments');\n * console.log(extract('// this is a code comment'));\n * // [{ type: 'CommentBlock',\n * //  value: '!\\n * babel-extract-comments <https://github.com/jonschlinkert/babel-extract-comments>\\n *\\n *\n * // Copyright (c) 2014-2018, Jon Schlinkert.\\n * Released under the MIT License.\\n ',\n * //   start: 0,\n * //   end: 173,\n * //   loc: SourceLocation { start: [Position], end: [Position] } }]\n * ```\n * @param  {String} `string` String of javascript\n * @return {Array} Array of code comment objects.\n * @api public\n */\n\n\nfunction extract(str, options) {\n  var res = babylon.parse(str, options);\n  return res.comments;\n}\n/**\n * Extract code comments from a JavaScript file.\n *\n * ```js\n * console.log(extract.file('some-file.js'), { cwd: 'some/path' });\n * // [ { type: 'Line',\n * //     value: ' this is a line comment',\n * //     range: [ 0, 25 ],\n * //     loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 25 } } } ]\n * ```\n * @param  {String} `file` Filepath to the file to parse.\n * @param  {Object} `options` Options to pass to [esprima][].\n * @return {Array} Array of code comment objects.\n * @api public\n */\n\n\nextract.file = function (file, options) {\n  var opts = Object.assign({\n    cwd: process.cwd()\n  }, options);\n  var str = fs.readFileSync(path.resolve(opts.cwd, file), 'utf8');\n  return extract(str, options);\n};\n/**\n * Expose `extract`\n */\n\n\nmodule.exports = extract;","map":{"version":3,"sources":["/home/agatha/open/node_modules/babel-extract-comments/index.js"],"names":["fs","require","path","babylon","extract","str","options","res","parse","comments","file","opts","Object","assign","cwd","process","readFileSync","resolve","module","exports"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAME,OAAO,GAAGF,OAAO,CAAC,SAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASG,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC7B,MAAMC,GAAG,GAAGJ,OAAO,CAACK,KAAR,CAAcH,GAAd,EAAmBC,OAAnB,CAAZ;AACA,SAAOC,GAAG,CAACE,QAAX;AACD;AAED;;;;;;;;;;;;;;;;;AAgBAL,OAAO,CAACM,IAAR,GAAe,UAASA,IAAT,EAAeJ,OAAf,EAAwB;AACrC,MAAMK,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,GAAG,EAAEC,OAAO,CAACD,GAAR;AAAP,GAAd,EAAsCR,OAAtC,CAAb;AACA,MAAMD,GAAG,GAAGL,EAAE,CAACgB,YAAH,CAAgBd,IAAI,CAACe,OAAL,CAAaN,IAAI,CAACG,GAAlB,EAAuBJ,IAAvB,CAAhB,EAA8C,MAA9C,CAAZ;AACA,SAAON,OAAO,CAACC,GAAD,EAAMC,OAAN,CAAd;AACD,CAJD;AAMA;;;;;AAIAY,MAAM,CAACC,OAAP,GAAiBf,OAAjB","sourcesContent":["/*!\n * babel-extract-comments <https://github.com/jonschlinkert/babel-extract-comments>\n *\n * Copyright (c) 2014-2018, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst babylon = require('babylon');\n\n/**\n * Extract code comments from the given `string`.\n *\n * ```js\n * var extract = require('babel-extract-comments');\n * console.log(extract('// this is a code comment'));\n * // [{ type: 'CommentBlock',\n * //  value: '!\\n * babel-extract-comments <https://github.com/jonschlinkert/babel-extract-comments>\\n *\\n *\n * // Copyright (c) 2014-2018, Jon Schlinkert.\\n * Released under the MIT License.\\n ',\n * //   start: 0,\n * //   end: 173,\n * //   loc: SourceLocation { start: [Position], end: [Position] } }]\n * ```\n * @param  {String} `string` String of javascript\n * @return {Array} Array of code comment objects.\n * @api public\n */\n\nfunction extract(str, options) {\n  const res = babylon.parse(str, options);\n  return res.comments;\n}\n\n/**\n * Extract code comments from a JavaScript file.\n *\n * ```js\n * console.log(extract.file('some-file.js'), { cwd: 'some/path' });\n * // [ { type: 'Line',\n * //     value: ' this is a line comment',\n * //     range: [ 0, 25 ],\n * //     loc: { start: { line: 1, column: 0 }, end: { line: 1, column: 25 } } } ]\n * ```\n * @param  {String} `file` Filepath to the file to parse.\n * @param  {Object} `options` Options to pass to [esprima][].\n * @return {Array} Array of code comment objects.\n * @api public\n */\n\nextract.file = function(file, options) {\n  const opts = Object.assign({ cwd: process.cwd() }, options);\n  const str = fs.readFileSync(path.resolve(opts.cwd, file), 'utf8');\n  return extract(str, options);\n};\n\n/**\n * Expose `extract`\n */\n\nmodule.exports = extract;\n"]},"metadata":{},"sourceType":"script"}