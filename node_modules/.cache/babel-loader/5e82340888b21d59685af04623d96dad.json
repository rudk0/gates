{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst upath = require('upath');\n\nconst generateSWSchema = require('./options/schema/generate-sw');\n\nconst getFileManifestEntries = require('./lib/get-file-manifest-entries');\n\nconst rebasePath = require('./lib/rebase-path');\n\nconst validate = require('./lib/validate-options');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('./lib/write-sw-using-default-template'); // eslint-disable-next-line jsdoc/newline-after-description\n\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config The configuration to use.\n *\n * @param {string} config.globDirectory The local directory you wish to match\n * `globPatterns` against. The path is relative to the current directory.\n *\n * @param {string} config.swDest The path and filename of the service worker file\n * that will be created by the build process, relative to the current working\n * directory. It must end in '.js'.\n *\n * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n * A list of entries to be precached, in addition to any entries that are\n * generated as part of the build configuration.\n *\n * @param {Array<string>} [config.babelPresetEnvTargets=['chrome >= 56']]\n * The [targets](https://babeljs.io/docs/en/babel-preset-env#targets) to pass to\n * `babel-preset-env` when transpiling the service worker bundle.\n *\n * @param {string} [config.cacheId] An optional ID to be prepended to cache\n * names. This is primarily useful for local development where multiple sites\n * may be served from the same `http://localhost:port` origin.\n *\n * @param {boolean} [config.cleanupOutdatedCaches=false] Whether or not Workbox\n * should attempt to identify an delete any precaches created by older,\n * incompatible versions.\n *\n * @param {boolean} [config.clientsClaim=false] Whether or not the service\n * worker should [start controlling](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim)\n * any existing clients as soon as it activates.\n *\n * @param {string} [config.directoryIndex='index.html'] If a navigation request\n * for a URL ending in `/` fails to match a precached URL, this value will be\n * appended to the URL and that will be checked for a precache match. This\n * should be set to what your web server is using for its directory index.\n *\n * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n * assumed to be uniquely versioned via their URL, and exempted from the normal\n * HTTP cache-busting that's done when populating the precache. While not\n * required, it's recommended that if your existing build process already\n * inserts a `[hash]` value into each filename, you provide a RegExp that will\n * detect that, as it will reduce the bandwidth consumed when precaching.\n *\n * @param {boolean} [config.globFollow=true] Determines whether or not symlinks\n * are followed when generating the precache manifest. For more information, see\n * the definition of `follow` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globIgnores=['node_modules/**']]\n * A set of patterns matching files to always exclude when generating the\n * precache manifest. For more information, see the definition of `ignore` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globPatterns=['**.{js,css,html}']]\n * Files matching any of these patterns will be included in the precache\n * manifest. For more information, see the\n * [`glob` primer](https://github.com/isaacs/node-glob#glob-primer).\n *\n * @param {boolean} [config.globStrict=true] If true, an error reading a directory when\n * generating a precache manifest will cause the build to fail. If false, the\n * problematic directory will be skipped. For more information, see the\n * definition of `strict` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<RegExp>} [config.ignoreURLParametersMatching=[/^utm_/]]\n * Any search parameter names that match against one of the RegExp in this array\n * will be removed before looking for a precache match. This is useful if your\n * users might request URLs that contain, for example, URL parameters used to\n * track the source of the traffic.\n *\n * @param {Array<string>} [config.importScripts] A list of JavaScript files that\n * should be passed to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\n * inside the generated service worker file. This is  useful when you want to\n * let Workbox create your top-level service worker file, but want to include\n * some additional code, such as a push event listener.\n *\n * @param {boolean} [config.inlineWorkboxRuntime=false] Whether the runtime code\n * for the Workbox library should be included in the top-level service worker,\n * or split into a separate file that needs to be deployed alongside the service\n * worker. Keeping the runtime separate means that users will not have to\n * re-download the Workbox code each time your top-level service worker changes.\n *\n * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms] One or more\n * functions which will be applied sequentially against the generated manifest.\n * If `modifyURLPrefix` or `dontCacheBustURLsMatching` are also specified, their\n * corresponding transformations will be applied first.\n *\n * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n * used to determine the maximum size of files that will be precached. This\n * prevents you from inadvertently precaching very large files that might have\n * accidentally matched one of your patterns.\n *\n * @param {string} [config.mode='production'] If set to 'production', then an\n * optimized service worker bundle that excludes debugging info will be\n * produced. If not explicitly configured here, the `process.env.NODE_ENV` value\n * will be used, and failing that, it will fall back to `'production'`.\n *\n * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n * that, if present in an entry in the precache manifest, will be replaced with\n * the corresponding value. This can be used to, for example, remove or add a\n * path prefix from a manifest entry if your web hosting setup doesn't match\n * your local filesystem setup. As an alternative with more flexibility, you can\n * use the `manifestTransforms` option and provide a function that modifies the\n * entries in the manifest using whatever logic you provide.\n *\n * @param {string} [config.navigateFallback] If specified, all\n * [navigation requests](https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests)\n * for URLs that aren't precached will be fulfilled with the HTML at the URL\n * provided. You must pass in the URL of an HTML document that is listed in your\n * precache manifest. This is meant to be used in a Single Page App scenario, in\n * which you want all navigations to use common [App Shell HTML](https://developers.google.com/web/fundamentals/architecture/app-shell).\n *\n * @param {Array<RegExp>} [config.navigateFallbackDenylist] An optional array\n * of regular expressions that restricts which URLs the configured\n * `navigateFallback` behavior applies to. This is useful if only a subset of\n * your site's URLs should be treated as being part of a\n * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n * configured, the denylist takes precedent.\n *\n * @param {Array<RegExp>} [config.navigateFallbackAllowlist] An optional array\n * of regular expressions that restricts which URLs the configured\n * `navigateFallback` behavior applies to. This is useful if only a subset of\n * your site's URLs should be treated as being part of a\n * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n * configured, the denylist takes precedent.\n *\n * @param {boolean} [config.navigationPreload=false] Whether or not to enable\n * [navigation preload](https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload)\n * in the generated service worker. When set to true, you must also use\n * `runtimeCaching` to set up an appropriate response strategy that will match\n * navigation requests, and make use of the preloaded response.\n *\n * @param {boolean|Object} [config.offlineGoogleAnalytics=false] Controls\n * whether or not to include support for\n * [offline Google Analytics](https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics).\n * When `true`, the call to `workbox-google-analytics`'s `initialize()` will be\n * added to your generated service worker. When set to an `Object`, that object\n * will be passed in to the `initialize()` call, allowing you to customize the\n * behavior.\n *\n * @param {Array<RuntimeCachingEntry>} [config.runtimeCaching]\n *\n * @param {boolean} [config.skipWaiting=false] Whether to add an\n * unconditional call to [`skipWaiting()`]{@link module:workbox-core.skipWaiting}\n * to the generated service worker. If `false`, then a `message` listener will\n * be added instead, allowing you to conditionally call `skipWaiting()`.\n *\n * @param {boolean} [config.sourcemap=true] Whether to create a sourcemap\n * for the generated service worker files.\n *\n * @param {Object} [config.templatedURLs] If a URL is rendered based on some\n * server-side logic, its contents may depend on multiple files or on some other\n * unique string value. The keys in this object are server-rendered URLs. If the\n * values are an array of strings, they will be interpreted as `glob` patterns,\n * and the contents of any files matching the patterns will be used to uniquely\n * version the URL. If used with a single string, it will be interpreted as\n * unique versioning information that you've generated for a given URL.\n *\n * @return {Promise<{count: number, filePaths: Array<string>, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker and related files\n * (indicated by `filePaths`) has been written to `swDest`. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, and the\n * `count` property contains the total number of precached entries. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function generateSW(config) {\n  const options = validate(config, generateSWSchema);\n\n  if (options.globDirectory) {\n    // Make sure we leave swDest out of the precache manifest.\n    options.globIgnores.push(rebasePath({\n      baseDirectory: options.globDirectory,\n      file: options.swDest\n    })); // If we create an extra external runtime file, ignore that, too.\n    // See https://rollupjs.org/guide/en/#outputchunkfilenames for naming.\n\n    if (!options.inlineWorkboxRuntime) {\n      const swDestDir = upath.dirname(options.swDest);\n      const workboxRuntimeFile = upath.join(swDestDir, 'workbox-*.js');\n      options.globIgnores.push(rebasePath({\n        baseDirectory: options.globDirectory,\n        file: workboxRuntimeFile\n      }));\n    }\n  }\n\n  const {\n    count,\n    size,\n    manifestEntries,\n    warnings\n  } = await getFileManifestEntries(options);\n  const filePaths = await writeServiceWorkerUsingDefaultTemplate(Object.assign({\n    manifestEntries\n  }, options));\n  return {\n    count,\n    filePaths,\n    size,\n    warnings\n  };\n}\n\nmodule.exports = generateSW;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/generate-sw.js"],"names":["upath","require","generateSWSchema","getFileManifestEntries","rebasePath","validate","writeServiceWorkerUsingDefaultTemplate","generateSW","config","options","globDirectory","globIgnores","push","baseDirectory","file","swDest","inlineWorkboxRuntime","swDestDir","dirname","workboxRuntimeFile","join","count","size","manifestEntries","warnings","filePaths","Object","assign","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,8BAAD,CAAhC;;AAEA,MAAME,sBAAsB,GAAGF,OAAO,CAAC,iCAAD,CAAtC;;AAEA,MAAMG,UAAU,GAAGH,OAAO,CAAC,mBAAD,CAA1B;;AAEA,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,wBAAD,CAAxB;;AAEA,MAAMK,sCAAsC,GAAGL,OAAO,CAAC,uCAAD,CAAtD,C,CAAiG;;AAEjG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmLA,eAAeM,UAAf,CAA0BC,MAA1B,EAAkC;AAChC,QAAMC,OAAO,GAAGJ,QAAQ,CAACG,MAAD,EAASN,gBAAT,CAAxB;;AAEA,MAAIO,OAAO,CAACC,aAAZ,EAA2B;AACzB;AACAD,IAAAA,OAAO,CAACE,WAAR,CAAoBC,IAApB,CAAyBR,UAAU,CAAC;AAClCS,MAAAA,aAAa,EAAEJ,OAAO,CAACC,aADW;AAElCI,MAAAA,IAAI,EAAEL,OAAO,CAACM;AAFoB,KAAD,CAAnC,EAFyB,CAKpB;AACL;;AAEA,QAAI,CAACN,OAAO,CAACO,oBAAb,EAAmC;AACjC,YAAMC,SAAS,GAAGjB,KAAK,CAACkB,OAAN,CAAcT,OAAO,CAACM,MAAtB,CAAlB;AACA,YAAMI,kBAAkB,GAAGnB,KAAK,CAACoB,IAAN,CAAWH,SAAX,EAAsB,cAAtB,CAA3B;AACAR,MAAAA,OAAO,CAACE,WAAR,CAAoBC,IAApB,CAAyBR,UAAU,CAAC;AAClCS,QAAAA,aAAa,EAAEJ,OAAO,CAACC,aADW;AAElCI,QAAAA,IAAI,EAAEK;AAF4B,OAAD,CAAnC;AAID;AACF;;AAED,QAAM;AACJE,IAAAA,KADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,eAHI;AAIJC,IAAAA;AAJI,MAKF,MAAMrB,sBAAsB,CAACM,OAAD,CALhC;AAMA,QAAMgB,SAAS,GAAG,MAAMnB,sCAAsC,CAACoB,MAAM,CAACC,MAAP,CAAc;AAC3EJ,IAAAA;AAD2E,GAAd,EAE5Dd,OAF4D,CAAD,CAA9D;AAGA,SAAO;AACLY,IAAAA,KADK;AAELI,IAAAA,SAFK;AAGLH,IAAAA,IAHK;AAILE,IAAAA;AAJK,GAAP;AAMD;;AAEDI,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst upath = require('upath');\n\nconst generateSWSchema = require('./options/schema/generate-sw');\n\nconst getFileManifestEntries = require('./lib/get-file-manifest-entries');\n\nconst rebasePath = require('./lib/rebase-path');\n\nconst validate = require('./lib/validate-options');\n\nconst writeServiceWorkerUsingDefaultTemplate = require('./lib/write-sw-using-default-template'); // eslint-disable-next-line jsdoc/newline-after-description\n\n/**\n * This method creates a list of URLs to precache, referred to as a \"precache\n * manifest\", based on the options you provide.\n *\n * It also takes in additional options that configures the service worker's\n * behavior, like any `runtimeCaching` rules it should use.\n *\n * Based on the precache manifest and the additional configuration, it writes\n * a ready-to-use service worker file to disk at `swDest`.\n *\n * @param {Object} config The configuration to use.\n *\n * @param {string} config.globDirectory The local directory you wish to match\n * `globPatterns` against. The path is relative to the current directory.\n *\n * @param {string} config.swDest The path and filename of the service worker file\n * that will be created by the build process, relative to the current working\n * directory. It must end in '.js'.\n *\n * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n * A list of entries to be precached, in addition to any entries that are\n * generated as part of the build configuration.\n *\n * @param {Array<string>} [config.babelPresetEnvTargets=['chrome >= 56']]\n * The [targets](https://babeljs.io/docs/en/babel-preset-env#targets) to pass to\n * `babel-preset-env` when transpiling the service worker bundle.\n *\n * @param {string} [config.cacheId] An optional ID to be prepended to cache\n * names. This is primarily useful for local development where multiple sites\n * may be served from the same `http://localhost:port` origin.\n *\n * @param {boolean} [config.cleanupOutdatedCaches=false] Whether or not Workbox\n * should attempt to identify an delete any precaches created by older,\n * incompatible versions.\n *\n * @param {boolean} [config.clientsClaim=false] Whether or not the service\n * worker should [start controlling](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim)\n * any existing clients as soon as it activates.\n *\n * @param {string} [config.directoryIndex='index.html'] If a navigation request\n * for a URL ending in `/` fails to match a precached URL, this value will be\n * appended to the URL and that will be checked for a precache match. This\n * should be set to what your web server is using for its directory index.\n *\n * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n * assumed to be uniquely versioned via their URL, and exempted from the normal\n * HTTP cache-busting that's done when populating the precache. While not\n * required, it's recommended that if your existing build process already\n * inserts a `[hash]` value into each filename, you provide a RegExp that will\n * detect that, as it will reduce the bandwidth consumed when precaching.\n *\n * @param {boolean} [config.globFollow=true] Determines whether or not symlinks\n * are followed when generating the precache manifest. For more information, see\n * the definition of `follow` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globIgnores=['node_modules/**']]\n * A set of patterns matching files to always exclude when generating the\n * precache manifest. For more information, see the definition of `ignore` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globPatterns=['**.{js,css,html}']]\n * Files matching any of these patterns will be included in the precache\n * manifest. For more information, see the\n * [`glob` primer](https://github.com/isaacs/node-glob#glob-primer).\n *\n * @param {boolean} [config.globStrict=true] If true, an error reading a directory when\n * generating a precache manifest will cause the build to fail. If false, the\n * problematic directory will be skipped. For more information, see the\n * definition of `strict` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<RegExp>} [config.ignoreURLParametersMatching=[/^utm_/]]\n * Any search parameter names that match against one of the RegExp in this array\n * will be removed before looking for a precache match. This is useful if your\n * users might request URLs that contain, for example, URL parameters used to\n * track the source of the traffic.\n *\n * @param {Array<string>} [config.importScripts] A list of JavaScript files that\n * should be passed to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\n * inside the generated service worker file. This is  useful when you want to\n * let Workbox create your top-level service worker file, but want to include\n * some additional code, such as a push event listener.\n *\n * @param {boolean} [config.inlineWorkboxRuntime=false] Whether the runtime code\n * for the Workbox library should be included in the top-level service worker,\n * or split into a separate file that needs to be deployed alongside the service\n * worker. Keeping the runtime separate means that users will not have to\n * re-download the Workbox code each time your top-level service worker changes.\n *\n * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms] One or more\n * functions which will be applied sequentially against the generated manifest.\n * If `modifyURLPrefix` or `dontCacheBustURLsMatching` are also specified, their\n * corresponding transformations will be applied first.\n *\n * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n * used to determine the maximum size of files that will be precached. This\n * prevents you from inadvertently precaching very large files that might have\n * accidentally matched one of your patterns.\n *\n * @param {string} [config.mode='production'] If set to 'production', then an\n * optimized service worker bundle that excludes debugging info will be\n * produced. If not explicitly configured here, the `process.env.NODE_ENV` value\n * will be used, and failing that, it will fall back to `'production'`.\n *\n * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n * that, if present in an entry in the precache manifest, will be replaced with\n * the corresponding value. This can be used to, for example, remove or add a\n * path prefix from a manifest entry if your web hosting setup doesn't match\n * your local filesystem setup. As an alternative with more flexibility, you can\n * use the `manifestTransforms` option and provide a function that modifies the\n * entries in the manifest using whatever logic you provide.\n *\n * @param {string} [config.navigateFallback] If specified, all\n * [navigation requests](https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests)\n * for URLs that aren't precached will be fulfilled with the HTML at the URL\n * provided. You must pass in the URL of an HTML document that is listed in your\n * precache manifest. This is meant to be used in a Single Page App scenario, in\n * which you want all navigations to use common [App Shell HTML](https://developers.google.com/web/fundamentals/architecture/app-shell).\n *\n * @param {Array<RegExp>} [config.navigateFallbackDenylist] An optional array\n * of regular expressions that restricts which URLs the configured\n * `navigateFallback` behavior applies to. This is useful if only a subset of\n * your site's URLs should be treated as being part of a\n * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n * configured, the denylist takes precedent.\n *\n * @param {Array<RegExp>} [config.navigateFallbackAllowlist] An optional array\n * of regular expressions that restricts which URLs the configured\n * `navigateFallback` behavior applies to. This is useful if only a subset of\n * your site's URLs should be treated as being part of a\n * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n * configured, the denylist takes precedent.\n *\n * @param {boolean} [config.navigationPreload=false] Whether or not to enable\n * [navigation preload](https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload)\n * in the generated service worker. When set to true, you must also use\n * `runtimeCaching` to set up an appropriate response strategy that will match\n * navigation requests, and make use of the preloaded response.\n *\n * @param {boolean|Object} [config.offlineGoogleAnalytics=false] Controls\n * whether or not to include support for\n * [offline Google Analytics](https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics).\n * When `true`, the call to `workbox-google-analytics`'s `initialize()` will be\n * added to your generated service worker. When set to an `Object`, that object\n * will be passed in to the `initialize()` call, allowing you to customize the\n * behavior.\n *\n * @param {Array<RuntimeCachingEntry>} [config.runtimeCaching]\n *\n * @param {boolean} [config.skipWaiting=false] Whether to add an\n * unconditional call to [`skipWaiting()`]{@link module:workbox-core.skipWaiting}\n * to the generated service worker. If `false`, then a `message` listener will\n * be added instead, allowing you to conditionally call `skipWaiting()`.\n *\n * @param {boolean} [config.sourcemap=true] Whether to create a sourcemap\n * for the generated service worker files.\n *\n * @param {Object} [config.templatedURLs] If a URL is rendered based on some\n * server-side logic, its contents may depend on multiple files or on some other\n * unique string value. The keys in this object are server-rendered URLs. If the\n * values are an array of strings, they will be interpreted as `glob` patterns,\n * and the contents of any files matching the patterns will be used to uniquely\n * version the URL. If used with a single string, it will be interpreted as\n * unique versioning information that you've generated for a given URL.\n *\n * @return {Promise<{count: number, filePaths: Array<string>, size: number, warnings: Array<string>}>}\n * A promise that resolves once the service worker and related files\n * (indicated by `filePaths`) has been written to `swDest`. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, and the\n * `count` property contains the total number of precached entries. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function generateSW(config) {\n  const options = validate(config, generateSWSchema);\n\n  if (options.globDirectory) {\n    // Make sure we leave swDest out of the precache manifest.\n    options.globIgnores.push(rebasePath({\n      baseDirectory: options.globDirectory,\n      file: options.swDest\n    })); // If we create an extra external runtime file, ignore that, too.\n    // See https://rollupjs.org/guide/en/#outputchunkfilenames for naming.\n\n    if (!options.inlineWorkboxRuntime) {\n      const swDestDir = upath.dirname(options.swDest);\n      const workboxRuntimeFile = upath.join(swDestDir, 'workbox-*.js');\n      options.globIgnores.push(rebasePath({\n        baseDirectory: options.globDirectory,\n        file: workboxRuntimeFile\n      }));\n    }\n  }\n\n  const {\n    count,\n    size,\n    manifestEntries,\n    warnings\n  } = await getFileManifestEntries(options);\n  const filePaths = await writeServiceWorkerUsingDefaultTemplate(Object.assign({\n    manifestEntries\n  }, options));\n  return {\n    count,\n    filePaths,\n    size,\n    warnings\n  };\n}\n\nmodule.exports = generateSW;"]},"metadata":{},"sourceType":"script"}