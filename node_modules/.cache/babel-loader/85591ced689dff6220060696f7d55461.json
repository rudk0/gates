{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only Tagged Templates-related bug in ES Modules-supporting browsers (Safari 10 & 11).\n * Use this plugin instead of `@babel/plugin-transform-template-literals` when targeting ES Modules.\n *\n * @example\n *   // Bug 1: Safari 10/11 doesn't reliably return the same Strings value.\n *   // The value changes depending on invocation and function optimization state.\n *   function f() { return Object`` }\n *   f() === new f()  // false, should be true.\n *\n * @example\n *   // Bug 2: Safari 10/11 use the same cached strings value when the string parts are the same.\n *   // This behavior comes from an earlier version of the spec, and can cause tricky bugs.\n *   Object``===Object``  // true, should be false.\n *\n * Benchmarks: https://jsperf.com/compiled-tagged-template-performance\n */\n\nvar _default = ({\n  types: t\n}) => ({\n  name: \"transform-tagged-template-caching\",\n  visitor: {\n    TaggedTemplateExpression(path, state) {\n      // tagged templates we've already dealt with\n      let processed = state.get(\"processed\");\n\n      if (!processed) {\n        processed = new Map();\n        state.set(\"processed\", processed);\n      }\n\n      if (processed.has(path.node)) return path.skip(); // Grab the expressions from the original tag.\n      //   tag`a${'hello'}`  // ['hello']\n\n      const expressions = path.node.quasi.expressions; // Create an identity function helper:\n      //   identity = t => t\n\n      let identity = state.get(\"identity\");\n\n      if (!identity) {\n        identity = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"_\");\n        state.set(\"identity\", identity);\n        const binding = path.scope.getBinding(identity.name);\n        binding.path.get(\"init\").replaceWith(t.arrowFunctionExpression( // re-use the helper identifier for compressability\n        [t.identifier(\"t\")], t.identifier(\"t\")));\n      } // Use the identity function helper to get a reference to the template's Strings.\n      // We replace all expressions with `0` ensure Strings has the same shape.\n      //   identity`a${0}`\n\n\n      const template = t.taggedTemplateExpression(identity, t.templateLiteral(path.node.quasi.quasis, expressions.map(() => t.numericLiteral(0))));\n      processed.set(template, true); // Install an inline cache at the callsite using the global variable:\n      //   _t || (_t = identity`a${0}`)\n\n      const ident = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"t\");\n      path.scope.getBinding(ident.name).path.parent.kind = \"let\";\n      const inlineCache = t.logicalExpression(\"||\", ident, t.assignmentExpression(\"=\", ident, template)); // The original tag function becomes a plain function call.\n      // The expressions omitted from the cached Strings tag are directly applied as arguments.\n      //   tag(_t || (_t = Object`a${0}`), 'hello')\n\n      const node = t.callExpression(path.node.tag, [inlineCache, ...expressions]);\n      path.replaceWith(node);\n    }\n\n  }\n});\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/preset-modules/lib/plugins/transform-tagged-template-caching/index.js"],"names":["exports","__esModule","default","_default","types","t","name","visitor","TaggedTemplateExpression","path","state","processed","get","Map","set","has","node","skip","expressions","quasi","identity","scope","getProgramParent","generateDeclaredUidIdentifier","binding","getBinding","replaceWith","arrowFunctionExpression","identifier","template","taggedTemplateExpression","templateLiteral","quasis","map","numericLiteral","ident","parent","kind","inlineCache","logicalExpression","assignmentExpression","callExpression","tag","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Converts destructured parameters with default values to non-shorthand syntax.\n * This fixes the only Tagged Templates-related bug in ES Modules-supporting browsers (Safari 10 & 11).\n * Use this plugin instead of `@babel/plugin-transform-template-literals` when targeting ES Modules.\n *\n * @example\n *   // Bug 1: Safari 10/11 doesn't reliably return the same Strings value.\n *   // The value changes depending on invocation and function optimization state.\n *   function f() { return Object`` }\n *   f() === new f()  // false, should be true.\n *\n * @example\n *   // Bug 2: Safari 10/11 use the same cached strings value when the string parts are the same.\n *   // This behavior comes from an earlier version of the spec, and can cause tricky bugs.\n *   Object``===Object``  // true, should be false.\n *\n * Benchmarks: https://jsperf.com/compiled-tagged-template-performance\n */\nvar _default = ({\n  types: t\n}) => ({\n  name: \"transform-tagged-template-caching\",\n  visitor: {\n    TaggedTemplateExpression(path, state) {\n      // tagged templates we've already dealt with\n      let processed = state.get(\"processed\");\n\n      if (!processed) {\n        processed = new Map();\n        state.set(\"processed\", processed);\n      }\n\n      if (processed.has(path.node)) return path.skip(); // Grab the expressions from the original tag.\n      //   tag`a${'hello'}`  // ['hello']\n\n      const expressions = path.node.quasi.expressions; // Create an identity function helper:\n      //   identity = t => t\n\n      let identity = state.get(\"identity\");\n\n      if (!identity) {\n        identity = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"_\");\n        state.set(\"identity\", identity);\n        const binding = path.scope.getBinding(identity.name);\n        binding.path.get(\"init\").replaceWith(t.arrowFunctionExpression( // re-use the helper identifier for compressability\n        [t.identifier(\"t\")], t.identifier(\"t\")));\n      } // Use the identity function helper to get a reference to the template's Strings.\n      // We replace all expressions with `0` ensure Strings has the same shape.\n      //   identity`a${0}`\n\n\n      const template = t.taggedTemplateExpression(identity, t.templateLiteral(path.node.quasi.quasis, expressions.map(() => t.numericLiteral(0))));\n      processed.set(template, true); // Install an inline cache at the callsite using the global variable:\n      //   _t || (_t = identity`a${0}`)\n\n      const ident = path.scope.getProgramParent().generateDeclaredUidIdentifier(\"t\");\n      path.scope.getBinding(ident.name).path.parent.kind = \"let\";\n      const inlineCache = t.logicalExpression(\"||\", ident, t.assignmentExpression(\"=\", ident, template)); // The original tag function becomes a plain function call.\n      // The expressions omitted from the cached Strings tag are directly applied as arguments.\n      //   tag(_t || (_t = Object`a${0}`), 'hello')\n\n      const node = t.callExpression(path.node.tag, [inlineCache, ...expressions]);\n      path.replaceWith(node);\n    }\n\n  }\n});\n\nexports.default = _default;\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}