{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _helperModuleTransforms = require(\"@babel/helper-module-transforms\");\n\nvar _helperSimpleAccess = _interopRequireDefault(require(\"@babel/helper-simple-access\"));\n\nvar _core = require(\"@babel/core\");\n\nvar _utils = require(\"babel-plugin-dynamic-import-node/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const transformImportCall = (0, _utils.createDynamicImportTransform)(api);\n  const {\n    loose,\n    strictNamespace = false,\n    mjsStrictNamespace = true,\n    allowTopLevelThis,\n    strict,\n    strictMode,\n    noInterop,\n    lazy = false,\n    allowCommonJSExports = true\n  } = options;\n\n  if (typeof lazy !== \"boolean\" && typeof lazy !== \"function\" && (!Array.isArray(lazy) || !lazy.every(item => typeof item === \"string\"))) {\n    throw new Error(`.lazy must be a boolean, array of strings, or a function`);\n  }\n\n  if (typeof strictNamespace !== \"boolean\") {\n    throw new Error(`.strictNamespace must be a boolean, or undefined`);\n  }\n\n  if (typeof mjsStrictNamespace !== \"boolean\") {\n    throw new Error(`.mjsStrictNamespace must be a boolean, or undefined`);\n  }\n\n  const getAssertion = localName => _core.template.expression.ast`\n    (function(){\n      throw new Error(\n        \"The CommonJS '\" + \"${localName}\" + \"' variable is not available in ES6 modules.\" +\n        \"Consider setting setting sourceType:script or sourceType:unambiguous in your \" +\n        \"Babel config for this file.\");\n    })()\n  `;\n\n  const moduleExportsVisitor = {\n    ReferencedIdentifier(path) {\n      const localName = path.node.name;\n      if (localName !== \"module\" && localName !== \"exports\") return;\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = this.scope.getBinding(localName);\n\n      if (rootBinding !== localBinding || path.parentPath.isObjectProperty({\n        value: path.node\n      }) && path.parentPath.parentPath.isObjectPattern() || path.parentPath.isAssignmentExpression({\n        left: path.node\n      }) || path.isAssignmentExpression({\n        left: path.node\n      })) {\n        return;\n      }\n\n      path.replaceWith(getAssertion(localName));\n    },\n\n    AssignmentExpression(path) {\n      const left = path.get(\"left\");\n\n      if (left.isIdentifier()) {\n        const localName = path.node.name;\n        if (localName !== \"module\" && localName !== \"exports\") return;\n        const localBinding = path.scope.getBinding(localName);\n        const rootBinding = this.scope.getBinding(localName);\n        if (rootBinding !== localBinding) return;\n        const right = path.get(\"right\");\n        right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));\n      } else if (left.isPattern()) {\n        const ids = left.getOuterBindingIdentifiers();\n        const localName = Object.keys(ids).filter(localName => {\n          if (localName !== \"module\" && localName !== \"exports\") return false;\n          return this.scope.getBinding(localName) === path.scope.getBinding(localName);\n        })[0];\n\n        if (localName) {\n          const right = path.get(\"right\");\n          right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));\n        }\n      }\n    }\n\n  };\n  return {\n    name: \"transform-modules-commonjs\",\n\n    pre() {\n      this.file.set(\"@babel/plugin-transform-modules-*\", \"commonjs\");\n    },\n\n    visitor: {\n      CallExpression(path) {\n        if (!this.file.has(\"@babel/plugin-proposal-dynamic-import\")) return;\n        if (!path.get(\"callee\").isImport()) return;\n        let {\n          scope\n        } = path;\n\n        do {\n          scope.rename(\"require\");\n        } while (scope = scope.parent);\n\n        transformImportCall(this, path.get(\"callee\"));\n      },\n\n      Program: {\n        exit(path, state) {\n          if (!(0, _helperModuleTransforms.isModule)(path)) return;\n          path.scope.rename(\"exports\");\n          path.scope.rename(\"module\");\n          path.scope.rename(\"require\");\n          path.scope.rename(\"__filename\");\n          path.scope.rename(\"__dirname\");\n\n          if (!allowCommonJSExports) {\n            (0, _helperSimpleAccess.default)(path, new Set([\"module\", \"exports\"]));\n            path.traverse(moduleExportsVisitor, {\n              scope: path.scope\n            });\n          }\n\n          let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);\n          if (moduleName) moduleName = _core.types.stringLiteral(moduleName);\n          const {\n            meta,\n            headers\n          } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path, {\n            exportName: \"exports\",\n            loose,\n            strict,\n            strictMode,\n            allowTopLevelThis,\n            noInterop,\n            lazy,\n            esNamespaceOnly: typeof state.filename === \"string\" && /\\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace\n          });\n\n          for (const [source, metadata] of meta.source) {\n            const loadExpr = _core.types.callExpression(_core.types.identifier(\"require\"), [_core.types.stringLiteral(source)]);\n\n            let header;\n\n            if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {\n              if (metadata.lazy) throw new Error(\"Assertion failure\");\n              header = _core.types.expressionStatement(loadExpr);\n            } else {\n              const init = (0, _helperModuleTransforms.wrapInterop)(path, loadExpr, metadata.interop) || loadExpr;\n\n              if (metadata.lazy) {\n                header = _core.template.ast`\n                  function ${metadata.name}() {\n                    const data = ${init};\n                    ${metadata.name} = function(){ return data; };\n                    return data;\n                  }\n                `;\n              } else {\n                header = _core.template.ast`\n                  var ${metadata.name} = ${init};\n                `;\n              }\n            }\n\n            header.loc = metadata.loc;\n            headers.push(header);\n            headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, loose));\n          }\n\n          (0, _helperModuleTransforms.ensureStatementsHoisted)(headers);\n          path.unshiftContainer(\"body\", headers);\n        }\n\n      }\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_helperModuleTransforms","_helperSimpleAccess","_interopRequireDefault","_core","_utils","obj","__esModule","_default","declare","api","options","assertVersion","transformImportCall","createDynamicImportTransform","loose","strictNamespace","mjsStrictNamespace","allowTopLevelThis","strict","strictMode","noInterop","lazy","allowCommonJSExports","Array","isArray","every","item","Error","getAssertion","localName","template","expression","ast","moduleExportsVisitor","ReferencedIdentifier","path","node","name","localBinding","scope","getBinding","rootBinding","parentPath","isObjectProperty","isObjectPattern","isAssignmentExpression","left","replaceWith","AssignmentExpression","get","isIdentifier","right","types","sequenceExpression","isPattern","ids","getOuterBindingIdentifiers","keys","filter","pre","file","set","visitor","CallExpression","has","isImport","rename","parent","Program","exit","state","isModule","Set","traverse","moduleName","getModuleName","opts","stringLiteral","meta","headers","rewriteModuleStatementsAndPrepareHeader","exportName","esNamespaceOnly","filename","test","source","metadata","loadExpr","callExpression","identifier","header","isSideEffectImport","expressionStatement","init","wrapInterop","interop","loc","push","buildNamespaceInitStatements","ensureStatementsHoisted","unshiftContainer"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _helperModuleTransforms = require(\"@babel/helper-module-transforms\");\n\nvar _helperSimpleAccess = _interopRequireDefault(require(\"@babel/helper-simple-access\"));\n\nvar _core = require(\"@babel/core\");\n\nvar _utils = require(\"babel-plugin-dynamic-import-node/utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = (0, _helperPluginUtils.declare)((api, options) => {\n  api.assertVersion(7);\n  const transformImportCall = (0, _utils.createDynamicImportTransform)(api);\n  const {\n    loose,\n    strictNamespace = false,\n    mjsStrictNamespace = true,\n    allowTopLevelThis,\n    strict,\n    strictMode,\n    noInterop,\n    lazy = false,\n    allowCommonJSExports = true\n  } = options;\n\n  if (typeof lazy !== \"boolean\" && typeof lazy !== \"function\" && (!Array.isArray(lazy) || !lazy.every(item => typeof item === \"string\"))) {\n    throw new Error(`.lazy must be a boolean, array of strings, or a function`);\n  }\n\n  if (typeof strictNamespace !== \"boolean\") {\n    throw new Error(`.strictNamespace must be a boolean, or undefined`);\n  }\n\n  if (typeof mjsStrictNamespace !== \"boolean\") {\n    throw new Error(`.mjsStrictNamespace must be a boolean, or undefined`);\n  }\n\n  const getAssertion = localName => _core.template.expression.ast`\n    (function(){\n      throw new Error(\n        \"The CommonJS '\" + \"${localName}\" + \"' variable is not available in ES6 modules.\" +\n        \"Consider setting setting sourceType:script or sourceType:unambiguous in your \" +\n        \"Babel config for this file.\");\n    })()\n  `;\n\n  const moduleExportsVisitor = {\n    ReferencedIdentifier(path) {\n      const localName = path.node.name;\n      if (localName !== \"module\" && localName !== \"exports\") return;\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = this.scope.getBinding(localName);\n\n      if (rootBinding !== localBinding || path.parentPath.isObjectProperty({\n        value: path.node\n      }) && path.parentPath.parentPath.isObjectPattern() || path.parentPath.isAssignmentExpression({\n        left: path.node\n      }) || path.isAssignmentExpression({\n        left: path.node\n      })) {\n        return;\n      }\n\n      path.replaceWith(getAssertion(localName));\n    },\n\n    AssignmentExpression(path) {\n      const left = path.get(\"left\");\n\n      if (left.isIdentifier()) {\n        const localName = path.node.name;\n        if (localName !== \"module\" && localName !== \"exports\") return;\n        const localBinding = path.scope.getBinding(localName);\n        const rootBinding = this.scope.getBinding(localName);\n        if (rootBinding !== localBinding) return;\n        const right = path.get(\"right\");\n        right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));\n      } else if (left.isPattern()) {\n        const ids = left.getOuterBindingIdentifiers();\n        const localName = Object.keys(ids).filter(localName => {\n          if (localName !== \"module\" && localName !== \"exports\") return false;\n          return this.scope.getBinding(localName) === path.scope.getBinding(localName);\n        })[0];\n\n        if (localName) {\n          const right = path.get(\"right\");\n          right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));\n        }\n      }\n    }\n\n  };\n  return {\n    name: \"transform-modules-commonjs\",\n\n    pre() {\n      this.file.set(\"@babel/plugin-transform-modules-*\", \"commonjs\");\n    },\n\n    visitor: {\n      CallExpression(path) {\n        if (!this.file.has(\"@babel/plugin-proposal-dynamic-import\")) return;\n        if (!path.get(\"callee\").isImport()) return;\n        let {\n          scope\n        } = path;\n\n        do {\n          scope.rename(\"require\");\n        } while (scope = scope.parent);\n\n        transformImportCall(this, path.get(\"callee\"));\n      },\n\n      Program: {\n        exit(path, state) {\n          if (!(0, _helperModuleTransforms.isModule)(path)) return;\n          path.scope.rename(\"exports\");\n          path.scope.rename(\"module\");\n          path.scope.rename(\"require\");\n          path.scope.rename(\"__filename\");\n          path.scope.rename(\"__dirname\");\n\n          if (!allowCommonJSExports) {\n            (0, _helperSimpleAccess.default)(path, new Set([\"module\", \"exports\"]));\n            path.traverse(moduleExportsVisitor, {\n              scope: path.scope\n            });\n          }\n\n          let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);\n          if (moduleName) moduleName = _core.types.stringLiteral(moduleName);\n          const {\n            meta,\n            headers\n          } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path, {\n            exportName: \"exports\",\n            loose,\n            strict,\n            strictMode,\n            allowTopLevelThis,\n            noInterop,\n            lazy,\n            esNamespaceOnly: typeof state.filename === \"string\" && /\\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace\n          });\n\n          for (const [source, metadata] of meta.source) {\n            const loadExpr = _core.types.callExpression(_core.types.identifier(\"require\"), [_core.types.stringLiteral(source)]);\n\n            let header;\n\n            if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {\n              if (metadata.lazy) throw new Error(\"Assertion failure\");\n              header = _core.types.expressionStatement(loadExpr);\n            } else {\n              const init = (0, _helperModuleTransforms.wrapInterop)(path, loadExpr, metadata.interop) || loadExpr;\n\n              if (metadata.lazy) {\n                header = _core.template.ast`\n                  function ${metadata.name}() {\n                    const data = ${init};\n                    ${metadata.name} = function(){ return data; };\n                    return data;\n                  }\n                `;\n              } else {\n                header = _core.template.ast`\n                  var ${metadata.name} = ${init};\n                `;\n              }\n            }\n\n            header.loc = metadata.loc;\n            headers.push(header);\n            headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, loose));\n          }\n\n          (0, _helperModuleTransforms.ensureStatementsHoisted)(headers);\n          path.unshiftContainer(\"body\", headers);\n        }\n\n      }\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}