{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxDynamicImport = _interopRequireDefault(require(\"@babel/plugin-syntax-dynamic-import\"));\n\nvar _package = require(\"../package.json\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst SUPPORTED_MODULES = [\"commonjs\", \"amd\", \"systemjs\"];\nconst MODULES_NOT_FOUND = `\\\n@babel/plugin-proposal-dynamic-import depends on a modules\ntransform plugin. Supported plugins are:\n - @babel/plugin-transform-modules-commonjs ^7.4.0\n - @babel/plugin-transform-modules-amd ^7.4.0\n - @babel/plugin-transform-modules-systemjs ^7.4.0\n\nIf you are using Webpack or Rollup and thus don't want\nBabel to transpile your imports and exports, you can use\nthe @babel/plugin-syntax-dynamic-import plugin and let your\nbundler handle dynamic imports.\n`;\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-dynamic-import\",\n    inherits: _pluginSyntaxDynamicImport.default,\n\n    pre() {\n      this.file.set(\"@babel/plugin-proposal-dynamic-import\", _package.version);\n    },\n\n    visitor: {\n      Program() {\n        const modules = this.file.get(\"@babel/plugin-transform-modules-*\");\n\n        if (!SUPPORTED_MODULES.includes(modules)) {\n          throw new Error(MODULES_NOT_FOUND);\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/home/agatha/open/node_modules/@babel/plugin-proposal-dynamic-import/lib/index.js"],"names":["Object","defineProperty","exports","value","default","_helperPluginUtils","require","_pluginSyntaxDynamicImport","_interopRequireDefault","_package","obj","__esModule","SUPPORTED_MODULES","MODULES_NOT_FOUND","_default","declare","api","assertVersion","name","inherits","pre","file","set","version","visitor","Program","modules","get","includes","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIC,0BAA0B,GAAGC,sBAAsB,CAACF,OAAO,CAAC,qCAAD,CAAR,CAAvD;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,iBAAD,CAAtB;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;;AAE/F,MAAME,iBAAiB,GAAG,CAAC,UAAD,EAAa,KAAb,EAAoB,UAApB,CAA1B;AACA,MAAMC,iBAAiB,GAAI;;;;;;;;;;;CAA3B;;AAaA,IAAIC,QAAQ,GAAG,CAAC,GAAGT,kBAAkB,CAACU,OAAvB,EAAgCC,GAAG,IAAI;AACpDA,EAAAA,GAAG,CAACC,aAAJ,CAAkB,CAAlB;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,yBADD;AAELC,IAAAA,QAAQ,EAAEZ,0BAA0B,CAACH,OAFhC;;AAILgB,IAAAA,GAAG,GAAG;AACJ,WAAKC,IAAL,CAAUC,GAAV,CAAc,uCAAd,EAAuDb,QAAQ,CAACc,OAAhE;AACD,KANI;;AAQLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,GAAG;AACR,cAAMC,OAAO,GAAG,KAAKL,IAAL,CAAUM,GAAV,CAAc,mCAAd,CAAhB;;AAEA,YAAI,CAACf,iBAAiB,CAACgB,QAAlB,CAA2BF,OAA3B,CAAL,EAA0C;AACxC,gBAAM,IAAIG,KAAJ,CAAUhB,iBAAV,CAAN;AACD;AACF;;AAPM;AARJ,GAAP;AAmBD,CArBc,CAAf;;AAuBAX,OAAO,CAACE,OAAR,GAAkBU,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _pluginSyntaxDynamicImport = _interopRequireDefault(require(\"@babel/plugin-syntax-dynamic-import\"));\n\nvar _package = require(\"../package.json\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst SUPPORTED_MODULES = [\"commonjs\", \"amd\", \"systemjs\"];\nconst MODULES_NOT_FOUND = `\\\n@babel/plugin-proposal-dynamic-import depends on a modules\ntransform plugin. Supported plugins are:\n - @babel/plugin-transform-modules-commonjs ^7.4.0\n - @babel/plugin-transform-modules-amd ^7.4.0\n - @babel/plugin-transform-modules-systemjs ^7.4.0\n\nIf you are using Webpack or Rollup and thus don't want\nBabel to transpile your imports and exports, you can use\nthe @babel/plugin-syntax-dynamic-import plugin and let your\nbundler handle dynamic imports.\n`;\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  return {\n    name: \"proposal-dynamic-import\",\n    inherits: _pluginSyntaxDynamicImport.default,\n\n    pre() {\n      this.file.set(\"@babel/plugin-proposal-dynamic-import\", _package.version);\n    },\n\n    visitor: {\n      Program() {\n        const modules = this.file.get(\"@babel/plugin-transform-modules-*\");\n\n        if (!SUPPORTED_MODULES.includes(modules)) {\n          throw new Error(MODULES_NOT_FOUND);\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}