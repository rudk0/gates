{"ast":null,"code":"'use strict';\n\nconst crypto = require('crypto');\n\nmodule.exports = len => {\n  if (!Number.isFinite(len)) {\n    throw new TypeError('Expected a finite number');\n  }\n\n  return crypto.randomBytes(Math.ceil(len / 2)).toString('hex').slice(0, len);\n};","map":{"version":3,"sources":["/home/agatha/open/node_modules/crypto-random-string/index.js"],"names":["crypto","require","module","exports","len","Number","isFinite","TypeError","randomBytes","Math","ceil","toString","slice"],"mappings":"AAAA;;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACvB,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,GAAhB,CAAL,EAA2B;AAC1B,UAAM,IAAIG,SAAJ,CAAc,0BAAd,CAAN;AACA;;AAED,SAAOP,MAAM,CAACQ,WAAP,CAAmBC,IAAI,CAACC,IAAL,CAAUN,GAAG,GAAG,CAAhB,CAAnB,EAAuCO,QAAvC,CAAgD,KAAhD,EAAuDC,KAAvD,CAA6D,CAA7D,EAAgER,GAAhE,CAAP;AACA,CAND","sourcesContent":["'use strict';\nconst crypto = require('crypto');\n\nmodule.exports = len => {\n\tif (!Number.isFinite(len)) {\n\t\tthrow new TypeError('Expected a finite number');\n\t}\n\n\treturn crypto.randomBytes(Math.ceil(len / 2)).toString('hex').slice(0, len);\n};\n"]},"metadata":{},"sourceType":"script"}