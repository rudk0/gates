{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst getFileManifestEntries = require('./lib/get-file-manifest-entries');\n\nconst getManifestSchema = require('./options/schema/get-manifest');\n\nconst validate = require('./lib/validate-options'); // eslint-disable-next-line jsdoc/newline-after-description\n\n/**\n * This method returns a list of URLs to precache, referred to as a \"precache\n * manifest\", along with details about the number of entries and their size,\n * based on the options you provide.\n *\n * @param {Object} config The configuration to use.\n *\n * @param {string} config.globDirectory The local directory you wish to match\n * `globPatterns` against. The path is relative to the current directory.\n *\n * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n * A list of entries to be precached, in addition to any entries that are\n * generated as part of the build configuration.\n *\n * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n * assumed to be uniquely versioned via their URL, and exempted from the normal\n * HTTP cache-busting that's done when populating the precache. While not\n * required, it's recommended that if your existing build process already\n * inserts a `[hash]` value into each filename, you provide a RegExp that will\n * detect that, as it will reduce the bandwidth consumed when precaching.\n *\n * @param {boolean} [config.globFollow=true] Determines whether or not symlinks\n * are followed when generating the precache manifest. For more information, see\n * the definition of `follow` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globIgnores=['node_modules/**']]\n * A set of patterns matching files to always exclude when generating the\n * precache manifest. For more information, see the definition of `ignore` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globPatterns=['**.{js,css,html}']]\n * Files matching any of these patterns will be included in the precache\n * manifest. For more information, see the\n * [`glob` primer](https://github.com/isaacs/node-glob#glob-primer).\n *\n * @param {boolean} [config.globStrict=true] If true, an error reading a directory when\n * generating a precache manifest will cause the build to fail. If false, the\n * problematic directory will be skipped. For more information, see the\n * definition of `strict` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms] One or more\n * functions which will be applied sequentially against the generated manifest.\n * If `modifyURLPrefix` or `dontCacheBustURLsMatching` are also specified, their\n * corresponding transformations will be applied first.\n *\n * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n * used to determine the maximum size of files that will be precached. This\n * prevents you from inadvertently precaching very large files that might have\n * accidentally matched one of your patterns.\n *\n * @param {string} [config.mode='production'] If set to 'production', then an\n * optimized service worker bundle that excludes debugging info will be\n * produced. If not explicitly configured here, the `process.env.NODE_ENV` value\n * will be used, and failing that, it will fall back to `'production'`.\n *\n * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n * that, if present in an entry in the precache manifest, will be replaced with\n * the corresponding value. This can be used to, for example, remove or add a\n * path prefix from a manifest entry if your web hosting setup doesn't match\n * your local filesystem setup. As an alternative with more flexibility, you can\n * use the `manifestTransforms` option and provide a function that modifies the\n * entries in the manifest using whatever logic you provide.\n *\n * @param {Object} [config.templatedURLs] If a URL is rendered based on some\n * server-side logic, its contents may depend on multiple files or on some other\n * unique string value. The keys in this object are server-rendered URLs. If the\n * values are an array of strings, they will be interpreted as `glob` patterns,\n * and the contents of any files matching the patterns will be used to uniquely\n * version the URL. If used with a single string, it will be interpreted as\n * unique versioning information that you've generated for a given URL.\n *\n * @return {Promise<{count: number, manifestEntries: Array<module:workbox-build.ManifestEntry>, size: number, warnings: Array<string>}>}\n * A promise that resolves once the precache manifest (available in the\n * `manifestEntries` property) has been determined. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, and the\n * `count` property contains the total number of precached entries. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function getManifest(config) {\n  const options = validate(config, getManifestSchema);\n  const {\n    manifestEntries,\n    count,\n    size,\n    warnings\n  } = await getFileManifestEntries(options);\n  return {\n    manifestEntries,\n    count,\n    size,\n    warnings\n  };\n}\n\nmodule.exports = getManifest;","map":{"version":3,"sources":["/home/agatha/open/node_modules/workbox-build/build/get-manifest.js"],"names":["getFileManifestEntries","require","getManifestSchema","validate","getManifest","config","options","manifestEntries","count","size","warnings","module","exports"],"mappings":"AAAA;AAEA;;;;;;;;AAOA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,iCAAD,CAAtC;;AAEA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,+BAAD,CAAjC;;AAEA,MAAME,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAxB,C,CAAoD;;AAEpD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,eAAeG,WAAf,CAA2BC,MAA3B,EAAmC;AACjC,QAAMC,OAAO,GAAGH,QAAQ,CAACE,MAAD,EAASH,iBAAT,CAAxB;AACA,QAAM;AACJK,IAAAA,eADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,IAHI;AAIJC,IAAAA;AAJI,MAKF,MAAMV,sBAAsB,CAACM,OAAD,CALhC;AAMA,SAAO;AACLC,IAAAA,eADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,IAHK;AAILC,IAAAA;AAJK,GAAP;AAMD;;AAEDC,MAAM,CAACC,OAAP,GAAiBR,WAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst getFileManifestEntries = require('./lib/get-file-manifest-entries');\n\nconst getManifestSchema = require('./options/schema/get-manifest');\n\nconst validate = require('./lib/validate-options'); // eslint-disable-next-line jsdoc/newline-after-description\n\n/**\n * This method returns a list of URLs to precache, referred to as a \"precache\n * manifest\", along with details about the number of entries and their size,\n * based on the options you provide.\n *\n * @param {Object} config The configuration to use.\n *\n * @param {string} config.globDirectory The local directory you wish to match\n * `globPatterns` against. The path is relative to the current directory.\n *\n * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n * A list of entries to be precached, in addition to any entries that are\n * generated as part of the build configuration.\n *\n * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n * assumed to be uniquely versioned via their URL, and exempted from the normal\n * HTTP cache-busting that's done when populating the precache. While not\n * required, it's recommended that if your existing build process already\n * inserts a `[hash]` value into each filename, you provide a RegExp that will\n * detect that, as it will reduce the bandwidth consumed when precaching.\n *\n * @param {boolean} [config.globFollow=true] Determines whether or not symlinks\n * are followed when generating the precache manifest. For more information, see\n * the definition of `follow` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globIgnores=['node_modules/**']]\n * A set of patterns matching files to always exclude when generating the\n * precache manifest. For more information, see the definition of `ignore` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<string>} [config.globPatterns=['**.{js,css,html}']]\n * Files matching any of these patterns will be included in the precache\n * manifest. For more information, see the\n * [`glob` primer](https://github.com/isaacs/node-glob#glob-primer).\n *\n * @param {boolean} [config.globStrict=true] If true, an error reading a directory when\n * generating a precache manifest will cause the build to fail. If false, the\n * problematic directory will be skipped. For more information, see the\n * definition of `strict` in the `glob`\n * [documentation](https://github.com/isaacs/node-glob#options).\n *\n * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms] One or more\n * functions which will be applied sequentially against the generated manifest.\n * If `modifyURLPrefix` or `dontCacheBustURLsMatching` are also specified, their\n * corresponding transformations will be applied first.\n *\n * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n * used to determine the maximum size of files that will be precached. This\n * prevents you from inadvertently precaching very large files that might have\n * accidentally matched one of your patterns.\n *\n * @param {string} [config.mode='production'] If set to 'production', then an\n * optimized service worker bundle that excludes debugging info will be\n * produced. If not explicitly configured here, the `process.env.NODE_ENV` value\n * will be used, and failing that, it will fall back to `'production'`.\n *\n * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n * that, if present in an entry in the precache manifest, will be replaced with\n * the corresponding value. This can be used to, for example, remove or add a\n * path prefix from a manifest entry if your web hosting setup doesn't match\n * your local filesystem setup. As an alternative with more flexibility, you can\n * use the `manifestTransforms` option and provide a function that modifies the\n * entries in the manifest using whatever logic you provide.\n *\n * @param {Object} [config.templatedURLs] If a URL is rendered based on some\n * server-side logic, its contents may depend on multiple files or on some other\n * unique string value. The keys in this object are server-rendered URLs. If the\n * values are an array of strings, they will be interpreted as `glob` patterns,\n * and the contents of any files matching the patterns will be used to uniquely\n * version the URL. If used with a single string, it will be interpreted as\n * unique versioning information that you've generated for a given URL.\n *\n * @return {Promise<{count: number, manifestEntries: Array<module:workbox-build.ManifestEntry>, size: number, warnings: Array<string>}>}\n * A promise that resolves once the precache manifest (available in the\n * `manifestEntries` property) has been determined. The `size` property\n * contains the aggregate size of all the precached entries, in bytes, and the\n * `count` property contains the total number of precached entries. Any\n * non-fatal warning messages will be returned via `warnings`.\n *\n * @memberof module:workbox-build\n */\n\n\nasync function getManifest(config) {\n  const options = validate(config, getManifestSchema);\n  const {\n    manifestEntries,\n    count,\n    size,\n    warnings\n  } = await getFileManifestEntries(options);\n  return {\n    manifestEntries,\n    count,\n    size,\n    warnings\n  };\n}\n\nmodule.exports = getManifest;"]},"metadata":{},"sourceType":"script"}